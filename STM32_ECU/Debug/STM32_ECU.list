
STM32_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08011968  08011968  00021968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011ac4  08011ac4  00021ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011acc  08011acc  00021acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011ad0  08011ad0  00021ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08011ad4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009160  24000078  08011b4c  00030078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240091d8  08011b4c  000391d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000371ee  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000642c  00000000  00000000  00067294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002898  00000000  00000000  0006d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002600  00000000  00000000  0006ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040a61  00000000  00000000  00072558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034d1a  00000000  00000000  000b2fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001932f7  00000000  00000000  000e7cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0027afca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000af6c  00000000  00000000  0027b01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011950 	.word	0x08011950

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08011950 	.word	0x08011950

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b3e      	ldr	r3, [pc, #248]	; (8000704 <MX_ADC1_Init+0x120>)
 800060a:	4a3f      	ldr	r2, [pc, #252]	; (8000708 <MX_ADC1_Init+0x124>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 800060e:	4b3d      	ldr	r3, [pc, #244]	; (8000704 <MX_ADC1_Init+0x120>)
 8000610:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000616:	4b3b      	ldr	r3, [pc, #236]	; (8000704 <MX_ADC1_Init+0x120>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b39      	ldr	r3, [pc, #228]	; (8000704 <MX_ADC1_Init+0x120>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b38      	ldr	r3, [pc, #224]	; (8000704 <MX_ADC1_Init+0x120>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b36      	ldr	r3, [pc, #216]	; (8000704 <MX_ADC1_Init+0x120>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b35      	ldr	r3, [pc, #212]	; (8000704 <MX_ADC1_Init+0x120>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 3;
 8000634:	4b33      	ldr	r3, [pc, #204]	; (8000704 <MX_ADC1_Init+0x120>)
 8000636:	2203      	movs	r2, #3
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b32      	ldr	r3, [pc, #200]	; (8000704 <MX_ADC1_Init+0x120>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <MX_ADC1_Init+0x120>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <MX_ADC1_Init+0x120>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <MX_ADC1_Init+0x120>)
 800064e:	2201      	movs	r2, #1
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <MX_ADC1_Init+0x120>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_ADC1_Init+0x120>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <MX_ADC1_Init+0x120>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4826      	ldr	r0, [pc, #152]	; (8000704 <MX_ADC1_Init+0x120>)
 800066a:	f002 fe03 	bl	8003274 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 f988 	bl	8001988 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	4820      	ldr	r0, [pc, #128]	; (8000704 <MX_ADC1_Init+0x120>)
 8000684:	f003 fea2 	bl	80043cc <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 f97b 	bl	8001988 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_ADC1_Init+0x128>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 800069a:	2305      	movs	r3, #5
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	4813      	ldr	r0, [pc, #76]	; (8000704 <MX_ADC1_Init+0x120>)
 80006b6:	f003 f9d7 	bl	8003a68 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 f962 	bl	8001988 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_ADC1_Init+0x12c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_ADC1_Init+0x120>)
 80006d2:	f003 f9c9 	bl	8003a68 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 f954 	bl	8001988 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_ADC1_Init+0x130>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_ADC1_Init+0x120>)
 80006ee:	f003 f9bb 	bl	8003a68 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 f946 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	24000094 	.word	0x24000094
 8000708:	40022000 	.word	0x40022000
 800070c:	43210000 	.word	0x43210000
 8000710:	47520000 	.word	0x47520000
 8000714:	3ac04000 	.word	0x3ac04000

08000718 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000730:	4b38      	ldr	r3, [pc, #224]	; (8000814 <MX_ADC3_Init+0xfc>)
 8000732:	4a39      	ldr	r2, [pc, #228]	; (8000818 <MX_ADC3_Init+0x100>)
 8000734:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000736:	4b37      	ldr	r3, [pc, #220]	; (8000814 <MX_ADC3_Init+0xfc>)
 8000738:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800073c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <MX_ADC3_Init+0xfc>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000744:	4b33      	ldr	r3, [pc, #204]	; (8000814 <MX_ADC3_Init+0xfc>)
 8000746:	2201      	movs	r2, #1
 8000748:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800074a:	4b32      	ldr	r3, [pc, #200]	; (8000814 <MX_ADC3_Init+0xfc>)
 800074c:	2208      	movs	r2, #8
 800074e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000750:	4b30      	ldr	r3, [pc, #192]	; (8000814 <MX_ADC3_Init+0xfc>)
 8000752:	2200      	movs	r2, #0
 8000754:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000756:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC3_Init+0xfc>)
 8000758:	2201      	movs	r2, #1
 800075a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 800075c:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <MX_ADC3_Init+0xfc>)
 800075e:	2203      	movs	r2, #3
 8000760:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <MX_ADC3_Init+0xfc>)
 8000764:	2200      	movs	r2, #0
 8000766:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000768:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <MX_ADC3_Init+0xfc>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <MX_ADC3_Init+0xfc>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000774:	4b27      	ldr	r3, [pc, #156]	; (8000814 <MX_ADC3_Init+0xfc>)
 8000776:	2201      	movs	r2, #1
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_ADC3_Init+0xfc>)
 800077c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000780:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_ADC3_Init+0xfc>)
 8000784:	2200      	movs	r2, #0
 8000786:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_ADC3_Init+0xfc>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000790:	4820      	ldr	r0, [pc, #128]	; (8000814 <MX_ADC3_Init+0xfc>)
 8000792:	f002 fd6f 	bl	8003274 <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 800079c:	f001 f8f4 	bl	8001988 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007a0:	2301      	movs	r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a4:	2306      	movs	r3, #6
 80007a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80007a8:	2305      	movs	r3, #5
 80007aa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b2:	2304      	movs	r3, #4
 80007b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4814      	ldr	r0, [pc, #80]	; (8000814 <MX_ADC3_Init+0xfc>)
 80007c4:	f003 f950 	bl	8003a68 <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 80007ce:	f001 f8db 	bl	8001988 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_ADC3_Init+0x104>)
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007d6:	230c      	movs	r3, #12
 80007d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4619      	mov	r1, r3
 80007de:	480d      	ldr	r0, [pc, #52]	; (8000814 <MX_ADC3_Init+0xfc>)
 80007e0:	f003 f942 	bl	8003a68 <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 80007ea:	f001 f8cd 	bl	8001988 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_ADC3_Init+0x108>)
 80007f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007f2:	2312      	movs	r3, #18
 80007f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <MX_ADC3_Init+0xfc>)
 80007fc:	f003 f934 	bl	8003a68 <HAL_ADC_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC3_Init+0xf2>
  {
    Error_Handler();
 8000806:	f001 f8bf 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	240000f8 	.word	0x240000f8
 8000818:	58026000 	.word	0x58026000
 800081c:	04300002 	.word	0x04300002
 8000820:	cb840000 	.word	0xcb840000

08000824 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a64      	ldr	r2, [pc, #400]	; (80009d4 <HAL_ADC_MspInit+0x1b0>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d15a      	bne.n	80008fc <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000846:	4b64      	ldr	r3, [pc, #400]	; (80009d8 <HAL_ADC_MspInit+0x1b4>)
 8000848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800084c:	4a62      	ldr	r2, [pc, #392]	; (80009d8 <HAL_ADC_MspInit+0x1b4>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000856:	4b60      	ldr	r3, [pc, #384]	; (80009d8 <HAL_ADC_MspInit+0x1b4>)
 8000858:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800085c:	f003 0320 	and.w	r3, r3, #32
 8000860:	61bb      	str	r3, [r7, #24]
 8000862:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <HAL_ADC_MspInit+0x1b4>)
 8000866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086a:	4a5b      	ldr	r2, [pc, #364]	; (80009d8 <HAL_ADC_MspInit+0x1b4>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000874:	4b58      	ldr	r3, [pc, #352]	; (80009d8 <HAL_ADC_MspInit+0x1b4>)
 8000876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INP17
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000882:	2307      	movs	r3, #7
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4851      	ldr	r0, [pc, #324]	; (80009dc <HAL_ADC_MspInit+0x1b8>)
 8000896:	f007 f9ab 	bl	8007bf0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800089a:	4b51      	ldr	r3, [pc, #324]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 800089c:	4a51      	ldr	r2, [pc, #324]	; (80009e4 <HAL_ADC_MspInit+0x1c0>)
 800089e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008a0:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 80008a2:	2209      	movs	r2, #9
 80008a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a6:	4b4e      	ldr	r3, [pc, #312]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ac:	4b4c      	ldr	r3, [pc, #304]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008b2:	4b4b      	ldr	r3, [pc, #300]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 80008b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008ba:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 80008bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008c2:	4b47      	ldr	r3, [pc, #284]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 80008c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008ca:	4b45      	ldr	r3, [pc, #276]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 80008cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008d2:	4b43      	ldr	r3, [pc, #268]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008d8:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008de:	4840      	ldr	r0, [pc, #256]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 80008e0:	f004 f8da 	bl	8004a98 <HAL_DMA_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 80008ea:	f001 f84d 	bl	8001988 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a3b      	ldr	r2, [pc, #236]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 80008f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80008f4:	4a3a      	ldr	r2, [pc, #232]	; (80009e0 <HAL_ADC_MspInit+0x1bc>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80008fa:	e066      	b.n	80009ca <HAL_ADC_MspInit+0x1a6>
  else if(adcHandle->Instance==ADC3)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a39      	ldr	r2, [pc, #228]	; (80009e8 <HAL_ADC_MspInit+0x1c4>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d161      	bne.n	80009ca <HAL_ADC_MspInit+0x1a6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000906:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <HAL_ADC_MspInit+0x1b4>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	4a32      	ldr	r2, [pc, #200]	; (80009d8 <HAL_ADC_MspInit+0x1b4>)
 800090e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000916:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <HAL_ADC_MspInit+0x1b4>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000924:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <HAL_ADC_MspInit+0x1b4>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	4a2b      	ldr	r2, [pc, #172]	; (80009d8 <HAL_ADC_MspInit+0x1b4>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <HAL_ADC_MspInit+0x1b4>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000942:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000946:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800094a:	f002 faaf 	bl	8002eac <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800094e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000952:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000956:	f002 faa9 	bl	8002eac <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 800095c:	4a24      	ldr	r2, [pc, #144]	; (80009f0 <HAL_ADC_MspInit+0x1cc>)
 800095e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 8000962:	2273      	movs	r2, #115	; 0x73
 8000964:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 8000974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000978:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 800097c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000980:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 8000984:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000988:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 800098c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000990:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800099e:	4813      	ldr	r0, [pc, #76]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 80009a0:	f004 f87a 	bl	8004a98 <HAL_DMA_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 80009aa:	f000 ffed 	bl	8001988 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 80009b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <HAL_ADC_MspInit+0x1c8>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 6, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2106      	movs	r1, #6
 80009be:	207f      	movs	r0, #127	; 0x7f
 80009c0:	f004 f842 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80009c4:	207f      	movs	r0, #127	; 0x7f
 80009c6:	f004 f859 	bl	8004a7c <HAL_NVIC_EnableIRQ>
}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	; 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40022000 	.word	0x40022000
 80009d8:	58024400 	.word	0x58024400
 80009dc:	58020000 	.word	0x58020000
 80009e0:	2400015c 	.word	0x2400015c
 80009e4:	40020010 	.word	0x40020010
 80009e8:	58026000 	.word	0x58026000
 80009ec:	240001d4 	.word	0x240001d4
 80009f0:	40020028 	.word	0x40020028

080009f4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_COMP1_Init+0x50>)
 80009fa:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <MX_COMP1_Init+0x54>)
 80009fc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_COMP1_Init+0x50>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_COMP1_Init+0x58>)
 8000a02:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_COMP1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_COMP1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_MEDIUM;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_COMP1_Init+0x50>)
 8000a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a16:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_COMP1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_COMP1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_COMP1_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_COMP1_Init+0x50>)
 8000a2c:	2221      	movs	r2, #33	; 0x21
 8000a2e:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_COMP1_Init+0x50>)
 8000a32:	f003 fda9 	bl	8004588 <HAL_COMP_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 8000a3c:	f000 ffa4 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2400024c 	.word	0x2400024c
 8000a48:	5800380c 	.word	0x5800380c
 8000a4c:	00020006 	.word	0x00020006

08000a50 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <HAL_COMP_MspInit+0x90>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d131      	bne.n	8000ad6 <HAL_COMP_MspInit+0x86>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* COMP1 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_COMP_MspInit+0x94>)
 8000a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a78:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <HAL_COMP_MspInit+0x94>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_COMP_MspInit+0x94>)
 8000a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_COMP_MspInit+0x94>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <HAL_COMP_MspInit+0x94>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_COMP_MspInit+0x94>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PB0     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <HAL_COMP_MspInit+0x98>)
 8000ac2:	f007 f895 	bl	8007bf0 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 6, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2106      	movs	r1, #6
 8000aca:	2089      	movs	r0, #137	; 0x89
 8000acc:	f003 ffbc 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8000ad0:	2089      	movs	r0, #137	; 0x89
 8000ad2:	f003 ffd3 	bl	8004a7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	5800380c 	.word	0x5800380c
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	58020400 	.word	0x58020400

08000aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af2:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <MX_DMA_Init+0xac>)
 8000af4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af8:	4a27      	ldr	r2, [pc, #156]	; (8000b98 <MX_DMA_Init+0xac>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <MX_DMA_Init+0xac>)
 8000b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_DMA_Init+0xac>)
 8000b12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b16:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <MX_DMA_Init+0xac>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_DMA_Init+0xac>)
 8000b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2106      	movs	r1, #6
 8000b32:	200b      	movs	r0, #11
 8000b34:	f003 ff88 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b38:	200b      	movs	r0, #11
 8000b3a:	f003 ff9f 	bl	8004a7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2106      	movs	r1, #6
 8000b42:	200c      	movs	r0, #12
 8000b44:	f003 ff80 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b48:	200c      	movs	r0, #12
 8000b4a:	f003 ff97 	bl	8004a7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2105      	movs	r1, #5
 8000b52:	200d      	movs	r0, #13
 8000b54:	f003 ff78 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b58:	200d      	movs	r0, #13
 8000b5a:	f003 ff8f 	bl	8004a7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2105      	movs	r1, #5
 8000b62:	200e      	movs	r0, #14
 8000b64:	f003 ff70 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b68:	200e      	movs	r0, #14
 8000b6a:	f003 ff87 	bl	8004a7c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2105      	movs	r1, #5
 8000b72:	2038      	movs	r0, #56	; 0x38
 8000b74:	f003 ff68 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b78:	2038      	movs	r0, #56	; 0x38
 8000b7a:	f003 ff7f 	bl	8004a7c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2105      	movs	r1, #5
 8000b82:	2039      	movs	r0, #57	; 0x39
 8000b84:	f003 ff60 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b88:	2039      	movs	r0, #57	; 0x39
 8000b8a:	f003 ff77 	bl	8004a7c <HAL_NVIC_EnableIRQ>

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	58024400 	.word	0x58024400

08000b9c <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000ba2:	4a2f      	ldr	r2, [pc, #188]	; (8000c60 <MX_FDCAN1_Init+0xc4>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bd2:	220d      	movs	r2, #13
 8000bd4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bd8:	2202      	movs	r2, #2
 8000bda:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000bee:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 128;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c08:	2220      	movs	r2, #32
 8000c0a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c0e:	2204      	movs	r2, #4
 8000c10:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c14:	2220      	movs	r2, #32
 8000c16:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c26:	2204      	movs	r2, #4
 8000c28:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c38:	2220      	movs	r2, #32
 8000c3a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c44:	2204      	movs	r2, #4
 8000c46:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_FDCAN1_Init+0xc0>)
 8000c4a:	f006 f959 	bl	8006f00 <HAL_FDCAN_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c54:	f000 fe98 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	24000278 	.word	0x24000278
 8000c60:	4000a000 	.word	0x4000a000

08000c64 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000c68:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000c6a:	4a2f      	ldr	r2, [pc, #188]	; (8000d28 <MX_FDCAN2_Init+0xc4>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000c74:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000c80:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000c86:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000c8c:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000c9a:	220d      	movs	r2, #13
 8000c9c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000caa:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 128;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000cdc:	2220      	movs	r2, #32
 8000cde:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000cee:	2204      	movs	r2, #4
 8000cf0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000d00:	2220      	movs	r2, #32
 8000d02:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_FDCAN2_Init+0xc0>)
 8000d12:	f006 f8f5 	bl	8006f00 <HAL_FDCAN_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000d1c:	f000 fe34 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	24000318 	.word	0x24000318
 8000d28:	4000a400 	.word	0x4000a400

08000d2c <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0ba      	sub	sp, #232	; 0xe8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	22bc      	movs	r2, #188	; 0xbc
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f010 fd35 	bl	80117bc <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a5b      	ldr	r2, [pc, #364]	; (8000ec4 <HAL_FDCAN_MspInit+0x198>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d155      	bne.n	8000e08 <HAL_FDCAN_MspInit+0xdc>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d68:	f107 0318 	add.w	r3, r7, #24
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f009 f913 	bl	8009f98 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000d78:	f000 fe06 	bl	8001988 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000d7c:	4b52      	ldr	r3, [pc, #328]	; (8000ec8 <HAL_FDCAN_MspInit+0x19c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a51      	ldr	r2, [pc, #324]	; (8000ec8 <HAL_FDCAN_MspInit+0x19c>)
 8000d84:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000d86:	4b50      	ldr	r3, [pc, #320]	; (8000ec8 <HAL_FDCAN_MspInit+0x19c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d10e      	bne.n	8000dac <HAL_FDCAN_MspInit+0x80>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ecc <HAL_FDCAN_MspInit+0x1a0>)
 8000d90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d94:	4a4d      	ldr	r2, [pc, #308]	; (8000ecc <HAL_FDCAN_MspInit+0x1a0>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000d9e:	4b4b      	ldr	r3, [pc, #300]	; (8000ecc <HAL_FDCAN_MspInit+0x1a0>)
 8000da0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <HAL_FDCAN_MspInit+0x1a0>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	4a46      	ldr	r2, [pc, #280]	; (8000ecc <HAL_FDCAN_MspInit+0x1a0>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbc:	4b43      	ldr	r3, [pc, #268]	; (8000ecc <HAL_FDCAN_MspInit+0x1a0>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000de4:	2309      	movs	r3, #9
 8000de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4837      	ldr	r0, [pc, #220]	; (8000ed0 <HAL_FDCAN_MspInit+0x1a4>)
 8000df2:	f006 fefd 	bl	8007bf0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 6, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2106      	movs	r1, #6
 8000dfa:	2013      	movs	r0, #19
 8000dfc:	f003 fe24 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e00:	2013      	movs	r0, #19
 8000e02:	f003 fe3b 	bl	8004a7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000e06:	e058      	b.n	8000eba <HAL_FDCAN_MspInit+0x18e>
  else if(fdcanHandle->Instance==FDCAN2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a31      	ldr	r2, [pc, #196]	; (8000ed4 <HAL_FDCAN_MspInit+0x1a8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d153      	bne.n	8000eba <HAL_FDCAN_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	4618      	mov	r0, r3
 8000e24:	f009 f8b8 	bl	8009f98 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8000e2e:	f000 fdab 	bl	8001988 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <HAL_FDCAN_MspInit+0x19c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a23      	ldr	r2, [pc, #140]	; (8000ec8 <HAL_FDCAN_MspInit+0x19c>)
 8000e3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <HAL_FDCAN_MspInit+0x19c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d10e      	bne.n	8000e62 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_FDCAN_MspInit+0x1a0>)
 8000e46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <HAL_FDCAN_MspInit+0x1a0>)
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e50:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_FDCAN_MspInit+0x1a0>)
 8000e56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_FDCAN_MspInit+0x1a0>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <HAL_FDCAN_MspInit+0x1a0>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_FDCAN_MspInit+0x1a0>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e80:	2360      	movs	r3, #96	; 0x60
 8000e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000e98:	2309      	movs	r3, #9
 8000e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <HAL_FDCAN_MspInit+0x1ac>)
 8000ea6:	f006 fea3 	bl	8007bf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2106      	movs	r1, #6
 8000eae:	2014      	movs	r0, #20
 8000eb0:	f003 fdca 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8000eb4:	2014      	movs	r0, #20
 8000eb6:	f003 fde1 	bl	8004a7c <HAL_NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	37e8      	adds	r7, #232	; 0xe8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	4000a000 	.word	0x4000a000
 8000ec8:	240003b8 	.word	0x240003b8
 8000ecc:	58024400 	.word	0x58024400
 8000ed0:	58020000 	.word	0x58020000
 8000ed4:	4000a400 	.word	0x4000a400
 8000ed8:	58020400 	.word	0x58020400

08000edc <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
return 0;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <MX_FREERTOS_Init+0x18>)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_FREERTOS_Init+0x1c>)
 8000f2a:	f00e f837 	bl	800ef9c <osThreadNew>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <MX_FREERTOS_Init+0x20>)
 8000f32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	08011a00 	.word	0x08011a00
 8000f3c:	08000f45 	.word	0x08000f45
 8000f40:	240003bc 	.word	0x240003bc

08000f44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f00e f8b7 	bl	800f0c0 <osDelay>
 8000f52:	e7fb      	b.n	8000f4c <StartDefaultTask+0x8>

08000f54 <MX_GPIO_Init>:
     PC1   ------> ADCx_INP11
     PB12   ------> UART5_RX
     PB13   ------> UART5_TX
*/
void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	; 0x38
 8000f58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4bb9      	ldr	r3, [pc, #740]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f70:	4ab7      	ldr	r2, [pc, #732]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000f72:	f043 0310 	orr.w	r3, r3, #16
 8000f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7a:	4bb5      	ldr	r3, [pc, #724]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	f003 0310 	and.w	r3, r3, #16
 8000f84:	623b      	str	r3, [r7, #32]
 8000f86:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f88:	4bb1      	ldr	r3, [pc, #708]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8e:	4ab0      	ldr	r2, [pc, #704]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000f90:	f043 0320 	orr.w	r3, r3, #32
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f98:	4bad      	ldr	r3, [pc, #692]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa6:	4baa      	ldr	r3, [pc, #680]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fac:	4aa8      	ldr	r2, [pc, #672]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb6:	4ba6      	ldr	r3, [pc, #664]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc4:	4ba2      	ldr	r3, [pc, #648]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fca:	4aa1      	ldr	r2, [pc, #644]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd4:	4b9e      	ldr	r3, [pc, #632]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b9b      	ldr	r3, [pc, #620]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe8:	4a99      	ldr	r2, [pc, #612]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff2:	4b97      	ldr	r3, [pc, #604]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b93      	ldr	r3, [pc, #588]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001006:	4a92      	ldr	r2, [pc, #584]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001010:	4b8f      	ldr	r3, [pc, #572]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101e:	4b8c      	ldr	r3, [pc, #560]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	4a8a      	ldr	r2, [pc, #552]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8001026:	f043 0308 	orr.w	r3, r3, #8
 800102a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102e:	4b88      	ldr	r3, [pc, #544]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800103c:	4b84      	ldr	r3, [pc, #528]	; (8001250 <MX_GPIO_Init+0x2fc>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	4a83      	ldr	r2, [pc, #524]	; (8001250 <MX_GPIO_Init+0x2fc>)
 8001044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104c:	4b80      	ldr	r3, [pc, #512]	; (8001250 <MX_GPIO_Init+0x2fc>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD3_Pin|LD4_Pin|LD0_Pin|LD1_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	211b      	movs	r1, #27
 800105e:	487d      	ldr	r0, [pc, #500]	; (8001254 <MX_GPIO_Init+0x300>)
 8001060:	f006 ff76 	bl	8007f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, EEPROMWC_Pin|DO11_Pin|DO12_Pin|DO13_Pin
 8001064:	2200      	movs	r2, #0
 8001066:	f64f 0104 	movw	r1, #63492	; 0xf804
 800106a:	487b      	ldr	r0, [pc, #492]	; (8001258 <MX_GPIO_Init+0x304>)
 800106c:	f006 ff70 	bl	8007f50 <HAL_GPIO_WritePin>
                          |DO14_Pin|DO15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DO3_Pin|DO4_Pin|DO5_Pin|DO6_Pin
 8001070:	2200      	movs	r2, #0
 8001072:	21f8      	movs	r1, #248	; 0xf8
 8001074:	4879      	ldr	r0, [pc, #484]	; (800125c <MX_GPIO_Init+0x308>)
 8001076:	f006 ff6b 	bl	8007f50 <HAL_GPIO_WritePin>
                          |DO7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO1_Pin|DO2_Pin|Shutdown_Pin|LD7_Pin
 800107a:	2200      	movs	r2, #0
 800107c:	f640 3186 	movw	r1, #2950	; 0xb86
 8001080:	4877      	ldr	r0, [pc, #476]	; (8001260 <MX_GPIO_Init+0x30c>)
 8001082:	f006 ff65 	bl	8007f50 <HAL_GPIO_WritePin>
                          |LD8_Pin|LD9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108c:	4875      	ldr	r0, [pc, #468]	; (8001264 <MX_GPIO_Init+0x310>)
 800108e:	f006 ff5f 	bl	8007f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin|LD0_Pin|LD1_Pin;
 8001092:	231b      	movs	r3, #27
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	486a      	ldr	r0, [pc, #424]	; (8001254 <MX_GPIO_Init+0x300>)
 80010aa:	f006 fda1 	bl	8007bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = EEPROMWC_Pin|DO11_Pin|DO12_Pin|DO13_Pin
 80010ae:	f64f 0304 	movw	r3, #63492	; 0xf804
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DO14_Pin|DO15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	4864      	ldr	r0, [pc, #400]	; (8001258 <MX_GPIO_Init+0x304>)
 80010c8:	f006 fd92 	bl	8007bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010cc:	2302      	movs	r3, #2
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d0:	2303      	movs	r3, #3
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4862      	ldr	r0, [pc, #392]	; (8001268 <MX_GPIO_Init+0x314>)
 80010e0:	f006 fd86 	bl	8007bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = DO3_Pin|DO4_Pin|DO5_Pin|DO6_Pin
 80010e4:	23f8      	movs	r3, #248	; 0xf8
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DO7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4858      	ldr	r0, [pc, #352]	; (800125c <MX_GPIO_Init+0x308>)
 80010fc:	f006 fd78 	bl	8007bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = DO1_Pin|DO2_Pin|Shutdown_Pin|LD7_Pin
 8001100:	f640 3386 	movw	r3, #2950	; 0xb86
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD8_Pin|LD9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	4851      	ldr	r0, [pc, #324]	; (8001260 <MX_GPIO_Init+0x30c>)
 800111a:	f006 fd69 	bl	8007bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ShutdownMon_Pin;
 800111e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ShutdownMon_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001130:	4619      	mov	r1, r3
 8001132:	4848      	ldr	r0, [pc, #288]	; (8001254 <MX_GPIO_Init+0x300>)
 8001134:	f006 fd5c 	bl	8007bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI13_Pin;
 8001138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800113e:	4b4b      	ldr	r3, [pc, #300]	; (800126c <MX_GPIO_Init+0x318>)
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001142:	2301      	movs	r3, #1
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DI13_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	4841      	ldr	r0, [pc, #260]	; (8001254 <MX_GPIO_Init+0x300>)
 800114e:	f006 fd4f 	bl	8007bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001152:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001164:	230e      	movs	r3, #14
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116c:	4619      	mov	r1, r3
 800116e:	483c      	ldr	r0, [pc, #240]	; (8001260 <MX_GPIO_Init+0x30c>)
 8001170:	f006 fd3e 	bl	8007bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI8_Pin|DI10_Pin|DI11_Pin;
 8001174:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800117a:	4b3c      	ldr	r3, [pc, #240]	; (800126c <MX_GPIO_Init+0x318>)
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117e:	2301      	movs	r3, #1
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	4619      	mov	r1, r3
 8001188:	4839      	ldr	r0, [pc, #228]	; (8001270 <MX_GPIO_Init+0x31c>)
 800118a:	f006 fd31 	bl	8007bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DI14_Pin|DI15_Pin;
 800118e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001194:	4b37      	ldr	r3, [pc, #220]	; (8001274 <MX_GPIO_Init+0x320>)
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001198:	2302      	movs	r3, #2
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	4833      	ldr	r0, [pc, #204]	; (8001270 <MX_GPIO_Init+0x31c>)
 80011a4:	f006 fd24 	bl	8007bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = DI2_Pin|DI3_Pin|DI4_Pin|DI5_Pin
 80011a8:	237c      	movs	r3, #124	; 0x7c
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <MX_GPIO_Init+0x318>)
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	482a      	ldr	r0, [pc, #168]	; (8001264 <MX_GPIO_Init+0x310>)
 80011bc:	f006 fd18 	bl	8007bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	4822      	ldr	r0, [pc, #136]	; (8001264 <MX_GPIO_Init+0x310>)
 80011da:	f006 fd09 	bl	8007bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI7_Pin;
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MX_GPIO_Init+0x320>)
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DI7_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	481d      	ldr	r0, [pc, #116]	; (8001268 <MX_GPIO_Init+0x314>)
 80011f2:	f006 fcfd 	bl	8007bf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	210f      	movs	r1, #15
 80011fa:	2008      	movs	r0, #8
 80011fc:	f003 fc24 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001200:	2008      	movs	r0, #8
 8001202:	f003 fc3b 	bl	8004a7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	210f      	movs	r1, #15
 800120a:	2009      	movs	r0, #9
 800120c:	f003 fc1c 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001210:	2009      	movs	r0, #9
 8001212:	f003 fc33 	bl	8004a7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	210f      	movs	r1, #15
 800121a:	200a      	movs	r0, #10
 800121c:	f003 fc14 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001220:	200a      	movs	r0, #10
 8001222:	f003 fc2b 	bl	8004a7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	210f      	movs	r1, #15
 800122a:	2017      	movs	r0, #23
 800122c:	f003 fc0c 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001230:	2017      	movs	r0, #23
 8001232:	f003 fc23 	bl	8004a7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	210f      	movs	r1, #15
 800123a:	2028      	movs	r0, #40	; 0x28
 800123c:	f003 fc04 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001240:	2028      	movs	r0, #40	; 0x28
 8001242:	f003 fc1b 	bl	8004a7c <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3738      	adds	r7, #56	; 0x38
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	58024400 	.word	0x58024400
 8001254:	58021000 	.word	0x58021000
 8001258:	58021400 	.word	0x58021400
 800125c:	58020000 	.word	0x58020000
 8001260:	58020400 	.word	0x58020400
 8001264:	58021800 	.word	0x58021800
 8001268:	58020800 	.word	0x58020800
 800126c:	11210000 	.word	0x11210000
 8001270:	58020c00 	.word	0x58020c00
 8001274:	11110000 	.word	0x11110000

08001278 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_I2C2_Init+0x78>)
 800127e:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <MX_I2C2_Init+0x7c>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0050174F;
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_I2C2_Init+0x78>)
 8001284:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <MX_I2C2_Init+0x80>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_I2C2_Init+0x78>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_I2C2_Init+0x78>)
 8001290:	2201      	movs	r2, #1
 8001292:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_I2C2_Init+0x78>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_I2C2_Init+0x78>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_I2C2_Init+0x78>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_I2C2_Init+0x78>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_I2C2_Init+0x78>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012b2:	480f      	ldr	r0, [pc, #60]	; (80012f0 <MX_I2C2_Init+0x78>)
 80012b4:	f006 fe8a 	bl	8007fcc <HAL_I2C_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012be:	f000 fb63 	bl	8001988 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c2:	2100      	movs	r1, #0
 80012c4:	480a      	ldr	r0, [pc, #40]	; (80012f0 <MX_I2C2_Init+0x78>)
 80012c6:	f007 fd96 	bl	8008df6 <HAL_I2CEx_ConfigAnalogFilter>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012d0:	f000 fb5a 	bl	8001988 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012d4:	2100      	movs	r1, #0
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <MX_I2C2_Init+0x78>)
 80012d8:	f007 fdd8 	bl	8008e8c <HAL_I2CEx_ConfigDigitalFilter>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012e2:	f000 fb51 	bl	8001988 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 80012e6:	2002      	movs	r0, #2
 80012e8:	f007 fe1c 	bl	8008f24 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	240003c0 	.word	0x240003c0
 80012f4:	40005800 	.word	0x40005800
 80012f8:	0050174f 	.word	0x0050174f

080012fc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_I2C3_Init+0x74>)
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <MX_I2C3_Init+0x78>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0xF010F2FF;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_I2C3_Init+0x74>)
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <MX_I2C3_Init+0x7c>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_I2C3_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_I2C3_Init+0x74>)
 8001314:	2201      	movs	r2, #1
 8001316:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_I2C3_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_I2C3_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_I2C3_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_I2C3_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_I2C3_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <MX_I2C3_Init+0x74>)
 8001338:	f006 fe48 	bl	8007fcc <HAL_I2C_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001342:	f000 fb21 	bl	8001988 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001346:	2100      	movs	r1, #0
 8001348:	4809      	ldr	r0, [pc, #36]	; (8001370 <MX_I2C3_Init+0x74>)
 800134a:	f007 fd54 	bl	8008df6 <HAL_I2CEx_ConfigAnalogFilter>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001354:	f000 fb18 	bl	8001988 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_I2C3_Init+0x74>)
 800135c:	f007 fd96 	bl	8008e8c <HAL_I2CEx_ConfigDigitalFilter>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001366:	f000 fb0f 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2400040c 	.word	0x2400040c
 8001374:	40005c00 	.word	0x40005c00
 8001378:	f010f2ff 	.word	0xf010f2ff

0800137c <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_I2C4_Init+0x74>)
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <MX_I2C4_Init+0x78>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x70303AEE;
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_I2C4_Init+0x74>)
 8001388:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <MX_I2C4_Init+0x7c>)
 800138a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_I2C4_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_I2C4_Init+0x74>)
 8001394:	2201      	movs	r2, #1
 8001396:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_I2C4_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_I2C4_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_I2C4_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_I2C4_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_I2C4_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80013b6:	480e      	ldr	r0, [pc, #56]	; (80013f0 <MX_I2C4_Init+0x74>)
 80013b8:	f006 fe08 	bl	8007fcc <HAL_I2C_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80013c2:	f000 fae1 	bl	8001988 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <MX_I2C4_Init+0x74>)
 80013ca:	f007 fd14 	bl	8008df6 <HAL_I2CEx_ConfigAnalogFilter>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80013d4:	f000 fad8 	bl	8001988 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80013d8:	2100      	movs	r1, #0
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_I2C4_Init+0x74>)
 80013dc:	f007 fd56 	bl	8008e8c <HAL_I2CEx_ConfigDigitalFilter>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80013e6:	f000 facf 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	24000458 	.word	0x24000458
 80013f4:	58001c00 	.word	0x58001c00
 80013f8:	70303aee 	.word	0x70303aee

080013fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0be      	sub	sp, #248	; 0xf8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001418:	22bc      	movs	r2, #188	; 0xbc
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f010 f9cd 	bl	80117bc <memset>
  if(i2cHandle->Instance==I2C2)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a98      	ldr	r2, [pc, #608]	; (8001688 <HAL_I2C_MspInit+0x28c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d152      	bne.n	80014d2 <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800142c:	2308      	movs	r3, #8
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143a:	4618      	mov	r0, r3
 800143c:	f008 fdac 	bl	8009f98 <HAL_RCCEx_PeriphCLKConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001446:	f000 fa9f 	bl	8001988 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800144a:	4b90      	ldr	r3, [pc, #576]	; (800168c <HAL_I2C_MspInit+0x290>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	4a8e      	ldr	r2, [pc, #568]	; (800168c <HAL_I2C_MspInit+0x290>)
 8001452:	f043 0320 	orr.w	r3, r3, #32
 8001456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145a:	4b8c      	ldr	r3, [pc, #560]	; (800168c <HAL_I2C_MspInit+0x290>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001468:	2303      	movs	r3, #3
 800146a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146e:	2312      	movs	r3, #18
 8001470:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001480:	2304      	movs	r3, #4
 8001482:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001486:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800148a:	4619      	mov	r1, r3
 800148c:	4880      	ldr	r0, [pc, #512]	; (8001690 <HAL_I2C_MspInit+0x294>)
 800148e:	f006 fbaf 	bl	8007bf0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001492:	4b7e      	ldr	r3, [pc, #504]	; (800168c <HAL_I2C_MspInit+0x290>)
 8001494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001498:	4a7c      	ldr	r2, [pc, #496]	; (800168c <HAL_I2C_MspInit+0x290>)
 800149a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800149e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014a2:	4b7a      	ldr	r3, [pc, #488]	; (800168c <HAL_I2C_MspInit+0x290>)
 80014a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ac:	623b      	str	r3, [r7, #32]
 80014ae:	6a3b      	ldr	r3, [r7, #32]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2106      	movs	r1, #6
 80014b4:	2021      	movs	r0, #33	; 0x21
 80014b6:	f003 fac7 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80014ba:	2021      	movs	r0, #33	; 0x21
 80014bc:	f003 fade 	bl	8004a7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2106      	movs	r1, #6
 80014c4:	2022      	movs	r0, #34	; 0x22
 80014c6:	f003 fabf 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80014ca:	2022      	movs	r0, #34	; 0x22
 80014cc:	f003 fad6 	bl	8004a7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80014d0:	e0d5      	b.n	800167e <HAL_I2C_MspInit+0x282>
  else if(i2cHandle->Instance==I2C3)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a6f      	ldr	r2, [pc, #444]	; (8001694 <HAL_I2C_MspInit+0x298>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d178      	bne.n	80015ce <HAL_I2C_MspInit+0x1d2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014dc:	2308      	movs	r3, #8
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ea:	4618      	mov	r0, r3
 80014ec:	f008 fd54 	bl	8009f98 <HAL_RCCEx_PeriphCLKConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_MspInit+0xfe>
      Error_Handler();
 80014f6:	f000 fa47 	bl	8001988 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b64      	ldr	r3, [pc, #400]	; (800168c <HAL_I2C_MspInit+0x290>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	4a62      	ldr	r2, [pc, #392]	; (800168c <HAL_I2C_MspInit+0x290>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150a:	4b60      	ldr	r3, [pc, #384]	; (800168c <HAL_I2C_MspInit+0x290>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b5c      	ldr	r3, [pc, #368]	; (800168c <HAL_I2C_MspInit+0x290>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151e:	4a5b      	ldr	r2, [pc, #364]	; (800168c <HAL_I2C_MspInit+0x290>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001528:	4b58      	ldr	r3, [pc, #352]	; (800168c <HAL_I2C_MspInit+0x290>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153e:	2312      	movs	r3, #18
 8001540:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001550:	2304      	movs	r3, #4
 8001552:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001556:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800155a:	4619      	mov	r1, r3
 800155c:	484e      	ldr	r0, [pc, #312]	; (8001698 <HAL_I2C_MspInit+0x29c>)
 800155e:	f006 fb47 	bl	8007bf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156a:	2312      	movs	r3, #18
 800156c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800157c:	2304      	movs	r3, #4
 800157e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001586:	4619      	mov	r1, r3
 8001588:	4844      	ldr	r0, [pc, #272]	; (800169c <HAL_I2C_MspInit+0x2a0>)
 800158a:	f006 fb31 	bl	8007bf0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800158e:	4b3f      	ldr	r3, [pc, #252]	; (800168c <HAL_I2C_MspInit+0x290>)
 8001590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001594:	4a3d      	ldr	r2, [pc, #244]	; (800168c <HAL_I2C_MspInit+0x290>)
 8001596:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800159a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_I2C_MspInit+0x290>)
 80015a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 6, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2106      	movs	r1, #6
 80015b0:	2048      	movs	r0, #72	; 0x48
 80015b2:	f003 fa49 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80015b6:	2048      	movs	r0, #72	; 0x48
 80015b8:	f003 fa60 	bl	8004a7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 6, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2106      	movs	r1, #6
 80015c0:	2049      	movs	r0, #73	; 0x49
 80015c2:	f003 fa41 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80015c6:	2049      	movs	r0, #73	; 0x49
 80015c8:	f003 fa58 	bl	8004a7c <HAL_NVIC_EnableIRQ>
}
 80015cc:	e057      	b.n	800167e <HAL_I2C_MspInit+0x282>
  else if(i2cHandle->Instance==I2C4)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a33      	ldr	r2, [pc, #204]	; (80016a0 <HAL_I2C_MspInit+0x2a4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d152      	bne.n	800167e <HAL_I2C_MspInit+0x282>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015d8:	2310      	movs	r3, #16
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e6:	4618      	mov	r0, r3
 80015e8:	f008 fcd6 	bl	8009f98 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_MspInit+0x1fa>
      Error_Handler();
 80015f2:	f000 f9c9 	bl	8001988 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	4b25      	ldr	r3, [pc, #148]	; (800168c <HAL_I2C_MspInit+0x290>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fc:	4a23      	ldr	r2, [pc, #140]	; (800168c <HAL_I2C_MspInit+0x290>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <HAL_I2C_MspInit+0x290>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001614:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001618:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161c:	2312      	movs	r3, #18
 800161e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800162e:	2304      	movs	r3, #4
 8001630:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001634:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001638:	4619      	mov	r1, r3
 800163a:	481a      	ldr	r0, [pc, #104]	; (80016a4 <HAL_I2C_MspInit+0x2a8>)
 800163c:	f006 fad8 	bl	8007bf0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_I2C_MspInit+0x290>)
 8001642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001646:	4a11      	ldr	r2, [pc, #68]	; (800168c <HAL_I2C_MspInit+0x290>)
 8001648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800164c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_I2C_MspInit+0x290>)
 8001652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 6, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2106      	movs	r1, #6
 8001662:	205f      	movs	r0, #95	; 0x5f
 8001664:	f003 f9f0 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001668:	205f      	movs	r0, #95	; 0x5f
 800166a:	f003 fa07 	bl	8004a7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 6, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2106      	movs	r1, #6
 8001672:	2060      	movs	r0, #96	; 0x60
 8001674:	f003 f9e8 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001678:	2060      	movs	r0, #96	; 0x60
 800167a:	f003 f9ff 	bl	8004a7c <HAL_NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	37f8      	adds	r7, #248	; 0xf8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40005800 	.word	0x40005800
 800168c:	58024400 	.word	0x58024400
 8001690:	58021400 	.word	0x58021400
 8001694:	40005c00 	.word	0x40005c00
 8001698:	58020800 	.word	0x58020800
 800169c:	58020000 	.word	0x58020000
 80016a0:	58001c00 	.word	0x58001c00
 80016a4:	58020c00 	.word	0x58020c00

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80016ae:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <main+0x144>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11b      	bne.n	80016f2 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016ba:	f3bf 8f4f 	dsb	sy
}
 80016be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016c0:	f3bf 8f6f 	isb	sy
}
 80016c4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <main+0x144>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80016ce:	f3bf 8f4f 	dsb	sy
}
 80016d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016d4:	f3bf 8f6f 	isb	sy
}
 80016d8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80016da:	4b44      	ldr	r3, [pc, #272]	; (80017ec <main+0x144>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4a43      	ldr	r2, [pc, #268]	; (80017ec <main+0x144>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80016e6:	f3bf 8f4f 	dsb	sy
}
 80016ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016ec:	f3bf 8f6f 	isb	sy
}
 80016f0:	e000      	b.n	80016f4 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80016f2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80016f4:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <main+0x144>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d138      	bne.n	8001772 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001700:	4b3a      	ldr	r3, [pc, #232]	; (80017ec <main+0x144>)
 8001702:	2200      	movs	r2, #0
 8001704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001708:	f3bf 8f4f 	dsb	sy
}
 800170c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <main+0x144>)
 8001710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001714:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	0b5b      	lsrs	r3, r3, #13
 800171a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800171e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	08db      	lsrs	r3, r3, #3
 8001724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001728:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	015a      	lsls	r2, r3, #5
 800172e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001732:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001738:	492c      	ldr	r1, [pc, #176]	; (80017ec <main+0x144>)
 800173a:	4313      	orrs	r3, r2
 800173c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	1e5a      	subs	r2, r3, #1
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1ef      	bne.n	800172a <main+0x82>
    } while(sets-- != 0U);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1e5a      	subs	r2, r3, #1
 800174e:	60ba      	str	r2, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1e5      	bne.n	8001720 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001754:	f3bf 8f4f 	dsb	sy
}
 8001758:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <main+0x144>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a23      	ldr	r2, [pc, #140]	; (80017ec <main+0x144>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001766:	f3bf 8f4f 	dsb	sy
}
 800176a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800176c:	f3bf 8f6f 	isb	sy
}
 8001770:	e000      	b.n	8001774 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001772:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001774:	f001 fb32 	bl	8002ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001778:	f000 f83a 	bl	80017f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800177c:	f000 f8c2 	bl	8001904 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001780:	f7ff fbe8 	bl	8000f54 <MX_GPIO_Init>
  MX_DMA_Init();
 8001784:	f7ff f9b2 	bl	8000aec <MX_DMA_Init>
  MX_ADC1_Init();
 8001788:	f7fe ff2c 	bl	80005e4 <MX_ADC1_Init>
  MX_ADC3_Init();
 800178c:	f7fe ffc4 	bl	8000718 <MX_ADC3_Init>
  MX_COMP1_Init();
 8001790:	f7ff f930 	bl	80009f4 <MX_COMP1_Init>
  MX_FDCAN1_Init();
 8001794:	f7ff fa02 	bl	8000b9c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001798:	f7ff fa64 	bl	8000c64 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 800179c:	f7ff fd6c 	bl	8001278 <MX_I2C2_Init>
  MX_I2C3_Init();
 80017a0:	f7ff fdac 	bl	80012fc <MX_I2C3_Init>
  MX_I2C4_Init();
 80017a4:	f7ff fdea 	bl	800137c <MX_I2C4_Init>
  MX_SPI1_Init();
 80017a8:	f000 f942 	bl	8001a30 <MX_SPI1_Init>
  MX_SPI3_Init();
 80017ac:	f000 f996 	bl	8001adc <MX_SPI3_Init>
  MX_SPI4_Init();
 80017b0:	f000 f9ea 	bl	8001b88 <MX_SPI4_Init>
  MX_TIM3_Init();
 80017b4:	f000 fd98 	bl	80022e8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80017b8:	f001 f82e 	bl	8002818 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80017bc:	f001 f878 	bl	80028b0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80017c0:	f000 fede 	bl	8002580 <MX_TIM16_Init>
  MX_TIM7_Init();
 80017c4:	f000 fe16 	bl	80023f4 <MX_TIM7_Init>
  MX_TIM6_Init();
 80017c8:	f000 fdde 	bl	8002388 <MX_TIM6_Init>
  MX_TIM8_Init();
 80017cc:	f000 fe52 	bl	8002474 <MX_TIM8_Init>
  MX_WWDG1_Init();
 80017d0:	f001 fa96 	bl	8002d00 <MX_WWDG1_Init>
  MX_RNG_Init();
 80017d4:	f000 f8de 	bl	8001994 <MX_RNG_Init>
  MX_UART7_Init();
 80017d8:	f000 ffd2 	bl	8002780 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80017dc:	f00d fb94 	bl	800ef08 <osKernelInitialize>
  MX_FREERTOS_Init();
 80017e0:	f7ff fb9e 	bl	8000f20 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80017e4:	f00d fbb4 	bl	800ef50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <main+0x140>
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b09c      	sub	sp, #112	; 0x70
 80017f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fa:	224c      	movs	r2, #76	; 0x4c
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f00f ffdc 	bl	80117bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2220      	movs	r2, #32
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f00f ffd6 	bl	80117bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001810:	2002      	movs	r0, #2
 8001812:	f007 fbab 	bl	8008f6c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001816:	2300      	movs	r3, #0
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <SystemClock_Config+0x108>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a36      	ldr	r2, [pc, #216]	; (80018f8 <SystemClock_Config+0x108>)
 8001820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <SystemClock_Config+0x108>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	4b32      	ldr	r3, [pc, #200]	; (80018fc <SystemClock_Config+0x10c>)
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	4a31      	ldr	r2, [pc, #196]	; (80018fc <SystemClock_Config+0x10c>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800183c:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <SystemClock_Config+0x10c>)
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001848:	bf00      	nop
 800184a:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <SystemClock_Config+0x108>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001856:	d1f8      	bne.n	800184a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <SystemClock_Config+0x110>)
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	f023 0303 	bic.w	r3, r3, #3
 8001860:	4a27      	ldr	r2, [pc, #156]	; (8001900 <SystemClock_Config+0x110>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001868:	2323      	movs	r3, #35	; 0x23
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800186c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001872:	2301      	movs	r3, #1
 8001874:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001876:	2340      	movs	r3, #64	; 0x40
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800187a:	2301      	movs	r3, #1
 800187c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187e:	2302      	movs	r3, #2
 8001880:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001882:	2302      	movs	r3, #2
 8001884:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001886:	2301      	movs	r3, #1
 8001888:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800188a:	233c      	movs	r3, #60	; 0x3c
 800188c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800188e:	2302      	movs	r3, #2
 8001890:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001892:	2302      	movs	r3, #2
 8001894:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001896:	2302      	movs	r3, #2
 8001898:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800189a:	230c      	movs	r3, #12
 800189c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800189e:	2300      	movs	r3, #0
 80018a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018aa:	4618      	mov	r0, r3
 80018ac:	f007 fb98 	bl	8008fe0 <HAL_RCC_OscConfig>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80018b6:	f000 f867 	bl	8001988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ba:	233f      	movs	r3, #63	; 0x3f
 80018bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018be:	2303      	movs	r3, #3
 80018c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80018c6:	2308      	movs	r3, #8
 80018c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80018ca:	2340      	movs	r3, #64	; 0x40
 80018cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018ce:	2340      	movs	r3, #64	; 0x40
 80018d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80018d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80018d8:	2340      	movs	r3, #64	; 0x40
 80018da:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2104      	movs	r1, #4
 80018e0:	4618      	mov	r0, r3
 80018e2:	f007 ff8b 	bl	80097fc <HAL_RCC_ClockConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80018ec:	f000 f84c 	bl	8001988 <Error_Handler>
  }
}
 80018f0:	bf00      	nop
 80018f2:	3770      	adds	r7, #112	; 0x70
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	58024800 	.word	0x58024800
 80018fc:	58000400 	.word	0x58000400
 8001900:	58024400 	.word	0x58024400

08001904 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0b0      	sub	sp, #192	; 0xc0
 8001908:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	22bc      	movs	r2, #188	; 0xbc
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f00f ff53 	bl	80117bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001916:	f44f 2301 	mov.w	r3, #528384	; 0x81000
 800191a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800191c:	2301      	movs	r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001920:	2309      	movs	r3, #9
 8001922:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001924:	2302      	movs	r3, #2
 8001926:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001928:	2302      	movs	r3, #2
 800192a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001930:	23c0      	movs	r3, #192	; 0xc0
 8001932:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001934:	2320      	movs	r3, #32
 8001936:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001938:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	4618      	mov	r0, r3
 800194e:	f008 fb23 	bl	8009f98 <HAL_RCCEx_PeriphCLKConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001958:	f000 f816 	bl	8001988 <Error_Handler>
  }
}
 800195c:	bf00      	nop
 800195e:	37c0      	adds	r7, #192	; 0xc0
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001976:	f001 fa6d 	bl	8002e54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40014800 	.word	0x40014800

08001988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001990:	e7fe      	b.n	8001990 <Error_Handler+0x8>
	...

08001994 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <MX_RNG_Init+0x24>)
 800199a:	4a08      	ldr	r2, [pc, #32]	; (80019bc <MX_RNG_Init+0x28>)
 800199c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_RNG_Init+0x24>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <MX_RNG_Init+0x24>)
 80019a6:	f00a fc97 	bl	800c2d8 <HAL_RNG_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80019b0:	f7ff ffea 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	240004a4 	.word	0x240004a4
 80019bc:	48021800 	.word	0x48021800

080019c0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b0b2      	sub	sp, #200	; 0xc8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	22bc      	movs	r2, #188	; 0xbc
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00f fef3 	bl	80117bc <memset>
  if(rngHandle->Instance==RNG)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <HAL_RNG_MspInit+0x68>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d11e      	bne.n	8001a1e <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80019e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	4618      	mov	r0, r3
 80019f2:	f008 fad1 	bl	8009f98 <HAL_RCCEx_PeriphCLKConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80019fc:	f7ff ffc4 	bl	8001988 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_RNG_MspInit+0x6c>)
 8001a02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001a06:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <HAL_RNG_MspInit+0x6c>)
 8001a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a0c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_RNG_MspInit+0x6c>)
 8001a12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001a1e:	bf00      	nop
 8001a20:	37c8      	adds	r7, #200	; 0xc8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	48021800 	.word	0x48021800
 8001a2c:	58024400 	.word	0x58024400

08001a30 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a34:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a36:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <MX_SPI1_Init+0xa8>)
 8001a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a3c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a88:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001ac2:	f00a fc65 	bl	800c390 <HAL_SPI_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001acc:	f7ff ff5c 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	240004b8 	.word	0x240004b8
 8001ad8:	40013000 	.word	0x40013000

08001adc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001ae2:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <MX_SPI3_Init+0xa8>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ae6:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001ae8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001aec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001af6:	2207      	movs	r2, #7
 8001af8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b0c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b10:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001b14:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_SPI3_Init+0xa4>)
 8001b6e:	f00a fc0f 	bl	800c390 <HAL_SPI_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001b78:	f7ff ff06 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	24000540 	.word	0x24000540
 8001b84:	40003c00 	.word	0x40003c00

08001b88 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001b8e:	4a28      	ldr	r2, [pc, #160]	; (8001c30 <MX_SPI4_Init+0xa8>)
 8001b90:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001b94:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b98:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001bb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bb8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001bbc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001bc0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001be0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001c18:	4804      	ldr	r0, [pc, #16]	; (8001c2c <MX_SPI4_Init+0xa4>)
 8001c1a:	f00a fbb9 	bl	800c390 <HAL_SPI_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001c24:	f7ff feb0 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	240005c8 	.word	0x240005c8
 8001c30:	40013400 	.word	0x40013400

08001c34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b0be      	sub	sp, #248	; 0xf8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c50:	22bc      	movs	r2, #188	; 0xbc
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f00f fdb1 	bl	80117bc <memset>
  if(spiHandle->Instance==SPI1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a71      	ldr	r2, [pc, #452]	; (8001e24 <HAL_SPI_MspInit+0x1f0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d158      	bne.n	8001d16 <HAL_SPI_MspInit+0xe2>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c64:	4b70      	ldr	r3, [pc, #448]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c6a:	4a6f      	ldr	r2, [pc, #444]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c74:	4b6c      	ldr	r3, [pc, #432]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c82:	4b69      	ldr	r3, [pc, #420]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	4a67      	ldr	r2, [pc, #412]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c92:	4b65      	ldr	r3, [pc, #404]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	623b      	str	r3, [r7, #32]
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ca0:	4b61      	ldr	r3, [pc, #388]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca6:	4a60      	ldr	r2, [pc, #384]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb0:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cdc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4852      	ldr	r0, [pc, #328]	; (8001e2c <HAL_SPI_MspInit+0x1f8>)
 8001ce4:	f005 ff84 	bl	8007bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001ce8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001cec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d02:	2305      	movs	r3, #5
 8001d04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4848      	ldr	r0, [pc, #288]	; (8001e30 <HAL_SPI_MspInit+0x1fc>)
 8001d10:	f005 ff6e 	bl	8007bf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001d14:	e082      	b.n	8001e1c <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI3)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a46      	ldr	r2, [pc, #280]	; (8001e34 <HAL_SPI_MspInit+0x200>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d134      	bne.n	8001d8a <HAL_SPI_MspInit+0x156>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d20:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d26:	4a40      	ldr	r2, [pc, #256]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d30:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d44:	4a38      	ldr	r2, [pc, #224]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d76:	2306      	movs	r3, #6
 8001d78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d80:	4619      	mov	r1, r3
 8001d82:	482d      	ldr	r0, [pc, #180]	; (8001e38 <HAL_SPI_MspInit+0x204>)
 8001d84:	f005 ff34 	bl	8007bf0 <HAL_GPIO_Init>
}
 8001d88:	e048      	b.n	8001e1c <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI4)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a2b      	ldr	r2, [pc, #172]	; (8001e3c <HAL_SPI_MspInit+0x208>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d143      	bne.n	8001e1c <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8001d9a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da6:	4618      	mov	r0, r3
 8001da8:	f008 f8f6 	bl	8009f98 <HAL_RCCEx_PeriphCLKConfig>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_SPI_MspInit+0x182>
      Error_Handler();
 8001db2:	f7ff fde9 	bl	8001988 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dbc:	4a1a      	ldr	r2, [pc, #104]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001dbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001ddc:	f043 0310 	orr.w	r3, r3, #16
 8001de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_SPI_MspInit+0x1f4>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001df2:	2364      	movs	r3, #100	; 0x64
 8001df4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e14:	4619      	mov	r1, r3
 8001e16:	480a      	ldr	r0, [pc, #40]	; (8001e40 <HAL_SPI_MspInit+0x20c>)
 8001e18:	f005 feea 	bl	8007bf0 <HAL_GPIO_Init>
}
 8001e1c:	bf00      	nop
 8001e1e:	37f8      	adds	r7, #248	; 0xf8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40013000 	.word	0x40013000
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	58020c00 	.word	0x58020c00
 8001e30:	58021800 	.word	0x58021800
 8001e34:	40003c00 	.word	0x40003c00
 8001e38:	58020800 	.word	0x58020800
 8001e3c:	40013400 	.word	0x40013400
 8001e40:	58021000 	.word	0x58021000

08001e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_MspInit+0x38>)
 8001e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_MspInit+0x38>)
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_MspInit+0x38>)
 8001e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	f06f 0001 	mvn.w	r0, #1
 8001e70:	f002 fdea 	bl	8004a48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	58024400 	.word	0x58024400

08001e80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08e      	sub	sp, #56	; 0x38
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b0f      	cmp	r3, #15
 8001e8c:	d844      	bhi.n	8001f18 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	2076      	movs	r0, #118	; 0x76
 8001e94:	f002 fdd8 	bl	8004a48 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001e98:	2076      	movs	r0, #118	; 0x76
 8001e9a:	f002 fdef 	bl	8004a7c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001e9e:	4a24      	ldr	r2, [pc, #144]	; (8001f30 <HAL_InitTick+0xb0>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001ea4:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <HAL_InitTick+0xb4>)
 8001ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eaa:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <HAL_InitTick+0xb4>)
 8001eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <HAL_InitTick+0xb4>)
 8001eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ec2:	f107 020c 	add.w	r2, r7, #12
 8001ec6:	f107 0310 	add.w	r3, r7, #16
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f008 f821 	bl	8009f14 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ed2:	f008 f809 	bl	8009ee8 <HAL_RCC_GetPCLK2Freq>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <HAL_InitTick+0xb8>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	0c9b      	lsrs	r3, r3, #18
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_InitTick+0xbc>)
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <HAL_InitTick+0xc0>)
 8001eee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_InitTick+0xbc>)
 8001ef2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ef6:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001ef8:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <HAL_InitTick+0xbc>)
 8001efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efc:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <HAL_InitTick+0xbc>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f04:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_InitTick+0xbc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001f0a:	480c      	ldr	r0, [pc, #48]	; (8001f3c <HAL_InitTick+0xbc>)
 8001f0c:	f00a fb5d 	bl	800c5ca <HAL_TIM_Base_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d107      	bne.n	8001f26 <HAL_InitTick+0xa6>
 8001f16:	e001      	b.n	8001f1c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e005      	b.n	8001f28 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001f1c:	4807      	ldr	r0, [pc, #28]	; (8001f3c <HAL_InitTick+0xbc>)
 8001f1e:	f00a fbab 	bl	800c678 <HAL_TIM_Base_Start_IT>
 8001f22:	4603      	mov	r3, r0
 8001f24:	e000      	b.n	8001f28 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3738      	adds	r7, #56	; 0x38
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	24000008 	.word	0x24000008
 8001f34:	58024400 	.word	0x58024400
 8001f38:	431bde83 	.word	0x431bde83
 8001f3c:	24000650 	.word	0x24000650
 8001f40:	40014800 	.word	0x40014800

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <NMI_Handler+0x4>

08001f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <HardFault_Handler+0x4>

08001f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <MemManage_Handler+0x4>

08001f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <BusFault_Handler+0x4>

08001f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <UsageFault_Handler+0x4>

08001f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001f74:	2004      	movs	r0, #4
 8001f76:	f006 f804 	bl	8007f82 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001f82:	2008      	movs	r0, #8
 8001f84:	f005 fffd 	bl	8007f82 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001f90:	2010      	movs	r0, #16
 8001f92:	f005 fff6 	bl	8007f82 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <DMA1_Stream0_IRQHandler+0x10>)
 8001fa2:	f003 fe39 	bl	8005c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2400015c 	.word	0x2400015c

08001fb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <DMA1_Stream1_IRQHandler+0x10>)
 8001fb6:	f003 fe2f 	bl	8005c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	240001d4 	.word	0x240001d4

08001fc4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA1_Stream2_IRQHandler+0x10>)
 8001fca:	f003 fe25 	bl	8005c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	240009c8 	.word	0x240009c8

08001fd8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <DMA1_Stream3_IRQHandler+0x10>)
 8001fde:	f003 fe1b 	bl	8005c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	24000a40 	.word	0x24000a40

08001fec <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <FDCAN1_IT0_IRQHandler+0x10>)
 8001ff2:	f005 f963 	bl	80072bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	24000278 	.word	0x24000278

08002000 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <FDCAN2_IT0_IRQHandler+0x10>)
 8002006:	f005 f959 	bl	80072bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	24000318 	.word	0x24000318

08002014 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002018:	2020      	movs	r0, #32
 800201a:	f005 ffb2 	bl	8007f82 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800201e:	2040      	movs	r0, #64	; 0x40
 8002020:	f005 ffaf 	bl	8007f82 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002024:	2080      	movs	r0, #128	; 0x80
 8002026:	f005 ffac 	bl	8007f82 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800202a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800202e:	f005 ffa8 	bl	8007f82 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <I2C2_EV_IRQHandler+0x10>)
 800203e:	f006 f855 	bl	80080ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	240003c0 	.word	0x240003c0

0800204c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <I2C2_ER_IRQHandler+0x10>)
 8002052:	f006 f865 	bl	8008120 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	240003c0 	.word	0x240003c0

08002060 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <USART1_IRQHandler+0x10>)
 8002066:	f00b fb77 	bl	800d758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	240008a8 	.word	0x240008a8

08002074 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <USART2_IRQHandler+0x10>)
 800207a:	f00b fb6d 	bl	800d758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	24000938 	.word	0x24000938

08002088 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800208c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002090:	f005 ff77 	bl	8007f82 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002094:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002098:	f005 ff73 	bl	8007f82 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800209c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020a0:	f005 ff6f 	bl	8007f82 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80020a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020a8:	f005 ff6b 	bl	8007f82 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80020ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020b0:	f005 ff67 	bl	8007f82 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <TIM8_CC_IRQHandler+0x10>)
 80020be:	f00a fbfc 	bl	800c8ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	24000780 	.word	0x24000780

080020cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <TIM6_DAC_IRQHandler+0x10>)
 80020d2:	f00a fbf2 	bl	800c8ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	240006e8 	.word	0x240006e8

080020e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <TIM7_IRQHandler+0x10>)
 80020e6:	f00a fbe8 	bl	800c8ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	24000734 	.word	0x24000734

080020f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <DMA2_Stream0_IRQHandler+0x10>)
 80020fa:	f003 fd8d 	bl	8005c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	24000ab8 	.word	0x24000ab8

08002108 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <DMA2_Stream1_IRQHandler+0x10>)
 800210e:	f003 fd83 	bl	8005c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	24000b30 	.word	0x24000b30

0800211c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <I2C3_EV_IRQHandler+0x10>)
 8002122:	f005 ffe3 	bl	80080ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2400040c 	.word	0x2400040c

08002130 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <I2C3_ER_IRQHandler+0x10>)
 8002136:	f005 fff3 	bl	8008120 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2400040c 	.word	0x2400040c

08002144 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <UART7_IRQHandler+0x10>)
 800214a:	f00b fb05 	bl	800d758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	24000818 	.word	0x24000818

08002158 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <I2C4_EV_IRQHandler+0x10>)
 800215e:	f005 ffc5 	bl	80080ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	24000458 	.word	0x24000458

0800216c <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <I2C4_ER_IRQHandler+0x10>)
 8002172:	f005 ffd5 	bl	8008120 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	24000458 	.word	0x24000458

08002180 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <TIM16_IRQHandler+0x10>)
 8002186:	f00a fb98 	bl	800c8ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	240007cc 	.word	0x240007cc

08002194 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <TIM17_IRQHandler+0x10>)
 800219a:	f00a fb8e 	bl	800c8ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	24000650 	.word	0x24000650

080021a8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <ADC3_IRQHandler+0x10>)
 80021ae:	f001 fa03 	bl	80035b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	240000f8 	.word	0x240000f8

080021bc <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <COMP1_IRQHandler+0x10>)
 80021c2:	f002 fb0b 	bl	80047dc <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2400024c 	.word	0x2400024c

080021d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <SystemInit+0xec>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	4a38      	ldr	r2, [pc, #224]	; (80022bc <SystemInit+0xec>)
 80021dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <SystemInit+0xf0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	2b06      	cmp	r3, #6
 80021ee:	d807      	bhi.n	8002200 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021f0:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <SystemInit+0xf0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 030f 	bic.w	r3, r3, #15
 80021f8:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <SystemInit+0xf0>)
 80021fa:	f043 0307 	orr.w	r3, r3, #7
 80021fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <SystemInit+0xf4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a2f      	ldr	r2, [pc, #188]	; (80022c4 <SystemInit+0xf4>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <SystemInit+0xf4>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <SystemInit+0xf4>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	492b      	ldr	r1, [pc, #172]	; (80022c4 <SystemInit+0xf4>)
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <SystemInit+0xf8>)
 800221a:	4013      	ands	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800221e:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <SystemInit+0xf0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <SystemInit+0xf0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 030f 	bic.w	r3, r3, #15
 8002232:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <SystemInit+0xf0>)
 8002234:	f043 0307 	orr.w	r3, r3, #7
 8002238:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <SystemInit+0xf4>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <SystemInit+0xf4>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <SystemInit+0xf4>)
 8002248:	2200      	movs	r2, #0
 800224a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <SystemInit+0xf4>)
 800224e:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <SystemInit+0xfc>)
 8002250:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002252:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <SystemInit+0xf4>)
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <SystemInit+0x100>)
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <SystemInit+0xf4>)
 800225a:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <SystemInit+0x104>)
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <SystemInit+0xf4>)
 8002260:	2200      	movs	r2, #0
 8002262:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <SystemInit+0xf4>)
 8002266:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <SystemInit+0x104>)
 8002268:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <SystemInit+0xf4>)
 800226c:	2200      	movs	r2, #0
 800226e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <SystemInit+0xf4>)
 8002272:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <SystemInit+0x104>)
 8002274:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <SystemInit+0xf4>)
 8002278:	2200      	movs	r2, #0
 800227a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <SystemInit+0xf4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <SystemInit+0xf4>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <SystemInit+0xf4>)
 800228a:	2200      	movs	r2, #0
 800228c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <SystemInit+0x108>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <SystemInit+0x10c>)
 8002294:	4013      	ands	r3, r2
 8002296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800229a:	d202      	bcs.n	80022a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <SystemInit+0x110>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <SystemInit+0x114>)
 80022a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SystemInit+0xec>)
 80022ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022b0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00
 80022c0:	52002000 	.word	0x52002000
 80022c4:	58024400 	.word	0x58024400
 80022c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80022cc:	02020200 	.word	0x02020200
 80022d0:	01ff0000 	.word	0x01ff0000
 80022d4:	01010280 	.word	0x01010280
 80022d8:	5c001000 	.word	0x5c001000
 80022dc:	ffff0000 	.word	0xffff0000
 80022e0:	51008108 	.word	0x51008108
 80022e4:	52004000 	.word	0x52004000

080022e8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ee:	f107 0310 	add.w	r3, r7, #16
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <MX_TIM3_Init+0x98>)
 8002308:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <MX_TIM3_Init+0x9c>)
 800230a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20000;
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <MX_TIM3_Init+0x98>)
 800230e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002312:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <MX_TIM3_Init+0x98>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1249;
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <MX_TIM3_Init+0x98>)
 800231c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002320:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <MX_TIM3_Init+0x98>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <MX_TIM3_Init+0x98>)
 800232a:	2200      	movs	r2, #0
 800232c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800232e:	4814      	ldr	r0, [pc, #80]	; (8002380 <MX_TIM3_Init+0x98>)
 8002330:	f00a f94b 	bl	800c5ca <HAL_TIM_Base_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800233a:	f7ff fb25 	bl	8001988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800233e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002342:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	4619      	mov	r1, r3
 800234a:	480d      	ldr	r0, [pc, #52]	; (8002380 <MX_TIM3_Init+0x98>)
 800234c:	f00a fc68 	bl	800cc20 <HAL_TIM_ConfigClockSource>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002356:	f7ff fb17 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	4619      	mov	r1, r3
 8002366:	4806      	ldr	r0, [pc, #24]	; (8002380 <MX_TIM3_Init+0x98>)
 8002368:	f00b f900 	bl	800d56c <HAL_TIMEx_MasterConfigSynchronization>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002372:	f7ff fb09 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002376:	bf00      	nop
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2400069c 	.word	0x2400069c
 8002384:	40000400 	.word	0x40000400

08002388 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <MX_TIM6_Init+0x64>)
 800239a:	4a15      	ldr	r2, [pc, #84]	; (80023f0 <MX_TIM6_Init+0x68>)
 800239c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20000;
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <MX_TIM6_Init+0x64>)
 80023a0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80023a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <MX_TIM6_Init+0x64>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <MX_TIM6_Init+0x64>)
 80023ae:	2295      	movs	r2, #149	; 0x95
 80023b0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_TIM6_Init+0x64>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023b8:	480c      	ldr	r0, [pc, #48]	; (80023ec <MX_TIM6_Init+0x64>)
 80023ba:	f00a f906 	bl	800c5ca <HAL_TIM_Base_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80023c4:	f7ff fae0 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_TIM6_Init+0x64>)
 80023d6:	f00b f8c9 	bl	800d56c <HAL_TIMEx_MasterConfigSynchronization>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80023e0:	f7ff fad2 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	240006e8 	.word	0x240006e8
 80023f0:	40001000 	.word	0x40001000

080023f4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <MX_TIM7_Init+0x78>)
 8002406:	4a1a      	ldr	r2, [pc, #104]	; (8002470 <MX_TIM7_Init+0x7c>)
 8002408:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20000;
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <MX_TIM7_Init+0x78>)
 800240c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002410:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <MX_TIM7_Init+0x78>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 149;
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <MX_TIM7_Init+0x78>)
 800241a:	2295      	movs	r2, #149	; 0x95
 800241c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <MX_TIM7_Init+0x78>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002424:	4811      	ldr	r0, [pc, #68]	; (800246c <MX_TIM7_Init+0x78>)
 8002426:	f00a f8d0 	bl	800c5ca <HAL_TIM_Base_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002430:	f7ff faaa 	bl	8001988 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8002434:	2108      	movs	r1, #8
 8002436:	480d      	ldr	r0, [pc, #52]	; (800246c <MX_TIM7_Init+0x78>)
 8002438:	f00a f9e5 	bl	800c806 <HAL_TIM_OnePulse_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 8002442:	f7ff faa1 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	4619      	mov	r1, r3
 8002452:	4806      	ldr	r0, [pc, #24]	; (800246c <MX_TIM7_Init+0x78>)
 8002454:	f00b f88a 	bl	800d56c <HAL_TIMEx_MasterConfigSynchronization>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 800245e:	f7ff fa93 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	24000734 	.word	0x24000734
 8002470:	40001400 	.word	0x40001400

08002474 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08c      	sub	sp, #48	; 0x30
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
 8002488:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002498:	463b      	mov	r3, r7
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80024a2:	4b35      	ldr	r3, [pc, #212]	; (8002578 <MX_TIM8_Init+0x104>)
 80024a4:	4a35      	ldr	r2, [pc, #212]	; (800257c <MX_TIM8_Init+0x108>)
 80024a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4;
 80024a8:	4b33      	ldr	r3, [pc, #204]	; (8002578 <MX_TIM8_Init+0x104>)
 80024aa:	2204      	movs	r2, #4
 80024ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ae:	4b32      	ldr	r3, [pc, #200]	; (8002578 <MX_TIM8_Init+0x104>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80024b4:	4b30      	ldr	r3, [pc, #192]	; (8002578 <MX_TIM8_Init+0x104>)
 80024b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024bc:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <MX_TIM8_Init+0x104>)
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <MX_TIM8_Init+0x104>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c8:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <MX_TIM8_Init+0x104>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80024ce:	482a      	ldr	r0, [pc, #168]	; (8002578 <MX_TIM8_Init+0x104>)
 80024d0:	f00a f942 	bl	800c758 <HAL_TIM_IC_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 80024da:	f7ff fa55 	bl	8001988 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80024de:	2304      	movs	r3, #4
 80024e0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80024e2:	2350      	movs	r3, #80	; 0x50
 80024e4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80024e6:	2302      	movs	r3, #2
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80024f2:	f107 031c 	add.w	r3, r7, #28
 80024f6:	4619      	mov	r1, r3
 80024f8:	481f      	ldr	r0, [pc, #124]	; (8002578 <MX_TIM8_Init+0x104>)
 80024fa:	f00a fc85 	bl	800ce08 <HAL_TIM_SlaveConfigSynchro>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002504:	f7ff fa40 	bl	8001988 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002508:	2302      	movs	r3, #2
 800250a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800250c:	2301      	movs	r3, #1
 800250e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	2200      	movs	r2, #0
 800251e:	4619      	mov	r1, r3
 8002520:	4815      	ldr	r0, [pc, #84]	; (8002578 <MX_TIM8_Init+0x104>)
 8002522:	f00a fae9 	bl	800caf8 <HAL_TIM_IC_ConfigChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 800252c:	f7ff fa2c 	bl	8001988 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002534:	2302      	movs	r3, #2
 8002536:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	2204      	movs	r2, #4
 800253e:	4619      	mov	r1, r3
 8002540:	480d      	ldr	r0, [pc, #52]	; (8002578 <MX_TIM8_Init+0x104>)
 8002542:	f00a fad9 	bl	800caf8 <HAL_TIM_IC_ConfigChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 800254c:	f7ff fa1c 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002550:	2300      	movs	r3, #0
 8002552:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002554:	2300      	movs	r3, #0
 8002556:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800255c:	463b      	mov	r3, r7
 800255e:	4619      	mov	r1, r3
 8002560:	4805      	ldr	r0, [pc, #20]	; (8002578 <MX_TIM8_Init+0x104>)
 8002562:	f00b f803 	bl	800d56c <HAL_TIMEx_MasterConfigSynchronization>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 800256c:	f7ff fa0c 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002570:	bf00      	nop
 8002572:	3730      	adds	r7, #48	; 0x30
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	24000780 	.word	0x24000780
 800257c:	40010400 	.word	0x40010400

08002580 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <MX_TIM16_Init+0x58>)
 8002586:	4a15      	ldr	r2, [pc, #84]	; (80025dc <MX_TIM16_Init+0x5c>)
 8002588:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 19999;
 800258a:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <MX_TIM16_Init+0x58>)
 800258c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002590:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <MX_TIM16_Init+0x58>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 749;
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <MX_TIM16_Init+0x58>)
 800259a:	f240 22ed 	movw	r2, #749	; 0x2ed
 800259e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a0:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <MX_TIM16_Init+0x58>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <MX_TIM16_Init+0x58>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ac:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <MX_TIM16_Init+0x58>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80025b2:	4809      	ldr	r0, [pc, #36]	; (80025d8 <MX_TIM16_Init+0x58>)
 80025b4:	f00a f809 	bl	800c5ca <HAL_TIM_Base_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80025be:	f7ff f9e3 	bl	8001988 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80025c2:	2108      	movs	r1, #8
 80025c4:	4804      	ldr	r0, [pc, #16]	; (80025d8 <MX_TIM16_Init+0x58>)
 80025c6:	f00a f91e 	bl	800c806 <HAL_TIM_OnePulse_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM16_Init+0x54>
  {
    Error_Handler();
 80025d0:	f7ff f9da 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	240007cc 	.word	0x240007cc
 80025dc:	40014400 	.word	0x40014400

080025e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a36      	ldr	r2, [pc, #216]	; (80026c8 <HAL_TIM_Base_MspInit+0xe8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10f      	bne.n	8002612 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025f2:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_TIM_Base_MspInit+0xec>)
 80025f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025f8:	4a34      	ldr	r2, [pc, #208]	; (80026cc <HAL_TIM_Base_MspInit+0xec>)
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002602:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HAL_TIM_Base_MspInit+0xec>)
 8002604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002610:	e055      	b.n	80026be <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM6)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2e      	ldr	r2, [pc, #184]	; (80026d0 <HAL_TIM_Base_MspInit+0xf0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d117      	bne.n	800264c <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_TIM_Base_MspInit+0xec>)
 800261e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002622:	4a2a      	ldr	r2, [pc, #168]	; (80026cc <HAL_TIM_Base_MspInit+0xec>)
 8002624:	f043 0310 	orr.w	r3, r3, #16
 8002628:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_TIM_Base_MspInit+0xec>)
 800262e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2106      	movs	r1, #6
 800263e:	2036      	movs	r0, #54	; 0x36
 8002640:	f002 fa02 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002644:	2036      	movs	r0, #54	; 0x36
 8002646:	f002 fa19 	bl	8004a7c <HAL_NVIC_EnableIRQ>
}
 800264a:	e038      	b.n	80026be <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM7)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <HAL_TIM_Base_MspInit+0xf4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d117      	bne.n	8002686 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_TIM_Base_MspInit+0xec>)
 8002658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800265c:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <HAL_TIM_Base_MspInit+0xec>)
 800265e:	f043 0320 	orr.w	r3, r3, #32
 8002662:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_TIM_Base_MspInit+0xec>)
 8002668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 6, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2106      	movs	r1, #6
 8002678:	2037      	movs	r0, #55	; 0x37
 800267a:	f002 f9e5 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800267e:	2037      	movs	r0, #55	; 0x37
 8002680:	f002 f9fc 	bl	8004a7c <HAL_NVIC_EnableIRQ>
}
 8002684:	e01b      	b.n	80026be <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM16)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <HAL_TIM_Base_MspInit+0xf8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d116      	bne.n	80026be <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_TIM_Base_MspInit+0xec>)
 8002692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002696:	4a0d      	ldr	r2, [pc, #52]	; (80026cc <HAL_TIM_Base_MspInit+0xec>)
 8002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_TIM_Base_MspInit+0xec>)
 80026a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 6, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2106      	movs	r1, #6
 80026b2:	2075      	movs	r0, #117	; 0x75
 80026b4:	f002 f9c8 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80026b8:	2075      	movs	r0, #117	; 0x75
 80026ba:	f002 f9df 	bl	8004a7c <HAL_NVIC_EnableIRQ>
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40000400 	.word	0x40000400
 80026cc:	58024400 	.word	0x58024400
 80026d0:	40001000 	.word	0x40001000
 80026d4:	40001400 	.word	0x40001400
 80026d8:	40014400 	.word	0x40014400

080026dc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM8)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1e      	ldr	r2, [pc, #120]	; (8002774 <HAL_TIM_IC_MspInit+0x98>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d135      	bne.n	800276a <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026fe:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <HAL_TIM_IC_MspInit+0x9c>)
 8002700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002704:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <HAL_TIM_IC_MspInit+0x9c>)
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <HAL_TIM_IC_MspInit+0x9c>)
 8002710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <HAL_TIM_IC_MspInit+0x9c>)
 800271e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002722:	4a15      	ldr	r2, [pc, #84]	; (8002778 <HAL_TIM_IC_MspInit+0x9c>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_TIM_IC_MspInit+0x9c>)
 800272e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800273a:	2340      	movs	r3, #64	; 0x40
 800273c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800274a:	2303      	movs	r3, #3
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	4809      	ldr	r0, [pc, #36]	; (800277c <HAL_TIM_IC_MspInit+0xa0>)
 8002756:	f005 fa4b 	bl	8007bf0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 6, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2106      	movs	r1, #6
 800275e:	202e      	movs	r0, #46	; 0x2e
 8002760:	f002 f972 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002764:	202e      	movs	r0, #46	; 0x2e
 8002766:	f002 f989 	bl	8004a7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800276a:	bf00      	nop
 800276c:	3728      	adds	r7, #40	; 0x28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40010400 	.word	0x40010400
 8002778:	58024400 	.word	0x58024400
 800277c:	58020800 	.word	0x58020800

08002780 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart2_tx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002784:	4b22      	ldr	r3, [pc, #136]	; (8002810 <MX_UART7_Init+0x90>)
 8002786:	4a23      	ldr	r2, [pc, #140]	; (8002814 <MX_UART7_Init+0x94>)
 8002788:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800278a:	4b21      	ldr	r3, [pc, #132]	; (8002810 <MX_UART7_Init+0x90>)
 800278c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002790:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002792:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <MX_UART7_Init+0x90>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002798:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <MX_UART7_Init+0x90>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <MX_UART7_Init+0x90>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80027a4:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <MX_UART7_Init+0x90>)
 80027a6:	220c      	movs	r2, #12
 80027a8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <MX_UART7_Init+0x90>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <MX_UART7_Init+0x90>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <MX_UART7_Init+0x90>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <MX_UART7_Init+0x90>)
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <MX_UART7_Init+0x90>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80027c8:	4811      	ldr	r0, [pc, #68]	; (8002810 <MX_UART7_Init+0x90>)
 80027ca:	f00a ff75 	bl	800d6b8 <HAL_UART_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80027d4:	f7ff f8d8 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027d8:	2100      	movs	r1, #0
 80027da:	480d      	ldr	r0, [pc, #52]	; (8002810 <MX_UART7_Init+0x90>)
 80027dc:	f00c fa62 	bl	800eca4 <HAL_UARTEx_SetTxFifoThreshold>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80027e6:	f7ff f8cf 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027ea:	2100      	movs	r1, #0
 80027ec:	4808      	ldr	r0, [pc, #32]	; (8002810 <MX_UART7_Init+0x90>)
 80027ee:	f00c fa97 	bl	800ed20 <HAL_UARTEx_SetRxFifoThreshold>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80027f8:	f7ff f8c6 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80027fc:	4804      	ldr	r0, [pc, #16]	; (8002810 <MX_UART7_Init+0x90>)
 80027fe:	f00c fa18 	bl	800ec32 <HAL_UARTEx_DisableFifoMode>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8002808:	f7ff f8be 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	24000818 	.word	0x24000818
 8002814:	40007800 	.word	0x40007800

08002818 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 800281e:	4a23      	ldr	r2, [pc, #140]	; (80028ac <MX_USART1_UART_Init+0x94>)
 8002820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8002822:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 8002824:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800282a:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002830:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002836:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800283c:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 800283e:	220c      	movs	r2, #12
 8002840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002842:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002848:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 8002856:	2200      	movs	r2, #0
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 800285c:	2200      	movs	r2, #0
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002860:	4811      	ldr	r0, [pc, #68]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 8002862:	f00a ff29 	bl	800d6b8 <HAL_UART_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800286c:	f7ff f88c 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002870:	2100      	movs	r1, #0
 8002872:	480d      	ldr	r0, [pc, #52]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 8002874:	f00c fa16 	bl	800eca4 <HAL_UARTEx_SetTxFifoThreshold>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800287e:	f7ff f883 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002882:	2100      	movs	r1, #0
 8002884:	4808      	ldr	r0, [pc, #32]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 8002886:	f00c fa4b 	bl	800ed20 <HAL_UARTEx_SetRxFifoThreshold>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002890:	f7ff f87a 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002894:	4804      	ldr	r0, [pc, #16]	; (80028a8 <MX_USART1_UART_Init+0x90>)
 8002896:	f00c f9cc 	bl	800ec32 <HAL_UARTEx_DisableFifoMode>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80028a0:	f7ff f872 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	240008a8 	.word	0x240008a8
 80028ac:	40011000 	.word	0x40011000

080028b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028b4:	4b22      	ldr	r3, [pc, #136]	; (8002940 <MX_USART2_UART_Init+0x90>)
 80028b6:	4a23      	ldr	r2, [pc, #140]	; (8002944 <MX_USART2_UART_Init+0x94>)
 80028b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028ba:	4b21      	ldr	r3, [pc, #132]	; (8002940 <MX_USART2_UART_Init+0x90>)
 80028bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028c2:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <MX_USART2_UART_Init+0x90>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <MX_USART2_UART_Init+0x90>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <MX_USART2_UART_Init+0x90>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <MX_USART2_UART_Init+0x90>)
 80028d6:	220c      	movs	r2, #12
 80028d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028da:	4b19      	ldr	r3, [pc, #100]	; (8002940 <MX_USART2_UART_Init+0x90>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e0:	4b17      	ldr	r3, [pc, #92]	; (8002940 <MX_USART2_UART_Init+0x90>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028e6:	4b16      	ldr	r3, [pc, #88]	; (8002940 <MX_USART2_UART_Init+0x90>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <MX_USART2_UART_Init+0x90>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <MX_USART2_UART_Init+0x90>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028f8:	4811      	ldr	r0, [pc, #68]	; (8002940 <MX_USART2_UART_Init+0x90>)
 80028fa:	f00a fedd 	bl	800d6b8 <HAL_UART_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002904:	f7ff f840 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002908:	2100      	movs	r1, #0
 800290a:	480d      	ldr	r0, [pc, #52]	; (8002940 <MX_USART2_UART_Init+0x90>)
 800290c:	f00c f9ca 	bl	800eca4 <HAL_UARTEx_SetTxFifoThreshold>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002916:	f7ff f837 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800291a:	2100      	movs	r1, #0
 800291c:	4808      	ldr	r0, [pc, #32]	; (8002940 <MX_USART2_UART_Init+0x90>)
 800291e:	f00c f9ff 	bl	800ed20 <HAL_UARTEx_SetRxFifoThreshold>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002928:	f7ff f82e 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800292c:	4804      	ldr	r0, [pc, #16]	; (8002940 <MX_USART2_UART_Init+0x90>)
 800292e:	f00c f945 	bl	800ebbc <HAL_UARTEx_EnableFifoMode>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002938:	f7ff f826 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	24000938 	.word	0x24000938
 8002944:	40004400 	.word	0x40004400

08002948 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b0bc      	sub	sp, #240	; 0xf0
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002960:	f107 0320 	add.w	r3, r7, #32
 8002964:	22bc      	movs	r2, #188	; 0xbc
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f00e ff27 	bl	80117bc <memset>
  if(uartHandle->Instance==UART7)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7d      	ldr	r2, [pc, #500]	; (8002b68 <HAL_UART_MspInit+0x220>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d14a      	bne.n	8002a0e <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002978:	2302      	movs	r3, #2
 800297a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800297c:	2300      	movs	r3, #0
 800297e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002982:	f107 0320 	add.w	r3, r7, #32
 8002986:	4618      	mov	r0, r3
 8002988:	f007 fb06 	bl	8009f98 <HAL_RCCEx_PeriphCLKConfig>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002992:	f7fe fff9 	bl	8001988 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002996:	4b75      	ldr	r3, [pc, #468]	; (8002b6c <HAL_UART_MspInit+0x224>)
 8002998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800299c:	4a73      	ldr	r2, [pc, #460]	; (8002b6c <HAL_UART_MspInit+0x224>)
 800299e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029a6:	4b71      	ldr	r3, [pc, #452]	; (8002b6c <HAL_UART_MspInit+0x224>)
 80029a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b4:	4b6d      	ldr	r3, [pc, #436]	; (8002b6c <HAL_UART_MspInit+0x224>)
 80029b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ba:	4a6c      	ldr	r2, [pc, #432]	; (8002b6c <HAL_UART_MspInit+0x224>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c4:	4b69      	ldr	r3, [pc, #420]	; (8002b6c <HAL_UART_MspInit+0x224>)
 80029c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	69bb      	ldr	r3, [r7, #24]
    /**UART7 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> UART7_RX
    PB4 (NJTRST)     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80029d2:	2318      	movs	r3, #24
 80029d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 80029ea:	230b      	movs	r3, #11
 80029ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029f4:	4619      	mov	r1, r3
 80029f6:	485e      	ldr	r0, [pc, #376]	; (8002b70 <HAL_UART_MspInit+0x228>)
 80029f8:	f005 f8fa 	bl	8007bf0 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80029fc:	2200      	movs	r2, #0
 80029fe:	2105      	movs	r1, #5
 8002a00:	2052      	movs	r0, #82	; 0x52
 8002a02:	f002 f821 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002a06:	2052      	movs	r0, #82	; 0x52
 8002a08:	f002 f838 	bl	8004a7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a0c:	e166      	b.n	8002cdc <HAL_UART_MspInit+0x394>
  else if(uartHandle->Instance==USART1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_UART_MspInit+0x22c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	f040 80b7 	bne.w	8002b88 <HAL_UART_MspInit+0x240>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a24:	f107 0320 	add.w	r3, r7, #32
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f007 fab5 	bl	8009f98 <HAL_RCCEx_PeriphCLKConfig>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002a34:	f7fe ffa8 	bl	8001988 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a38:	4b4c      	ldr	r3, [pc, #304]	; (8002b6c <HAL_UART_MspInit+0x224>)
 8002a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a3e:	4a4b      	ldr	r2, [pc, #300]	; (8002b6c <HAL_UART_MspInit+0x224>)
 8002a40:	f043 0310 	orr.w	r3, r3, #16
 8002a44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a48:	4b48      	ldr	r3, [pc, #288]	; (8002b6c <HAL_UART_MspInit+0x224>)
 8002a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a56:	4b45      	ldr	r3, [pc, #276]	; (8002b6c <HAL_UART_MspInit+0x224>)
 8002a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a5c:	4a43      	ldr	r2, [pc, #268]	; (8002b6c <HAL_UART_MspInit+0x224>)
 8002a5e:	f043 0302 	orr.w	r3, r3, #2
 8002a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a66:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_UART_MspInit+0x224>)
 8002a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002a74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002a8e:	2304      	movs	r3, #4
 8002a90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4835      	ldr	r0, [pc, #212]	; (8002b70 <HAL_UART_MspInit+0x228>)
 8002a9c:	f005 f8a8 	bl	8007bf0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8002aa0:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002aa2:	4a36      	ldr	r2, [pc, #216]	; (8002b7c <HAL_UART_MspInit+0x234>)
 8002aa4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002aa6:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002aa8:	222a      	movs	r2, #42	; 0x2a
 8002aaa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aac:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002aae:	2240      	movs	r2, #64	; 0x40
 8002ab0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab2:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab8:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002abe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac6:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002acc:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ade:	4826      	ldr	r0, [pc, #152]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002ae0:	f001 ffda 	bl	8004a98 <HAL_DMA_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8002aea:	f7fe ff4d 	bl	8001988 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a21      	ldr	r2, [pc, #132]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002af2:	679a      	str	r2, [r3, #120]	; 0x78
 8002af4:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <HAL_UART_MspInit+0x230>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8002afa:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002afc:	4a21      	ldr	r2, [pc, #132]	; (8002b84 <HAL_UART_MspInit+0x23c>)
 8002afe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002b00:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002b02:	2229      	movs	r2, #41	; 0x29
 8002b04:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b06:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b18:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002b26:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b38:	4811      	ldr	r0, [pc, #68]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002b3a:	f001 ffad 	bl	8004a98 <HAL_DMA_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_UART_MspInit+0x200>
      Error_Handler();
 8002b44:	f7fe ff20 	bl	8001988 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002b4c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b4e:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <HAL_UART_MspInit+0x238>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2105      	movs	r1, #5
 8002b58:	2025      	movs	r0, #37	; 0x25
 8002b5a:	f001 ff75 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b5e:	2025      	movs	r0, #37	; 0x25
 8002b60:	f001 ff8c 	bl	8004a7c <HAL_NVIC_EnableIRQ>
}
 8002b64:	e0ba      	b.n	8002cdc <HAL_UART_MspInit+0x394>
 8002b66:	bf00      	nop
 8002b68:	40007800 	.word	0x40007800
 8002b6c:	58024400 	.word	0x58024400
 8002b70:	58020400 	.word	0x58020400
 8002b74:	40011000 	.word	0x40011000
 8002b78:	240009c8 	.word	0x240009c8
 8002b7c:	40020040 	.word	0x40020040
 8002b80:	24000a40 	.word	0x24000a40
 8002b84:	40020058 	.word	0x40020058
  else if(uartHandle->Instance==USART2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a55      	ldr	r2, [pc, #340]	; (8002ce4 <HAL_UART_MspInit+0x39c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	f040 80a4 	bne.w	8002cdc <HAL_UART_MspInit+0x394>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b94:	2302      	movs	r3, #2
 8002b96:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b9e:	f107 0320 	add.w	r3, r7, #32
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f007 f9f8 	bl	8009f98 <HAL_RCCEx_PeriphCLKConfig>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8002bae:	f7fe feeb 	bl	8001988 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bb2:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <HAL_UART_MspInit+0x3a0>)
 8002bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bb8:	4a4b      	ldr	r2, [pc, #300]	; (8002ce8 <HAL_UART_MspInit+0x3a0>)
 8002bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bc2:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <HAL_UART_MspInit+0x3a0>)
 8002bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd0:	4b45      	ldr	r3, [pc, #276]	; (8002ce8 <HAL_UART_MspInit+0x3a0>)
 8002bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd6:	4a44      	ldr	r2, [pc, #272]	; (8002ce8 <HAL_UART_MspInit+0x3a0>)
 8002bd8:	f043 0308 	orr.w	r3, r3, #8
 8002bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002be0:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_UART_MspInit+0x3a0>)
 8002be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002bee:	2360      	movs	r3, #96	; 0x60
 8002bf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c06:	2307      	movs	r3, #7
 8002c08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c0c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c10:	4619      	mov	r1, r3
 8002c12:	4836      	ldr	r0, [pc, #216]	; (8002cec <HAL_UART_MspInit+0x3a4>)
 8002c14:	f004 ffec 	bl	8007bf0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA2_Stream0;
 8002c18:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c1a:	4a36      	ldr	r2, [pc, #216]	; (8002cf4 <HAL_UART_MspInit+0x3ac>)
 8002c1c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002c1e:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c20:	222c      	movs	r2, #44	; 0x2c
 8002c22:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c24:	4b32      	ldr	r3, [pc, #200]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c26:	2240      	movs	r2, #64	; 0x40
 8002c28:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c2a:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c30:	4b2f      	ldr	r3, [pc, #188]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c36:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c3e:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002c44:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c4a:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c50:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002c56:	4826      	ldr	r0, [pc, #152]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c58:	f001 ff1e 	bl	8004a98 <HAL_DMA_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_UART_MspInit+0x31e>
      Error_Handler();
 8002c62:	f7fe fe91 	bl	8001988 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a21      	ldr	r2, [pc, #132]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c6a:	679a      	str	r2, [r3, #120]	; 0x78
 8002c6c:	4a20      	ldr	r2, [pc, #128]	; (8002cf0 <HAL_UART_MspInit+0x3a8>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <HAL_UART_MspInit+0x3b4>)
 8002c76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002c7a:	222b      	movs	r2, #43	; 0x2b
 8002c7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c84:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c90:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002cb0:	4811      	ldr	r0, [pc, #68]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002cb2:	f001 fef1 	bl	8004a98 <HAL_DMA_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_UART_MspInit+0x378>
      Error_Handler();
 8002cbc:	f7fe fe64 	bl	8001988 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002cc4:	67da      	str	r2, [r3, #124]	; 0x7c
 8002cc6:	4a0c      	ldr	r2, [pc, #48]	; (8002cf8 <HAL_UART_MspInit+0x3b0>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2105      	movs	r1, #5
 8002cd0:	2026      	movs	r0, #38	; 0x26
 8002cd2:	f001 feb9 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cd6:	2026      	movs	r0, #38	; 0x26
 8002cd8:	f001 fed0 	bl	8004a7c <HAL_NVIC_EnableIRQ>
}
 8002cdc:	bf00      	nop
 8002cde:	37f0      	adds	r7, #240	; 0xf0
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40004400 	.word	0x40004400
 8002ce8:	58024400 	.word	0x58024400
 8002cec:	58020c00 	.word	0x58020c00
 8002cf0:	24000ab8 	.word	0x24000ab8
 8002cf4:	40020410 	.word	0x40020410
 8002cf8:	24000b30 	.word	0x24000b30
 8002cfc:	40020428 	.word	0x40020428

08002d00 <MX_WWDG1_Init>:

WWDG_HandleTypeDef hwwdg1;

/* WWDG1 init function */
void MX_WWDG1_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG1_Init 0 */

  /* USER CODE BEGIN WWDG1_Init 1 */

  /* USER CODE END WWDG1_Init 1 */
  hwwdg1.Instance = WWDG1;
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <MX_WWDG1_Init+0x38>)
 8002d06:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <MX_WWDG1_Init+0x3c>)
 8002d08:	601a      	str	r2, [r3, #0]
  hwwdg1.Init.Prescaler = WWDG_PRESCALER_1;
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <MX_WWDG1_Init+0x38>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	605a      	str	r2, [r3, #4]
  hwwdg1.Init.Window = 64;
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <MX_WWDG1_Init+0x38>)
 8002d12:	2240      	movs	r2, #64	; 0x40
 8002d14:	609a      	str	r2, [r3, #8]
  hwwdg1.Init.Counter = 64;
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <MX_WWDG1_Init+0x38>)
 8002d18:	2240      	movs	r2, #64	; 0x40
 8002d1a:	60da      	str	r2, [r3, #12]
  hwwdg1.Init.EWIMode = WWDG_EWI_DISABLE;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <MX_WWDG1_Init+0x38>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg1) != HAL_OK)
 8002d22:	4805      	ldr	r0, [pc, #20]	; (8002d38 <MX_WWDG1_Init+0x38>)
 8002d24:	f00c f888 	bl	800ee38 <HAL_WWDG_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_WWDG1_Init+0x32>
  {
    Error_Handler();
 8002d2e:	f7fe fe2b 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG1_Init 2 */

  /* USER CODE END WWDG1_Init 2 */

}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	24000ba8 	.word	0x24000ba8
 8002d3c:	50003000 	.word	0x50003000

08002d40 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <HAL_WWDG_MspInit+0x40>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d111      	bne.n	8002d76 <HAL_WWDG_MspInit+0x36>
  {
  /* USER CODE BEGIN WWDG1_MspInit 0 */

  /* USER CODE END WWDG1_MspInit 0 */
    /* WWDG1 clock enable */
    HAL_RCCEx_WWDGxSysResetConfig(RCC_WWDG1);
 8002d52:	2001      	movs	r0, #1
 8002d54:	f009 f948 	bl	800bfe8 <HAL_RCCEx_WWDGxSysResetConfig>
    __HAL_RCC_WWDG1_CLK_ENABLE();
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_WWDG_MspInit+0x44>)
 8002d5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_WWDG_MspInit+0x44>)
 8002d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d64:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_WWDG_MspInit+0x44>)
 8002d6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG1_MspInit 1 */

  /* USER CODE END WWDG1_MspInit 1 */
  }
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	50003000 	.word	0x50003000
 8002d84:	58024400 	.word	0x58024400

08002d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d8c:	f7ff fa20 	bl	80021d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d90:	480c      	ldr	r0, [pc, #48]	; (8002dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d92:	490d      	ldr	r1, [pc, #52]	; (8002dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d98:	e002      	b.n	8002da0 <LoopCopyDataInit>

08002d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d9e:	3304      	adds	r3, #4

08002da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da4:	d3f9      	bcc.n	8002d9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002da8:	4c0a      	ldr	r4, [pc, #40]	; (8002dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dac:	e001      	b.n	8002db2 <LoopFillZerobss>

08002dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db0:	3204      	adds	r2, #4

08002db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db4:	d3fb      	bcc.n	8002dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002db6:	f00e fccd 	bl	8011754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dba:	f7fe fc75 	bl	80016a8 <main>
  bx  lr
 8002dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dc0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002dc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002dc8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002dcc:	08011ad4 	.word	0x08011ad4
  ldr r2, =_sbss
 8002dd0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002dd4:	240091d8 	.word	0x240091d8

08002dd8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd8:	e7fe      	b.n	8002dd8 <ADC_IRQHandler>
	...

08002ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de2:	2003      	movs	r0, #3
 8002de4:	f001 fe25 	bl	8004a32 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002de8:	f006 febe 	bl	8009b68 <HAL_RCC_GetSysClockFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_Init+0x68>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	4913      	ldr	r1, [pc, #76]	; (8002e48 <HAL_Init+0x6c>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
 8002e04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_Init+0x68>)
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <HAL_Init+0x6c>)
 8002e10:	5cd3      	ldrb	r3, [r2, r3]
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <HAL_Init+0x70>)
 8002e1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e20:	4a0b      	ldr	r2, [pc, #44]	; (8002e50 <HAL_Init+0x74>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7ff f82a 	bl	8001e80 <HAL_InitTick>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e002      	b.n	8002e3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e36:	f7ff f805 	bl	8001e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	58024400 	.word	0x58024400
 8002e48:	08011a24 	.word	0x08011a24
 8002e4c:	24000004 	.word	0x24000004
 8002e50:	24000000 	.word	0x24000000

08002e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_IncTick+0x20>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_IncTick+0x24>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <HAL_IncTick+0x24>)
 8002e66:	6013      	str	r3, [r2, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	2400000c 	.word	0x2400000c
 8002e78:	24000bbc 	.word	0x24000bbc

08002e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_GetTick+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	24000bbc 	.word	0x24000bbc

08002e94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_GetREVID+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	5c001000 	.word	0x5c001000

08002eac <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	4904      	ldr	r1, [pc, #16]	; (8002ed4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	58000400 	.word	0x58000400

08002ed8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	609a      	str	r2, [r3, #8]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	609a      	str	r2, [r3, #8]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	3360      	adds	r3, #96	; 0x60
 8002f52:	461a      	mov	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002f74:	bf00      	nop
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	611a      	str	r2, [r3, #16]
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b087      	sub	sp, #28
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3360      	adds	r3, #96	; 0x60
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	601a      	str	r2, [r3, #0]
  }
}
 8002fdc:	bf00      	nop
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800300e:	b480      	push	{r7}
 8003010:	b087      	sub	sp, #28
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3330      	adds	r3, #48	; 0x30
 800301e:	461a      	mov	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	4413      	add	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	211f      	movs	r1, #31
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	401a      	ands	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	0e9b      	lsrs	r3, r3, #26
 8003046:	f003 011f 	and.w	r1, r3, #31
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa01 f303 	lsl.w	r3, r1, r3
 8003054:	431a      	orrs	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003072:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3314      	adds	r3, #20
 800309c:	461a      	mov	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	0e5b      	lsrs	r3, r3, #25
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	4413      	add	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	0d1b      	lsrs	r3, r3, #20
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2107      	movs	r1, #7
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	401a      	ands	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	0d1b      	lsrs	r3, r3, #20
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	431a      	orrs	r2, r3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 0318 	and.w	r3, r3, #24
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003108:	40d9      	lsrs	r1, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	400b      	ands	r3, r1
 800310e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003112:	431a      	orrs	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	000fffff 	.word	0x000fffff

0800312c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 031f 	and.w	r3, r3, #31
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003172:	4013      	ands	r3, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6093      	str	r3, [r2, #8]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	5fffffc0 	.word	0x5fffffc0

08003188 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800319c:	d101      	bne.n	80031a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80031be:	4013      	ands	r3, r2
 80031c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	6fffffc0 	.word	0x6fffffc0

080031d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031ec:	d101      	bne.n	80031f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <LL_ADC_IsEnabled+0x18>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <LL_ADC_IsEnabled+0x1a>
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b04      	cmp	r3, #4
 8003238:	d101      	bne.n	800323e <LL_ADC_REG_IsConversionOngoing+0x18>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b08      	cmp	r3, #8
 800325e:	d101      	bne.n	8003264 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003280:	2300      	movs	r3, #0
 8003282:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e18f      	b.n	80035ae <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fd fac1 	bl	8000824 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff67 	bl	8003188 <LL_ADC_IsDeepPowerDownEnabled>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d004      	beq.n	80032ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff4d 	bl	8003164 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff82 	bl	80031d8 <LL_ADC_IsInternalRegulatorEnabled>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d114      	bne.n	8003304 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ff66 	bl	80031b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032e4:	4b87      	ldr	r3, [pc, #540]	; (8003504 <HAL_ADC_Init+0x290>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	4a87      	ldr	r2, [pc, #540]	; (8003508 <HAL_ADC_Init+0x294>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	3301      	adds	r3, #1
 80032f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032f6:	e002      	b.n	80032fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f9      	bne.n	80032f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff65 	bl	80031d8 <LL_ADC_IsInternalRegulatorEnabled>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10d      	bne.n	8003330 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f043 0210 	orr.w	r2, r3, #16
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f043 0201 	orr.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff76 	bl	8003226 <LL_ADC_REG_IsConversionOngoing>
 800333a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	f040 8129 	bne.w	800359c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f040 8125 	bne.w	800359c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800335a:	f043 0202 	orr.w	r2, r3, #2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ff4a 	bl	8003200 <LL_ADC_IsEnabled>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d136      	bne.n	80033e0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a65      	ldr	r2, [pc, #404]	; (800350c <HAL_ADC_Init+0x298>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_ADC_Init+0x112>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a63      	ldr	r2, [pc, #396]	; (8003510 <HAL_ADC_Init+0x29c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10e      	bne.n	80033a4 <HAL_ADC_Init+0x130>
 8003386:	4861      	ldr	r0, [pc, #388]	; (800350c <HAL_ADC_Init+0x298>)
 8003388:	f7ff ff3a 	bl	8003200 <LL_ADC_IsEnabled>
 800338c:	4604      	mov	r4, r0
 800338e:	4860      	ldr	r0, [pc, #384]	; (8003510 <HAL_ADC_Init+0x29c>)
 8003390:	f7ff ff36 	bl	8003200 <LL_ADC_IsEnabled>
 8003394:	4603      	mov	r3, r0
 8003396:	4323      	orrs	r3, r4
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	e008      	b.n	80033b6 <HAL_ADC_Init+0x142>
 80033a4:	485b      	ldr	r0, [pc, #364]	; (8003514 <HAL_ADC_Init+0x2a0>)
 80033a6:	f7ff ff2b 	bl	8003200 <LL_ADC_IsEnabled>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d012      	beq.n	80033e0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a53      	ldr	r2, [pc, #332]	; (800350c <HAL_ADC_Init+0x298>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_ADC_Init+0x15a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a51      	ldr	r2, [pc, #324]	; (8003510 <HAL_ADC_Init+0x29c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d101      	bne.n	80033d2 <HAL_ADC_Init+0x15e>
 80033ce:	4a52      	ldr	r2, [pc, #328]	; (8003518 <HAL_ADC_Init+0x2a4>)
 80033d0:	e000      	b.n	80033d4 <HAL_ADC_Init+0x160>
 80033d2:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_ADC_Init+0x2a8>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f7ff fd7c 	bl	8002ed8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80033e0:	f7ff fd58 	bl	8002e94 <HAL_GetREVID>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d914      	bls.n	8003418 <HAL_ADC_Init+0x1a4>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d110      	bne.n	8003418 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7d5b      	ldrb	r3, [r3, #21]
 80033fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003400:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003406:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	7f1b      	ldrb	r3, [r3, #28]
 800340c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800340e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003410:	f043 030c 	orr.w	r3, r3, #12
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	e00d      	b.n	8003434 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7d5b      	ldrb	r3, [r3, #21]
 800341c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003422:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003428:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7f1b      	ldrb	r3, [r3, #28]
 800342e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7f1b      	ldrb	r3, [r3, #28]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d106      	bne.n	800344a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	3b01      	subs	r3, #1
 8003442:	045b      	lsls	r3, r3, #17
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <HAL_ADC_Init+0x2ac>)
 800346e:	4013      	ands	r3, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	69b9      	ldr	r1, [r7, #24]
 8003476:	430b      	orrs	r3, r1
 8003478:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fed1 	bl	8003226 <LL_ADC_REG_IsConversionOngoing>
 8003484:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fede 	bl	800324c <LL_ADC_INJ_IsConversionOngoing>
 8003490:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d15f      	bne.n	8003558 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d15c      	bne.n	8003558 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	7d1b      	ldrb	r3, [r3, #20]
 80034a2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <HAL_ADC_Init+0x2b0>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	69b9      	ldr	r1, [r7, #24]
 80034bc:	430b      	orrs	r3, r1
 80034be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d130      	bne.n	800352c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	4b14      	ldr	r3, [pc, #80]	; (8003528 <HAL_ADC_Init+0x2b4>)
 80034d8:	4013      	ands	r3, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034de:	3a01      	subs	r2, #1
 80034e0:	0411      	lsls	r1, r2, #16
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034e6:	4311      	orrs	r1, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034ec:	4311      	orrs	r1, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034f2:	430a      	orrs	r2, r1
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	611a      	str	r2, [r3, #16]
 8003500:	e01c      	b.n	800353c <HAL_ADC_Init+0x2c8>
 8003502:	bf00      	nop
 8003504:	24000000 	.word	0x24000000
 8003508:	053e2d63 	.word	0x053e2d63
 800350c:	40022000 	.word	0x40022000
 8003510:	40022100 	.word	0x40022100
 8003514:	58026000 	.word	0x58026000
 8003518:	40022300 	.word	0x40022300
 800351c:	58026300 	.word	0x58026300
 8003520:	fff0c003 	.word	0xfff0c003
 8003524:	ffffbffc 	.word	0xffffbffc
 8003528:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fdd8 	bl	8004108 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d10c      	bne.n	800357a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f023 010f 	bic.w	r1, r3, #15
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	1e5a      	subs	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
 8003578:	e007      	b.n	800358a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 020f 	bic.w	r2, r2, #15
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	f043 0201 	orr.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
 800359a:	e007      	b.n	80035ac <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	f043 0210 	orr.w	r2, r3, #16
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3724      	adds	r7, #36	; 0x24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd90      	pop	{r4, r7, pc}
 80035b6:	bf00      	nop

080035b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a87      	ldr	r2, [pc, #540]	; (80037f8 <HAL_ADC_IRQHandler+0x240>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_ADC_IRQHandler+0x30>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a86      	ldr	r2, [pc, #536]	; (80037fc <HAL_ADC_IRQHandler+0x244>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_IRQHandler+0x34>
 80035e8:	4b85      	ldr	r3, [pc, #532]	; (8003800 <HAL_ADC_IRQHandler+0x248>)
 80035ea:	e000      	b.n	80035ee <HAL_ADC_IRQHandler+0x36>
 80035ec:	4b85      	ldr	r3, [pc, #532]	; (8003804 <HAL_ADC_IRQHandler+0x24c>)
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fd9c 	bl	800312c <LL_ADC_GetMultimode>
 80035f4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d017      	beq.n	8003630 <HAL_ADC_IRQHandler+0x78>
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b00      	cmp	r3, #0
 8003614:	d105      	bne.n	8003622 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fec8 	bl	80043b8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2202      	movs	r2, #2
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <HAL_ADC_IRQHandler+0x8c>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8083 	beq.w	8003756 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d07d      	beq.n	8003756 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2b00      	cmp	r3, #0
 8003664:	d105      	bne.n	8003672 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fcb6 	bl	8002fe8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d062      	beq.n	8003748 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5d      	ldr	r2, [pc, #372]	; (80037fc <HAL_ADC_IRQHandler+0x244>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d002      	beq.n	8003692 <HAL_ADC_IRQHandler+0xda>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	e000      	b.n	8003694 <HAL_ADC_IRQHandler+0xdc>
 8003692:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <HAL_ADC_IRQHandler+0x240>)
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	4293      	cmp	r3, r2
 800369a:	d008      	beq.n	80036ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d002      	beq.n	80036ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b09      	cmp	r3, #9
 80036ac:	d104      	bne.n	80036b8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	623b      	str	r3, [r7, #32]
 80036b6:	e00c      	b.n	80036d2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a4f      	ldr	r2, [pc, #316]	; (80037fc <HAL_ADC_IRQHandler+0x244>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d002      	beq.n	80036c8 <HAL_ADC_IRQHandler+0x110>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	e000      	b.n	80036ca <HAL_ADC_IRQHandler+0x112>
 80036c8:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <HAL_ADC_IRQHandler+0x240>)
 80036ca:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d135      	bne.n	8003748 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d12e      	bne.n	8003748 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fd99 	bl	8003226 <LL_ADC_REG_IsConversionOngoing>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11a      	bne.n	8003730 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 020c 	bic.w	r2, r2, #12
 8003708:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d112      	bne.n	8003748 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
 800372e:	e00b      	b.n	8003748 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	f043 0210 	orr.w	r2, r3, #16
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	f043 0201 	orr.w	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f96f 	bl	8003a2c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	220c      	movs	r2, #12
 8003754:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_ADC_IRQHandler+0x1b2>
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a0 	beq.w	80038b6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 809a 	beq.w	80038b6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b00      	cmp	r3, #0
 800378c:	d105      	bne.n	800379a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fc61 	bl	8003066 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80037a4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fc1c 	bl	8002fe8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037b0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a11      	ldr	r2, [pc, #68]	; (80037fc <HAL_ADC_IRQHandler+0x244>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d002      	beq.n	80037c2 <HAL_ADC_IRQHandler+0x20a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	e000      	b.n	80037c4 <HAL_ADC_IRQHandler+0x20c>
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <HAL_ADC_IRQHandler+0x240>)
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d008      	beq.n	80037de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b06      	cmp	r3, #6
 80037d6:	d002      	beq.n	80037de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b07      	cmp	r3, #7
 80037dc:	d104      	bne.n	80037e8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	623b      	str	r3, [r7, #32]
 80037e6:	e014      	b.n	8003812 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a03      	ldr	r2, [pc, #12]	; (80037fc <HAL_ADC_IRQHandler+0x244>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00a      	beq.n	8003808 <HAL_ADC_IRQHandler+0x250>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	e008      	b.n	800380a <HAL_ADC_IRQHandler+0x252>
 80037f8:	40022000 	.word	0x40022000
 80037fc:	40022100 	.word	0x40022100
 8003800:	40022300 	.word	0x40022300
 8003804:	58026300 	.word	0x58026300
 8003808:	4b84      	ldr	r3, [pc, #528]	; (8003a1c <HAL_ADC_IRQHandler+0x464>)
 800380a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10c      	bne.n	8003832 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800381e:	2b00      	cmp	r3, #0
 8003820:	d142      	bne.n	80038a8 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d03f      	beq.n	80038a8 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800382e:	2b00      	cmp	r3, #0
 8003830:	d13a      	bne.n	80038a8 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d133      	bne.n	80038a8 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d12e      	bne.n	80038a8 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fcfc 	bl	800324c <LL_ADC_INJ_IsConversionOngoing>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11a      	bne.n	8003890 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003868:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d112      	bne.n	80038a8 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	655a      	str	r2, [r3, #84]	; 0x54
 800388e:	e00b      	b.n	80038a8 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	f043 0210 	orr.w	r2, r3, #16
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a0:	f043 0201 	orr.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fd5d 	bl	8004368 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2260      	movs	r2, #96	; 0x60
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d011      	beq.n	80038e4 <HAL_ADC_IRQHandler+0x32c>
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00c      	beq.n	80038e4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f8b2 	bl	8003a40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d012      	beq.n	8003914 <HAL_ADC_IRQHandler+0x35c>
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00d      	beq.n	8003914 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fd43 	bl	8004390 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003912:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391a:	2b00      	cmp	r3, #0
 800391c:	d012      	beq.n	8003944 <HAL_ADC_IRQHandler+0x38c>
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00d      	beq.n	8003944 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fd35 	bl	80043a4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003942:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b00      	cmp	r3, #0
 800394c:	d043      	beq.n	80039d6 <HAL_ADC_IRQHandler+0x41e>
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	d03e      	beq.n	80039d6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	2b00      	cmp	r3, #0
 800395e:	d102      	bne.n	8003966 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003960:	2301      	movs	r3, #1
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
 8003964:	e021      	b.n	80039aa <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d015      	beq.n	8003998 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a2a      	ldr	r2, [pc, #168]	; (8003a1c <HAL_ADC_IRQHandler+0x464>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_ADC_IRQHandler+0x3c8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a29      	ldr	r2, [pc, #164]	; (8003a20 <HAL_ADC_IRQHandler+0x468>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_ADC_IRQHandler+0x3cc>
 8003980:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_ADC_IRQHandler+0x46c>)
 8003982:	e000      	b.n	8003986 <HAL_ADC_IRQHandler+0x3ce>
 8003984:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <HAL_ADC_IRQHandler+0x470>)
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fbde 	bl	8003148 <LL_ADC_GetMultiDMATransfer>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003992:	2301      	movs	r3, #1
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	e008      	b.n	80039aa <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80039a6:	2301      	movs	r3, #1
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d10e      	bne.n	80039ce <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	f043 0202 	orr.w	r2, r3, #2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f843 	bl	8003a54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2210      	movs	r2, #16
 80039d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d018      	beq.n	8003a12 <HAL_ADC_IRQHandler+0x45a>
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d013      	beq.n	8003a12 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	f043 0208 	orr.w	r2, r3, #8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a0a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fcb5 	bl	800437c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003a12:	bf00      	nop
 8003a14:	3728      	adds	r7, #40	; 0x28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40022000 	.word	0x40022000
 8003a20:	40022100 	.word	0x40022100
 8003a24:	40022300 	.word	0x40022300
 8003a28:	58026300 	.word	0x58026300

08003a2c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b0a1      	sub	sp, #132	; 0x84
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4a9d      	ldr	r2, [pc, #628]	; (8003cf8 <HAL_ADC_ConfigChannel+0x290>)
 8003a82:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x2a>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e321      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x66e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fbc1 	bl	8003226 <LL_ADC_REG_IsConversionOngoing>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f040 8306 	bne.w	80040b8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d108      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x62>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	0e9b      	lsrs	r3, r3, #26
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	e016      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x90>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ada:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003ae2:	2320      	movs	r3, #32
 8003ae4:	e003      	b.n	8003aee <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ae8:	fab3 f383 	clz	r3, r3
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	2201      	movs	r2, #1
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	69d1      	ldr	r1, [r2, #28]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	430b      	orrs	r3, r1
 8003b04:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6859      	ldr	r1, [r3, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f7ff fa7b 	bl	800300e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fb82 	bl	8003226 <LL_ADC_REG_IsConversionOngoing>
 8003b22:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fb8f 	bl	800324c <LL_ADC_INJ_IsConversionOngoing>
 8003b2e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f040 80b3 	bne.w	8003c9e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f040 80af 	bne.w	8003c9e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f7ff fa9d 	bl	800308c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b52:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <HAL_ADC_ConfigChannel+0x294>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b5e:	d10b      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x110>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	e01d      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x14c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10b      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x136>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	e00a      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x14c>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d027      	beq.n	8003c0e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6919      	ldr	r1, [r3, #16]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bcc:	f7ff f9b8 	bl	8002f40 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6919      	ldr	r1, [r3, #16]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	7e5b      	ldrb	r3, [r3, #25]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d102      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x17e>
 8003be0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003be4:	e000      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x180>
 8003be6:	2300      	movs	r3, #0
 8003be8:	461a      	mov	r2, r3
 8003bea:	f7ff f9e2 	bl	8002fb2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6919      	ldr	r1, [r3, #16]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	7e1b      	ldrb	r3, [r3, #24]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x19c>
 8003bfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c02:	e000      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x19e>
 8003c04:	2300      	movs	r3, #0
 8003c06:	461a      	mov	r2, r3
 8003c08:	f7ff f9ba 	bl	8002f80 <LL_ADC_SetDataRightShift>
 8003c0c:	e047      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	069b      	lsls	r3, r3, #26
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d107      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c30:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	069b      	lsls	r3, r3, #26
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d107      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c54:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	069b      	lsls	r3, r3, #26
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d107      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c78:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	069b      	lsls	r3, r3, #26
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d107      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c9c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff faac 	bl	8003200 <LL_ADC_IsEnabled>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f040 820d 	bne.w	80040ca <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f7ff fa11 	bl	80030e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	4a0c      	ldr	r2, [pc, #48]	; (8003cf8 <HAL_ADC_ConfigChannel+0x290>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	f040 8133 	bne.w	8003f34 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d110      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x298>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	0e9b      	lsrs	r3, r3, #26
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2b09      	cmp	r3, #9
 8003cec:	bf94      	ite	ls
 8003cee:	2301      	movls	r3, #1
 8003cf0:	2300      	movhi	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	e01e      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x2cc>
 8003cf6:	bf00      	nop
 8003cf8:	47ff0000 	.word	0x47ff0000
 8003cfc:	5c001000 	.word	0x5c001000
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d10:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003d18:	2320      	movs	r3, #32
 8003d1a:	e003      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d1e:	fab3 f383 	clz	r3, r3
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	3301      	adds	r3, #1
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	2b09      	cmp	r3, #9
 8003d2c:	bf94      	ite	ls
 8003d2e:	2301      	movls	r3, #1
 8003d30:	2300      	movhi	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d079      	beq.n	8003e2c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d107      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x2ec>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	0e9b      	lsrs	r3, r3, #26
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	069b      	lsls	r3, r3, #26
 8003d4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d52:	e015      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x318>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5c:	fa93 f3a3 	rbit	r3, r3
 8003d60:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d64:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	e003      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	069b      	lsls	r3, r3, #26
 8003d7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x338>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0e9b      	lsrs	r3, r3, #26
 8003d92:	3301      	adds	r3, #1
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2101      	movs	r1, #1
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	e017      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x368>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da8:	fa93 f3a3 	rbit	r3, r3
 8003dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003db8:	2320      	movs	r3, #32
 8003dba:	e003      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	2101      	movs	r1, #1
 8003dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd0:	ea42 0103 	orr.w	r1, r2, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x38e>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	0e9b      	lsrs	r3, r3, #26
 8003de6:	3301      	adds	r3, #1
 8003de8:	f003 021f 	and.w	r2, r3, #31
 8003dec:	4613      	mov	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4413      	add	r3, r2
 8003df2:	051b      	lsls	r3, r3, #20
 8003df4:	e018      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x3c0>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003e0e:	2320      	movs	r3, #32
 8003e10:	e003      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e14:	fab3 f383 	clz	r3, r3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	4613      	mov	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	e07e      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x3e0>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0e9b      	lsrs	r3, r3, #26
 8003e3e:	3301      	adds	r3, #1
 8003e40:	069b      	lsls	r3, r3, #26
 8003e42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e46:	e015      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x40c>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003e60:	2320      	movs	r3, #32
 8003e62:	e003      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	069b      	lsls	r3, r3, #26
 8003e70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x42c>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0e9b      	lsrs	r3, r3, #26
 8003e86:	3301      	adds	r3, #1
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	e017      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x45c>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	61bb      	str	r3, [r7, #24]
  return result;
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003eac:	2320      	movs	r3, #32
 8003eae:	e003      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	ea42 0103 	orr.w	r1, r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10d      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x488>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	0e9b      	lsrs	r3, r3, #26
 8003eda:	3301      	adds	r3, #1
 8003edc:	f003 021f 	and.w	r2, r3, #31
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3b1e      	subs	r3, #30
 8003ee8:	051b      	lsls	r3, r3, #20
 8003eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eee:	e01b      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x4c0>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	fa93 f3a3 	rbit	r3, r3
 8003efc:	60fb      	str	r3, [r7, #12]
  return result;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003f08:	2320      	movs	r3, #32
 8003f0a:	e003      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	fab3 f383 	clz	r3, r3
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	3301      	adds	r3, #1
 8003f16:	f003 021f 	and.w	r2, r3, #31
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	3b1e      	subs	r3, #30
 8003f22:	051b      	lsls	r3, r3, #20
 8003f24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	6892      	ldr	r2, [r2, #8]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	f7ff f8ac 	bl	800308c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f280 80c6 	bge.w	80040ca <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a67      	ldr	r2, [pc, #412]	; (80040e0 <HAL_ADC_ConfigChannel+0x678>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_ADC_ConfigChannel+0x4ea>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a65      	ldr	r2, [pc, #404]	; (80040e4 <HAL_ADC_ConfigChannel+0x67c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x4ee>
 8003f52:	4b65      	ldr	r3, [pc, #404]	; (80040e8 <HAL_ADC_ConfigChannel+0x680>)
 8003f54:	e000      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x4f0>
 8003f56:	4b65      	ldr	r3, [pc, #404]	; (80040ec <HAL_ADC_ConfigChannel+0x684>)
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe ffe3 	bl	8002f24 <LL_ADC_GetCommonPathInternalCh>
 8003f5e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a5e      	ldr	r2, [pc, #376]	; (80040e0 <HAL_ADC_ConfigChannel+0x678>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_ADC_ConfigChannel+0x50c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a5d      	ldr	r2, [pc, #372]	; (80040e4 <HAL_ADC_ConfigChannel+0x67c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10e      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x52a>
 8003f74:	485a      	ldr	r0, [pc, #360]	; (80040e0 <HAL_ADC_ConfigChannel+0x678>)
 8003f76:	f7ff f943 	bl	8003200 <LL_ADC_IsEnabled>
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	4859      	ldr	r0, [pc, #356]	; (80040e4 <HAL_ADC_ConfigChannel+0x67c>)
 8003f7e:	f7ff f93f 	bl	8003200 <LL_ADC_IsEnabled>
 8003f82:	4603      	mov	r3, r0
 8003f84:	4323      	orrs	r3, r4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	e008      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x53c>
 8003f92:	4857      	ldr	r0, [pc, #348]	; (80040f0 <HAL_ADC_ConfigChannel+0x688>)
 8003f94:	f7ff f934 	bl	8003200 <LL_ADC_IsEnabled>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf0c      	ite	eq
 8003f9e:	2301      	moveq	r3, #1
 8003fa0:	2300      	movne	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d07d      	beq.n	80040a4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a51      	ldr	r2, [pc, #324]	; (80040f4 <HAL_ADC_ConfigChannel+0x68c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d130      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x5ac>
 8003fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d12b      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a4b      	ldr	r2, [pc, #300]	; (80040f0 <HAL_ADC_ConfigChannel+0x688>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	f040 8081 	bne.w	80040ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a44      	ldr	r2, [pc, #272]	; (80040e0 <HAL_ADC_ConfigChannel+0x678>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_ADC_ConfigChannel+0x574>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a43      	ldr	r2, [pc, #268]	; (80040e4 <HAL_ADC_ConfigChannel+0x67c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d101      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x578>
 8003fdc:	4a42      	ldr	r2, [pc, #264]	; (80040e8 <HAL_ADC_ConfigChannel+0x680>)
 8003fde:	e000      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x57a>
 8003fe0:	4a42      	ldr	r2, [pc, #264]	; (80040ec <HAL_ADC_ConfigChannel+0x684>)
 8003fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f7fe ff87 	bl	8002efe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ff0:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_ADC_ConfigChannel+0x690>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	099b      	lsrs	r3, r3, #6
 8003ff6:	4a41      	ldr	r2, [pc, #260]	; (80040fc <HAL_ADC_ConfigChannel+0x694>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	099b      	lsrs	r3, r3, #6
 8003ffe:	3301      	adds	r3, #1
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004004:	e002      	b.n	800400c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3b01      	subs	r3, #1
 800400a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f9      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004012:	e05a      	b.n	80040ca <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a39      	ldr	r2, [pc, #228]	; (8004100 <HAL_ADC_ConfigChannel+0x698>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d11e      	bne.n	800405c <HAL_ADC_ConfigChannel+0x5f4>
 800401e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d119      	bne.n	800405c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a30      	ldr	r2, [pc, #192]	; (80040f0 <HAL_ADC_ConfigChannel+0x688>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d14b      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <HAL_ADC_ConfigChannel+0x678>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_ADC_ConfigChannel+0x5de>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a28      	ldr	r2, [pc, #160]	; (80040e4 <HAL_ADC_ConfigChannel+0x67c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_ADC_ConfigChannel+0x5e2>
 8004046:	4a28      	ldr	r2, [pc, #160]	; (80040e8 <HAL_ADC_ConfigChannel+0x680>)
 8004048:	e000      	b.n	800404c <HAL_ADC_ConfigChannel+0x5e4>
 800404a:	4a28      	ldr	r2, [pc, #160]	; (80040ec <HAL_ADC_ConfigChannel+0x684>)
 800404c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f7fe ff52 	bl	8002efe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800405a:	e036      	b.n	80040ca <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a28      	ldr	r2, [pc, #160]	; (8004104 <HAL_ADC_ConfigChannel+0x69c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d131      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x662>
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d12c      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <HAL_ADC_ConfigChannel+0x688>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d127      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_ADC_ConfigChannel+0x678>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_ADC_ConfigChannel+0x626>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <HAL_ADC_ConfigChannel+0x67c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x62a>
 800408e:	4a16      	ldr	r2, [pc, #88]	; (80040e8 <HAL_ADC_ConfigChannel+0x680>)
 8004090:	e000      	b.n	8004094 <HAL_ADC_ConfigChannel+0x62c>
 8004092:	4a16      	ldr	r2, [pc, #88]	; (80040ec <HAL_ADC_ConfigChannel+0x684>)
 8004094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004096:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800409a:	4619      	mov	r1, r3
 800409c:	4610      	mov	r0, r2
 800409e:	f7fe ff2e 	bl	8002efe <LL_ADC_SetCommonPathInternalCh>
 80040a2:	e012      	b.n	80040ca <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	f043 0220 	orr.w	r2, r3, #32
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80040b6:	e008      	b.n	80040ca <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f043 0220 	orr.w	r2, r3, #32
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3784      	adds	r7, #132	; 0x84
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd90      	pop	{r4, r7, pc}
 80040de:	bf00      	nop
 80040e0:	40022000 	.word	0x40022000
 80040e4:	40022100 	.word	0x40022100
 80040e8:	40022300 	.word	0x40022300
 80040ec:	58026300 	.word	0x58026300
 80040f0:	58026000 	.word	0x58026000
 80040f4:	cb840000 	.word	0xcb840000
 80040f8:	24000000 	.word	0x24000000
 80040fc:	053e2d63 	.word	0x053e2d63
 8004100:	c7520000 	.word	0xc7520000
 8004104:	cfb80000 	.word	0xcfb80000

08004108 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a79      	ldr	r2, [pc, #484]	; (80042fc <ADC_ConfigureBoostMode+0x1f4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <ADC_ConfigureBoostMode+0x1c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a78      	ldr	r2, [pc, #480]	; (8004300 <ADC_ConfigureBoostMode+0x1f8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d109      	bne.n	8004138 <ADC_ConfigureBoostMode+0x30>
 8004124:	4b77      	ldr	r3, [pc, #476]	; (8004304 <ADC_ConfigureBoostMode+0x1fc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e008      	b.n	800414a <ADC_ConfigureBoostMode+0x42>
 8004138:	4b73      	ldr	r3, [pc, #460]	; (8004308 <ADC_ConfigureBoostMode+0x200>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01c      	beq.n	8004188 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800414e:	f005 fe85 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 8004152:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800415c:	d010      	beq.n	8004180 <ADC_ConfigureBoostMode+0x78>
 800415e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004162:	d871      	bhi.n	8004248 <ADC_ConfigureBoostMode+0x140>
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004168:	d002      	beq.n	8004170 <ADC_ConfigureBoostMode+0x68>
 800416a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800416e:	d16b      	bne.n	8004248 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	fbb2 f3f3 	udiv	r3, r2, r3
 800417c:	60fb      	str	r3, [r7, #12]
        break;
 800417e:	e066      	b.n	800424e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	089b      	lsrs	r3, r3, #2
 8004184:	60fb      	str	r3, [r7, #12]
        break;
 8004186:	e062      	b.n	800424e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004188:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800418c:	f006 fe4a 	bl	800ae24 <HAL_RCCEx_GetPeriphCLKFreq>
 8004190:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800419a:	d051      	beq.n	8004240 <ADC_ConfigureBoostMode+0x138>
 800419c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80041a0:	d854      	bhi.n	800424c <ADC_ConfigureBoostMode+0x144>
 80041a2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80041a6:	d047      	beq.n	8004238 <ADC_ConfigureBoostMode+0x130>
 80041a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80041ac:	d84e      	bhi.n	800424c <ADC_ConfigureBoostMode+0x144>
 80041ae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80041b2:	d03d      	beq.n	8004230 <ADC_ConfigureBoostMode+0x128>
 80041b4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80041b8:	d848      	bhi.n	800424c <ADC_ConfigureBoostMode+0x144>
 80041ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041be:	d033      	beq.n	8004228 <ADC_ConfigureBoostMode+0x120>
 80041c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041c4:	d842      	bhi.n	800424c <ADC_ConfigureBoostMode+0x144>
 80041c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80041ca:	d029      	beq.n	8004220 <ADC_ConfigureBoostMode+0x118>
 80041cc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80041d0:	d83c      	bhi.n	800424c <ADC_ConfigureBoostMode+0x144>
 80041d2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80041d6:	d01a      	beq.n	800420e <ADC_ConfigureBoostMode+0x106>
 80041d8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80041dc:	d836      	bhi.n	800424c <ADC_ConfigureBoostMode+0x144>
 80041de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80041e2:	d014      	beq.n	800420e <ADC_ConfigureBoostMode+0x106>
 80041e4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80041e8:	d830      	bhi.n	800424c <ADC_ConfigureBoostMode+0x144>
 80041ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ee:	d00e      	beq.n	800420e <ADC_ConfigureBoostMode+0x106>
 80041f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f4:	d82a      	bhi.n	800424c <ADC_ConfigureBoostMode+0x144>
 80041f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041fa:	d008      	beq.n	800420e <ADC_ConfigureBoostMode+0x106>
 80041fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004200:	d824      	bhi.n	800424c <ADC_ConfigureBoostMode+0x144>
 8004202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004206:	d002      	beq.n	800420e <ADC_ConfigureBoostMode+0x106>
 8004208:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800420c:	d11e      	bne.n	800424c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	0c9b      	lsrs	r3, r3, #18
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	60fb      	str	r3, [r7, #12]
        break;
 800421e:	e016      	b.n	800424e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	091b      	lsrs	r3, r3, #4
 8004224:	60fb      	str	r3, [r7, #12]
        break;
 8004226:	e012      	b.n	800424e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	60fb      	str	r3, [r7, #12]
        break;
 800422e:	e00e      	b.n	800424e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	60fb      	str	r3, [r7, #12]
        break;
 8004236:	e00a      	b.n	800424e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	09db      	lsrs	r3, r3, #7
 800423c:	60fb      	str	r3, [r7, #12]
        break;
 800423e:	e006      	b.n	800424e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	60fb      	str	r3, [r7, #12]
        break;
 8004246:	e002      	b.n	800424e <ADC_ConfigureBoostMode+0x146>
        break;
 8004248:	bf00      	nop
 800424a:	e000      	b.n	800424e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800424c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800424e:	f7fe fe21 	bl	8002e94 <HAL_GetREVID>
 8004252:	4603      	mov	r3, r0
 8004254:	f241 0203 	movw	r2, #4099	; 0x1003
 8004258:	4293      	cmp	r3, r2
 800425a:	d815      	bhi.n	8004288 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a2b      	ldr	r2, [pc, #172]	; (800430c <ADC_ConfigureBoostMode+0x204>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d908      	bls.n	8004276 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004272:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004274:	e03e      	b.n	80042f4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004284:	609a      	str	r2, [r3, #8]
}
 8004286:	e035      	b.n	80042f4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4a1f      	ldr	r2, [pc, #124]	; (8004310 <ADC_ConfigureBoostMode+0x208>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d808      	bhi.n	80042a8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042a4:	609a      	str	r2, [r3, #8]
}
 80042a6:	e025      	b.n	80042f4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4a1a      	ldr	r2, [pc, #104]	; (8004314 <ADC_ConfigureBoostMode+0x20c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d80a      	bhi.n	80042c6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c2:	609a      	str	r2, [r3, #8]
}
 80042c4:	e016      	b.n	80042f4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a13      	ldr	r2, [pc, #76]	; (8004318 <ADC_ConfigureBoostMode+0x210>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d80a      	bhi.n	80042e4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e0:	609a      	str	r2, [r3, #8]
}
 80042e2:	e007      	b.n	80042f4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80042f2:	609a      	str	r2, [r3, #8]
}
 80042f4:	bf00      	nop
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40022000 	.word	0x40022000
 8004300:	40022100 	.word	0x40022100
 8004304:	40022300 	.word	0x40022300
 8004308:	58026300 	.word	0x58026300
 800430c:	01312d00 	.word	0x01312d00
 8004310:	005f5e10 	.word	0x005f5e10
 8004314:	00bebc20 	.word	0x00bebc20
 8004318:	017d7840 	.word	0x017d7840

0800431c <LL_ADC_IsEnabled>:
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <LL_ADC_IsEnabled+0x18>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <LL_ADC_IsEnabled+0x1a>
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <LL_ADC_REG_IsConversionOngoing>:
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b04      	cmp	r3, #4
 8004354:	d101      	bne.n	800435a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b09f      	sub	sp, #124	; 0x7c
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e0be      	b.n	8004568 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80043f2:	2300      	movs	r3, #0
 80043f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a5c      	ldr	r2, [pc, #368]	; (8004570 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d102      	bne.n	800440a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004404:	4b5b      	ldr	r3, [pc, #364]	; (8004574 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	e001      	b.n	800440e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e09d      	b.n	8004568 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff ff87 	bl	8004342 <LL_ADC_REG_IsConversionOngoing>
 8004434:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff ff81 	bl	8004342 <LL_ADC_REG_IsConversionOngoing>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d17f      	bne.n	8004546 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004448:	2b00      	cmp	r3, #0
 800444a:	d17c      	bne.n	8004546 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a47      	ldr	r2, [pc, #284]	; (8004570 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a46      	ldr	r2, [pc, #280]	; (8004574 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d101      	bne.n	8004464 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004460:	4b45      	ldr	r3, [pc, #276]	; (8004578 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004462:	e000      	b.n	8004466 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004464:	4b45      	ldr	r3, [pc, #276]	; (800457c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004466:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d039      	beq.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	431a      	orrs	r2, r3
 800447e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004480:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a3a      	ldr	r2, [pc, #232]	; (8004570 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a38      	ldr	r2, [pc, #224]	; (8004574 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d10e      	bne.n	80044b4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004496:	4836      	ldr	r0, [pc, #216]	; (8004570 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004498:	f7ff ff40 	bl	800431c <LL_ADC_IsEnabled>
 800449c:	4604      	mov	r4, r0
 800449e:	4835      	ldr	r0, [pc, #212]	; (8004574 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044a0:	f7ff ff3c 	bl	800431c <LL_ADC_IsEnabled>
 80044a4:	4603      	mov	r3, r0
 80044a6:	4323      	orrs	r3, r4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e008      	b.n	80044c6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80044b4:	4832      	ldr	r0, [pc, #200]	; (8004580 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80044b6:	f7ff ff31 	bl	800431c <LL_ADC_IsEnabled>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d047      	beq.n	800455a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	4b2d      	ldr	r3, [pc, #180]	; (8004584 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	6811      	ldr	r1, [r2, #0]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	6892      	ldr	r2, [r2, #8]
 80044da:	430a      	orrs	r2, r1
 80044dc:	431a      	orrs	r2, r3
 80044de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044e2:	e03a      	b.n	800455a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80044e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1e      	ldr	r2, [pc, #120]	; (8004570 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d10e      	bne.n	8004522 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004504:	481a      	ldr	r0, [pc, #104]	; (8004570 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004506:	f7ff ff09 	bl	800431c <LL_ADC_IsEnabled>
 800450a:	4604      	mov	r4, r0
 800450c:	4819      	ldr	r0, [pc, #100]	; (8004574 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800450e:	f7ff ff05 	bl	800431c <LL_ADC_IsEnabled>
 8004512:	4603      	mov	r3, r0
 8004514:	4323      	orrs	r3, r4
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	e008      	b.n	8004534 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004522:	4817      	ldr	r0, [pc, #92]	; (8004580 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004524:	f7ff fefa 	bl	800431c <LL_ADC_IsEnabled>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	bf0c      	ite	eq
 800452e:	2301      	moveq	r3, #1
 8004530:	2300      	movne	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d010      	beq.n	800455a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800453e:	4013      	ands	r3, r2
 8004540:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004542:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004544:	e009      	b.n	800455a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	f043 0220 	orr.w	r2, r3, #32
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004558:	e000      	b.n	800455c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800455a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004564:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004568:	4618      	mov	r0, r3
 800456a:	377c      	adds	r7, #124	; 0x7c
 800456c:	46bd      	mov	sp, r7
 800456e:	bd90      	pop	{r4, r7, pc}
 8004570:	40022000 	.word	0x40022000
 8004574:	40022100 	.word	0x40022100
 8004578:	40022300 	.word	0x40022300
 800457c:	58026300 	.word	0x58026300
 8004580:	58026000 	.word	0x58026000
 8004584:	fffff0e0 	.word	0xfffff0e0

08004588 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d102      	bne.n	80045a4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e10e      	b.n	80047c2 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045b2:	d102      	bne.n	80045ba <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e103      	b.n	80047c2 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7fc fa3b 	bl	8000a50 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80045ee:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 80045f4:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 80045fa:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8004600:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b6e      	ldr	r3, [pc, #440]	; (80047cc <HAL_COMP_Init+0x244>)
 8004612:	4013      	ands	r3, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	6979      	ldr	r1, [r7, #20]
 800461a:	430b      	orrs	r3, r1
 800461c:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b10      	cmp	r3, #16
 8004624:	d108      	bne.n	8004638 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0210 	orr.w	r2, r2, #16
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e007      	b.n	8004648 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0210 	bic.w	r2, r2, #16
 8004646:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <HAL_COMP_Init+0xfc>
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d013      	beq.n	8004684 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800465c:	4b5c      	ldr	r3, [pc, #368]	; (80047d0 <HAL_COMP_Init+0x248>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	099b      	lsrs	r3, r3, #6
 8004662:	4a5c      	ldr	r2, [pc, #368]	; (80047d4 <HAL_COMP_Init+0x24c>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	099b      	lsrs	r3, r3, #6
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8004676:	e002      	b.n	800467e <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3b01      	subs	r3, #1
 800467c:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1f9      	bne.n	8004678 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a53      	ldr	r2, [pc, #332]	; (80047d8 <HAL_COMP_Init+0x250>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d102      	bne.n	8004694 <HAL_COMP_Init+0x10c>
 800468e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004692:	e001      	b.n	8004698 <HAL_COMP_Init+0x110>
 8004694:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004698:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d06d      	beq.n	8004782 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 80046b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]
 80046c2:	e008      	b.n	80046d6 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 80046c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046d2:	4013      	ands	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 80046e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	604b      	str	r3, [r1, #4]
 80046f2:	e008      	b.n	8004706 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 80046f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004702:	4013      	ands	r3, r2
 8004704:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8004706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 800471c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004720:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8004730:	e00a      	b.n	8004748 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8004732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004736:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	43db      	mvns	r3, r3
 800473e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004742:	4013      	ands	r3, r2
 8004744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8004754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004758:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800475c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8004768:	e021      	b.n	80047ae <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 800476a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	43db      	mvns	r3, r3
 8004776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800477a:	4013      	ands	r3, r2
 800477c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8004780:	e015      	b.n	80047ae <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004786:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	43db      	mvns	r3, r3
 800478e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004792:	4013      	ands	r3, r2
 8004794:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	43db      	mvns	r3, r3
 80047a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047a8:	4013      	ands	r3, r2
 80047aa:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 80047c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	f0e8cce1 	.word	0xf0e8cce1
 80047d0:	24000000 	.word	0x24000000
 80047d4:	053e2d63 	.word	0x053e2d63
 80047d8:	5800380c 	.word	0x5800380c

080047dc <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a33      	ldr	r2, [pc, #204]	; (80048b8 <HAL_COMP_IRQHandler+0xdc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d102      	bne.n	80047f4 <HAL_COMP_IRQHandler+0x18>
 80047ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047f2:	e001      	b.n	80047f8 <HAL_COMP_IRQHandler+0x1c>
 80047f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047f8:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 80047fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4013      	ands	r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d014      	beq.n	8004834 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 800480a:	4b2c      	ldr	r3, [pc, #176]	; (80048bc <HAL_COMP_IRQHandler+0xe0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b00      	cmp	r3, #0
 8004814:	d006      	beq.n	8004824 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8004816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800481e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004822:	e004      	b.n	800482e <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 8004824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f848 	bl	80048c4 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d136      	bne.n	80048b0 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 8004842:	4b1f      	ldr	r3, [pc, #124]	; (80048c0 <HAL_COMP_IRQHandler+0xe4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484e:	d101      	bne.n	8004854 <HAL_COMP_IRQHandler+0x78>
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <HAL_COMP_IRQHandler+0x7a>
 8004854:	2300      	movs	r3, #0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00b      	beq.n	8004872 <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 800485a:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <HAL_COMP_IRQHandler+0xe4>)
 800485c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004860:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004870:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 8004872:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <HAL_COMP_IRQHandler+0xe4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800487e:	d101      	bne.n	8004884 <HAL_COMP_IRQHandler+0xa8>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_COMP_IRQHandler+0xaa>
 8004884:	2300      	movs	r3, #0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 800488a:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <HAL_COMP_IRQHandler+0xe4>)
 800488c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004890:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a0:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f80a 	bl	80048c4 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	5800380c 	.word	0x5800380c
 80048bc:	58003810 	.word	0x58003810
 80048c0:	58003800 	.word	0x58003800

080048c4 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
   /* Prevent unused argument(s) compilation warning */
   UNUSED(hcomp);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <__NVIC_SetPriorityGrouping>:
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <__NVIC_SetPriorityGrouping+0x40>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048f4:	4013      	ands	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <__NVIC_SetPriorityGrouping+0x44>)
 8004902:	4313      	orrs	r3, r2
 8004904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004906:	4a04      	ldr	r2, [pc, #16]	; (8004918 <__NVIC_SetPriorityGrouping+0x40>)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	60d3      	str	r3, [r2, #12]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	e000ed00 	.word	0xe000ed00
 800491c:	05fa0000 	.word	0x05fa0000

08004920 <__NVIC_GetPriorityGrouping>:
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004924:	4b04      	ldr	r3, [pc, #16]	; (8004938 <__NVIC_GetPriorityGrouping+0x18>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	f003 0307 	and.w	r3, r3, #7
}
 800492e:	4618      	mov	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <__NVIC_EnableIRQ>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800494a:	2b00      	cmp	r3, #0
 800494c:	db0b      	blt.n	8004966 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	4907      	ldr	r1, [pc, #28]	; (8004974 <__NVIC_EnableIRQ+0x38>)
 8004956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2001      	movs	r0, #1
 800495e:	fa00 f202 	lsl.w	r2, r0, r2
 8004962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000e100 	.word	0xe000e100

08004978 <__NVIC_SetPriority>:
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	6039      	str	r1, [r7, #0]
 8004982:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004984:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004988:	2b00      	cmp	r3, #0
 800498a:	db0a      	blt.n	80049a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	490c      	ldr	r1, [pc, #48]	; (80049c4 <__NVIC_SetPriority+0x4c>)
 8004992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004996:	0112      	lsls	r2, r2, #4
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	440b      	add	r3, r1
 800499c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049a0:	e00a      	b.n	80049b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	4908      	ldr	r1, [pc, #32]	; (80049c8 <__NVIC_SetPriority+0x50>)
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	3b04      	subs	r3, #4
 80049b0:	0112      	lsls	r2, r2, #4
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	440b      	add	r3, r1
 80049b6:	761a      	strb	r2, [r3, #24]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000e100 	.word	0xe000e100
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <NVIC_EncodePriority>:
{
 80049cc:	b480      	push	{r7}
 80049ce:	b089      	sub	sp, #36	; 0x24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f1c3 0307 	rsb	r3, r3, #7
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	bf28      	it	cs
 80049ea:	2304      	movcs	r3, #4
 80049ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2b06      	cmp	r3, #6
 80049f4:	d902      	bls.n	80049fc <NVIC_EncodePriority+0x30>
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3b03      	subs	r3, #3
 80049fa:	e000      	b.n	80049fe <NVIC_EncodePriority+0x32>
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a00:	f04f 32ff 	mov.w	r2, #4294967295
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	401a      	ands	r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a14:	f04f 31ff 	mov.w	r1, #4294967295
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	43d9      	mvns	r1, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a24:	4313      	orrs	r3, r2
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3724      	adds	r7, #36	; 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff ff4c 	bl	80048d8 <__NVIC_SetPriorityGrouping>
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a56:	f7ff ff63 	bl	8004920 <__NVIC_GetPriorityGrouping>
 8004a5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	68b9      	ldr	r1, [r7, #8]
 8004a60:	6978      	ldr	r0, [r7, #20]
 8004a62:	f7ff ffb3 	bl	80049cc <NVIC_EncodePriority>
 8004a66:	4602      	mov	r2, r0
 8004a68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff ff82 	bl	8004978 <__NVIC_SetPriority>
}
 8004a74:	bf00      	nop
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff ff56 	bl	800493c <__NVIC_EnableIRQ>
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004aa0:	f7fe f9ec 	bl	8002e7c <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e316      	b.n	80050de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a66      	ldr	r2, [pc, #408]	; (8004c50 <HAL_DMA_Init+0x1b8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d04a      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a65      	ldr	r2, [pc, #404]	; (8004c54 <HAL_DMA_Init+0x1bc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d045      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a63      	ldr	r2, [pc, #396]	; (8004c58 <HAL_DMA_Init+0x1c0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d040      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a62      	ldr	r2, [pc, #392]	; (8004c5c <HAL_DMA_Init+0x1c4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d03b      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a60      	ldr	r2, [pc, #384]	; (8004c60 <HAL_DMA_Init+0x1c8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d036      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a5f      	ldr	r2, [pc, #380]	; (8004c64 <HAL_DMA_Init+0x1cc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d031      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a5d      	ldr	r2, [pc, #372]	; (8004c68 <HAL_DMA_Init+0x1d0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d02c      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a5c      	ldr	r2, [pc, #368]	; (8004c6c <HAL_DMA_Init+0x1d4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d027      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a5a      	ldr	r2, [pc, #360]	; (8004c70 <HAL_DMA_Init+0x1d8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d022      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a59      	ldr	r2, [pc, #356]	; (8004c74 <HAL_DMA_Init+0x1dc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d01d      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a57      	ldr	r2, [pc, #348]	; (8004c78 <HAL_DMA_Init+0x1e0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d018      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a56      	ldr	r2, [pc, #344]	; (8004c7c <HAL_DMA_Init+0x1e4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d013      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a54      	ldr	r2, [pc, #336]	; (8004c80 <HAL_DMA_Init+0x1e8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00e      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a53      	ldr	r2, [pc, #332]	; (8004c84 <HAL_DMA_Init+0x1ec>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d009      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a51      	ldr	r2, [pc, #324]	; (8004c88 <HAL_DMA_Init+0x1f0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <HAL_DMA_Init+0xb8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a50      	ldr	r2, [pc, #320]	; (8004c8c <HAL_DMA_Init+0x1f4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_DMA_Init+0xbc>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <HAL_DMA_Init+0xbe>
 8004b54:	2300      	movs	r3, #0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 813b 	beq.w	8004dd2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a37      	ldr	r2, [pc, #220]	; (8004c50 <HAL_DMA_Init+0x1b8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d04a      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a36      	ldr	r2, [pc, #216]	; (8004c54 <HAL_DMA_Init+0x1bc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d045      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a34      	ldr	r2, [pc, #208]	; (8004c58 <HAL_DMA_Init+0x1c0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d040      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a33      	ldr	r2, [pc, #204]	; (8004c5c <HAL_DMA_Init+0x1c4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d03b      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a31      	ldr	r2, [pc, #196]	; (8004c60 <HAL_DMA_Init+0x1c8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d036      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a30      	ldr	r2, [pc, #192]	; (8004c64 <HAL_DMA_Init+0x1cc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d031      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a2e      	ldr	r2, [pc, #184]	; (8004c68 <HAL_DMA_Init+0x1d0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d02c      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a2d      	ldr	r2, [pc, #180]	; (8004c6c <HAL_DMA_Init+0x1d4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d027      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a2b      	ldr	r2, [pc, #172]	; (8004c70 <HAL_DMA_Init+0x1d8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d022      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2a      	ldr	r2, [pc, #168]	; (8004c74 <HAL_DMA_Init+0x1dc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d01d      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a28      	ldr	r2, [pc, #160]	; (8004c78 <HAL_DMA_Init+0x1e0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d018      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a27      	ldr	r2, [pc, #156]	; (8004c7c <HAL_DMA_Init+0x1e4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d013      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a25      	ldr	r2, [pc, #148]	; (8004c80 <HAL_DMA_Init+0x1e8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00e      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a24      	ldr	r2, [pc, #144]	; (8004c84 <HAL_DMA_Init+0x1ec>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a22      	ldr	r2, [pc, #136]	; (8004c88 <HAL_DMA_Init+0x1f0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d004      	beq.n	8004c0c <HAL_DMA_Init+0x174>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a21      	ldr	r2, [pc, #132]	; (8004c8c <HAL_DMA_Init+0x1f4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d108      	bne.n	8004c1e <HAL_DMA_Init+0x186>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e007      	b.n	8004c2e <HAL_DMA_Init+0x196>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0201 	bic.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c2e:	e02f      	b.n	8004c90 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c30:	f7fe f924 	bl	8002e7c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b05      	cmp	r3, #5
 8004c3c:	d928      	bls.n	8004c90 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2203      	movs	r2, #3
 8004c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e246      	b.n	80050de <HAL_DMA_Init+0x646>
 8004c50:	40020010 	.word	0x40020010
 8004c54:	40020028 	.word	0x40020028
 8004c58:	40020040 	.word	0x40020040
 8004c5c:	40020058 	.word	0x40020058
 8004c60:	40020070 	.word	0x40020070
 8004c64:	40020088 	.word	0x40020088
 8004c68:	400200a0 	.word	0x400200a0
 8004c6c:	400200b8 	.word	0x400200b8
 8004c70:	40020410 	.word	0x40020410
 8004c74:	40020428 	.word	0x40020428
 8004c78:	40020440 	.word	0x40020440
 8004c7c:	40020458 	.word	0x40020458
 8004c80:	40020470 	.word	0x40020470
 8004c84:	40020488 	.word	0x40020488
 8004c88:	400204a0 	.word	0x400204a0
 8004c8c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1c8      	bne.n	8004c30 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4b83      	ldr	r3, [pc, #524]	; (8004eb8 <HAL_DMA_Init+0x420>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004cb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d107      	bne.n	8004cf4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	4313      	orrs	r3, r2
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004cf4:	4b71      	ldr	r3, [pc, #452]	; (8004ebc <HAL_DMA_Init+0x424>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4b71      	ldr	r3, [pc, #452]	; (8004ec0 <HAL_DMA_Init+0x428>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d00:	d328      	bcc.n	8004d54 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b28      	cmp	r3, #40	; 0x28
 8004d08:	d903      	bls.n	8004d12 <HAL_DMA_Init+0x27a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d10:	d917      	bls.n	8004d42 <HAL_DMA_Init+0x2aa>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b3e      	cmp	r3, #62	; 0x3e
 8004d18:	d903      	bls.n	8004d22 <HAL_DMA_Init+0x28a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b42      	cmp	r3, #66	; 0x42
 8004d20:	d90f      	bls.n	8004d42 <HAL_DMA_Init+0x2aa>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b46      	cmp	r3, #70	; 0x46
 8004d28:	d903      	bls.n	8004d32 <HAL_DMA_Init+0x29a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b48      	cmp	r3, #72	; 0x48
 8004d30:	d907      	bls.n	8004d42 <HAL_DMA_Init+0x2aa>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b4e      	cmp	r3, #78	; 0x4e
 8004d38:	d905      	bls.n	8004d46 <HAL_DMA_Init+0x2ae>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b52      	cmp	r3, #82	; 0x52
 8004d40:	d801      	bhi.n	8004d46 <HAL_DMA_Init+0x2ae>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_DMA_Init+0x2b0>
 8004d46:	2300      	movs	r3, #0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d52:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0307 	bic.w	r3, r3, #7
 8004d6a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d117      	bne.n	8004dae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00e      	beq.n	8004dae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f001 ff2b 	bl	8006bec <DMA_CheckFifoParam>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2240      	movs	r2, #64	; 0x40
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e197      	b.n	80050de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f001 fe66 	bl	8006a88 <DMA_CalcBaseAndBitshift>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	223f      	movs	r2, #63	; 0x3f
 8004dca:	409a      	lsls	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	e0cd      	b.n	8004f6e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a3b      	ldr	r2, [pc, #236]	; (8004ec4 <HAL_DMA_Init+0x42c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d022      	beq.n	8004e22 <HAL_DMA_Init+0x38a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a39      	ldr	r2, [pc, #228]	; (8004ec8 <HAL_DMA_Init+0x430>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01d      	beq.n	8004e22 <HAL_DMA_Init+0x38a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a38      	ldr	r2, [pc, #224]	; (8004ecc <HAL_DMA_Init+0x434>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d018      	beq.n	8004e22 <HAL_DMA_Init+0x38a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a36      	ldr	r2, [pc, #216]	; (8004ed0 <HAL_DMA_Init+0x438>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <HAL_DMA_Init+0x38a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a35      	ldr	r2, [pc, #212]	; (8004ed4 <HAL_DMA_Init+0x43c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <HAL_DMA_Init+0x38a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a33      	ldr	r2, [pc, #204]	; (8004ed8 <HAL_DMA_Init+0x440>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d009      	beq.n	8004e22 <HAL_DMA_Init+0x38a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a32      	ldr	r2, [pc, #200]	; (8004edc <HAL_DMA_Init+0x444>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_DMA_Init+0x38a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a30      	ldr	r2, [pc, #192]	; (8004ee0 <HAL_DMA_Init+0x448>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d101      	bne.n	8004e26 <HAL_DMA_Init+0x38e>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <HAL_DMA_Init+0x390>
 8004e26:	2300      	movs	r3, #0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 8097 	beq.w	8004f5c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a24      	ldr	r2, [pc, #144]	; (8004ec4 <HAL_DMA_Init+0x42c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d021      	beq.n	8004e7c <HAL_DMA_Init+0x3e4>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a22      	ldr	r2, [pc, #136]	; (8004ec8 <HAL_DMA_Init+0x430>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01c      	beq.n	8004e7c <HAL_DMA_Init+0x3e4>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a21      	ldr	r2, [pc, #132]	; (8004ecc <HAL_DMA_Init+0x434>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d017      	beq.n	8004e7c <HAL_DMA_Init+0x3e4>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <HAL_DMA_Init+0x438>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d012      	beq.n	8004e7c <HAL_DMA_Init+0x3e4>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ed4 <HAL_DMA_Init+0x43c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00d      	beq.n	8004e7c <HAL_DMA_Init+0x3e4>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1c      	ldr	r2, [pc, #112]	; (8004ed8 <HAL_DMA_Init+0x440>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d008      	beq.n	8004e7c <HAL_DMA_Init+0x3e4>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1b      	ldr	r2, [pc, #108]	; (8004edc <HAL_DMA_Init+0x444>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <HAL_DMA_Init+0x3e4>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <HAL_DMA_Init+0x448>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <HAL_DMA_Init+0x44c>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b40      	cmp	r3, #64	; 0x40
 8004ea4:	d020      	beq.n	8004ee8 <HAL_DMA_Init+0x450>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b80      	cmp	r3, #128	; 0x80
 8004eac:	d102      	bne.n	8004eb4 <HAL_DMA_Init+0x41c>
 8004eae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004eb2:	e01a      	b.n	8004eea <HAL_DMA_Init+0x452>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e018      	b.n	8004eea <HAL_DMA_Init+0x452>
 8004eb8:	fe10803f 	.word	0xfe10803f
 8004ebc:	5c001000 	.word	0x5c001000
 8004ec0:	ffff0000 	.word	0xffff0000
 8004ec4:	58025408 	.word	0x58025408
 8004ec8:	5802541c 	.word	0x5802541c
 8004ecc:	58025430 	.word	0x58025430
 8004ed0:	58025444 	.word	0x58025444
 8004ed4:	58025458 	.word	0x58025458
 8004ed8:	5802546c 	.word	0x5802546c
 8004edc:	58025480 	.word	0x58025480
 8004ee0:	58025494 	.word	0x58025494
 8004ee4:	fffe000f 	.word	0xfffe000f
 8004ee8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68d2      	ldr	r2, [r2, #12]
 8004eee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ef0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ef8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f18:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4b6e      	ldr	r3, [pc, #440]	; (80050e8 <HAL_DMA_Init+0x650>)
 8004f30:	4413      	add	r3, r2
 8004f32:	4a6e      	ldr	r2, [pc, #440]	; (80050ec <HAL_DMA_Init+0x654>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	009a      	lsls	r2, r3, #2
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 fda1 	bl	8006a88 <DMA_CalcBaseAndBitshift>
 8004f46:	4603      	mov	r3, r0
 8004f48:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	2201      	movs	r2, #1
 8004f54:	409a      	lsls	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	605a      	str	r2, [r3, #4]
 8004f5a:	e008      	b.n	8004f6e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2240      	movs	r2, #64	; 0x40
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2203      	movs	r2, #3
 8004f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e0b7      	b.n	80050de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a5f      	ldr	r2, [pc, #380]	; (80050f0 <HAL_DMA_Init+0x658>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d072      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a5d      	ldr	r2, [pc, #372]	; (80050f4 <HAL_DMA_Init+0x65c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d06d      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a5c      	ldr	r2, [pc, #368]	; (80050f8 <HAL_DMA_Init+0x660>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d068      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a5a      	ldr	r2, [pc, #360]	; (80050fc <HAL_DMA_Init+0x664>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d063      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a59      	ldr	r2, [pc, #356]	; (8005100 <HAL_DMA_Init+0x668>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d05e      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a57      	ldr	r2, [pc, #348]	; (8005104 <HAL_DMA_Init+0x66c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d059      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a56      	ldr	r2, [pc, #344]	; (8005108 <HAL_DMA_Init+0x670>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d054      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a54      	ldr	r2, [pc, #336]	; (800510c <HAL_DMA_Init+0x674>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d04f      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a53      	ldr	r2, [pc, #332]	; (8005110 <HAL_DMA_Init+0x678>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d04a      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a51      	ldr	r2, [pc, #324]	; (8005114 <HAL_DMA_Init+0x67c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d045      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a50      	ldr	r2, [pc, #320]	; (8005118 <HAL_DMA_Init+0x680>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d040      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a4e      	ldr	r2, [pc, #312]	; (800511c <HAL_DMA_Init+0x684>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d03b      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a4d      	ldr	r2, [pc, #308]	; (8005120 <HAL_DMA_Init+0x688>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d036      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a4b      	ldr	r2, [pc, #300]	; (8005124 <HAL_DMA_Init+0x68c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d031      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a4a      	ldr	r2, [pc, #296]	; (8005128 <HAL_DMA_Init+0x690>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d02c      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a48      	ldr	r2, [pc, #288]	; (800512c <HAL_DMA_Init+0x694>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d027      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a47      	ldr	r2, [pc, #284]	; (8005130 <HAL_DMA_Init+0x698>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d022      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a45      	ldr	r2, [pc, #276]	; (8005134 <HAL_DMA_Init+0x69c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01d      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a44      	ldr	r2, [pc, #272]	; (8005138 <HAL_DMA_Init+0x6a0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d018      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a42      	ldr	r2, [pc, #264]	; (800513c <HAL_DMA_Init+0x6a4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a41      	ldr	r2, [pc, #260]	; (8005140 <HAL_DMA_Init+0x6a8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00e      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a3f      	ldr	r2, [pc, #252]	; (8005144 <HAL_DMA_Init+0x6ac>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d009      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a3e      	ldr	r2, [pc, #248]	; (8005148 <HAL_DMA_Init+0x6b0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d004      	beq.n	800505e <HAL_DMA_Init+0x5c6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a3c      	ldr	r2, [pc, #240]	; (800514c <HAL_DMA_Init+0x6b4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d101      	bne.n	8005062 <HAL_DMA_Init+0x5ca>
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <HAL_DMA_Init+0x5cc>
 8005062:	2300      	movs	r3, #0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d032      	beq.n	80050ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f001 fe3b 	bl	8006ce4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d102      	bne.n	800507c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005090:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d010      	beq.n	80050bc <HAL_DMA_Init+0x624>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d80c      	bhi.n	80050bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 feb8 	bl	8006e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	e008      	b.n	80050ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	a7fdabf8 	.word	0xa7fdabf8
 80050ec:	cccccccd 	.word	0xcccccccd
 80050f0:	40020010 	.word	0x40020010
 80050f4:	40020028 	.word	0x40020028
 80050f8:	40020040 	.word	0x40020040
 80050fc:	40020058 	.word	0x40020058
 8005100:	40020070 	.word	0x40020070
 8005104:	40020088 	.word	0x40020088
 8005108:	400200a0 	.word	0x400200a0
 800510c:	400200b8 	.word	0x400200b8
 8005110:	40020410 	.word	0x40020410
 8005114:	40020428 	.word	0x40020428
 8005118:	40020440 	.word	0x40020440
 800511c:	40020458 	.word	0x40020458
 8005120:	40020470 	.word	0x40020470
 8005124:	40020488 	.word	0x40020488
 8005128:	400204a0 	.word	0x400204a0
 800512c:	400204b8 	.word	0x400204b8
 8005130:	58025408 	.word	0x58025408
 8005134:	5802541c 	.word	0x5802541c
 8005138:	58025430 	.word	0x58025430
 800513c:	58025444 	.word	0x58025444
 8005140:	58025458 	.word	0x58025458
 8005144:	5802546c 	.word	0x5802546c
 8005148:	58025480 	.word	0x58025480
 800514c:	58025494 	.word	0x58025494

08005150 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005158:	f7fd fe90 	bl	8002e7c <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e2dc      	b.n	8005722 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d008      	beq.n	8005186 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2280      	movs	r2, #128	; 0x80
 8005178:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e2cd      	b.n	8005722 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a76      	ldr	r2, [pc, #472]	; (8005364 <HAL_DMA_Abort+0x214>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d04a      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a74      	ldr	r2, [pc, #464]	; (8005368 <HAL_DMA_Abort+0x218>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d045      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a73      	ldr	r2, [pc, #460]	; (800536c <HAL_DMA_Abort+0x21c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d040      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a71      	ldr	r2, [pc, #452]	; (8005370 <HAL_DMA_Abort+0x220>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d03b      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a70      	ldr	r2, [pc, #448]	; (8005374 <HAL_DMA_Abort+0x224>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d036      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a6e      	ldr	r2, [pc, #440]	; (8005378 <HAL_DMA_Abort+0x228>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d031      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a6d      	ldr	r2, [pc, #436]	; (800537c <HAL_DMA_Abort+0x22c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d02c      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a6b      	ldr	r2, [pc, #428]	; (8005380 <HAL_DMA_Abort+0x230>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d027      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a6a      	ldr	r2, [pc, #424]	; (8005384 <HAL_DMA_Abort+0x234>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d022      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a68      	ldr	r2, [pc, #416]	; (8005388 <HAL_DMA_Abort+0x238>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d01d      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a67      	ldr	r2, [pc, #412]	; (800538c <HAL_DMA_Abort+0x23c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d018      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a65      	ldr	r2, [pc, #404]	; (8005390 <HAL_DMA_Abort+0x240>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a64      	ldr	r2, [pc, #400]	; (8005394 <HAL_DMA_Abort+0x244>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00e      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a62      	ldr	r2, [pc, #392]	; (8005398 <HAL_DMA_Abort+0x248>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d009      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a61      	ldr	r2, [pc, #388]	; (800539c <HAL_DMA_Abort+0x24c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <HAL_DMA_Abort+0xd6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a5f      	ldr	r2, [pc, #380]	; (80053a0 <HAL_DMA_Abort+0x250>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d101      	bne.n	800522a <HAL_DMA_Abort+0xda>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <HAL_DMA_Abort+0xdc>
 800522a:	2300      	movs	r3, #0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d013      	beq.n	8005258 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 021e 	bic.w	r2, r2, #30
 800523e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695a      	ldr	r2, [r3, #20]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800524e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e00a      	b.n	800526e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 020e 	bic.w	r2, r2, #14
 8005266:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a3c      	ldr	r2, [pc, #240]	; (8005364 <HAL_DMA_Abort+0x214>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d072      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a3a      	ldr	r2, [pc, #232]	; (8005368 <HAL_DMA_Abort+0x218>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d06d      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a39      	ldr	r2, [pc, #228]	; (800536c <HAL_DMA_Abort+0x21c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d068      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a37      	ldr	r2, [pc, #220]	; (8005370 <HAL_DMA_Abort+0x220>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d063      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a36      	ldr	r2, [pc, #216]	; (8005374 <HAL_DMA_Abort+0x224>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d05e      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a34      	ldr	r2, [pc, #208]	; (8005378 <HAL_DMA_Abort+0x228>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d059      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a33      	ldr	r2, [pc, #204]	; (800537c <HAL_DMA_Abort+0x22c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d054      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a31      	ldr	r2, [pc, #196]	; (8005380 <HAL_DMA_Abort+0x230>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d04f      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a30      	ldr	r2, [pc, #192]	; (8005384 <HAL_DMA_Abort+0x234>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d04a      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a2e      	ldr	r2, [pc, #184]	; (8005388 <HAL_DMA_Abort+0x238>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d045      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a2d      	ldr	r2, [pc, #180]	; (800538c <HAL_DMA_Abort+0x23c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d040      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a2b      	ldr	r2, [pc, #172]	; (8005390 <HAL_DMA_Abort+0x240>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d03b      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a2a      	ldr	r2, [pc, #168]	; (8005394 <HAL_DMA_Abort+0x244>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d036      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a28      	ldr	r2, [pc, #160]	; (8005398 <HAL_DMA_Abort+0x248>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d031      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a27      	ldr	r2, [pc, #156]	; (800539c <HAL_DMA_Abort+0x24c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d02c      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a25      	ldr	r2, [pc, #148]	; (80053a0 <HAL_DMA_Abort+0x250>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d027      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a24      	ldr	r2, [pc, #144]	; (80053a4 <HAL_DMA_Abort+0x254>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d022      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a22      	ldr	r2, [pc, #136]	; (80053a8 <HAL_DMA_Abort+0x258>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01d      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a21      	ldr	r2, [pc, #132]	; (80053ac <HAL_DMA_Abort+0x25c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d018      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1f      	ldr	r2, [pc, #124]	; (80053b0 <HAL_DMA_Abort+0x260>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1e      	ldr	r2, [pc, #120]	; (80053b4 <HAL_DMA_Abort+0x264>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00e      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1c      	ldr	r2, [pc, #112]	; (80053b8 <HAL_DMA_Abort+0x268>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d009      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1b      	ldr	r2, [pc, #108]	; (80053bc <HAL_DMA_Abort+0x26c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_DMA_Abort+0x20e>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <HAL_DMA_Abort+0x270>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d132      	bne.n	80053c4 <HAL_DMA_Abort+0x274>
 800535e:	2301      	movs	r3, #1
 8005360:	e031      	b.n	80053c6 <HAL_DMA_Abort+0x276>
 8005362:	bf00      	nop
 8005364:	40020010 	.word	0x40020010
 8005368:	40020028 	.word	0x40020028
 800536c:	40020040 	.word	0x40020040
 8005370:	40020058 	.word	0x40020058
 8005374:	40020070 	.word	0x40020070
 8005378:	40020088 	.word	0x40020088
 800537c:	400200a0 	.word	0x400200a0
 8005380:	400200b8 	.word	0x400200b8
 8005384:	40020410 	.word	0x40020410
 8005388:	40020428 	.word	0x40020428
 800538c:	40020440 	.word	0x40020440
 8005390:	40020458 	.word	0x40020458
 8005394:	40020470 	.word	0x40020470
 8005398:	40020488 	.word	0x40020488
 800539c:	400204a0 	.word	0x400204a0
 80053a0:	400204b8 	.word	0x400204b8
 80053a4:	58025408 	.word	0x58025408
 80053a8:	5802541c 	.word	0x5802541c
 80053ac:	58025430 	.word	0x58025430
 80053b0:	58025444 	.word	0x58025444
 80053b4:	58025458 	.word	0x58025458
 80053b8:	5802546c 	.word	0x5802546c
 80053bc:	58025480 	.word	0x58025480
 80053c0:	58025494 	.word	0x58025494
 80053c4:	2300      	movs	r3, #0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6d      	ldr	r2, [pc, #436]	; (8005594 <HAL_DMA_Abort+0x444>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d04a      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a6b      	ldr	r2, [pc, #428]	; (8005598 <HAL_DMA_Abort+0x448>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d045      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a6a      	ldr	r2, [pc, #424]	; (800559c <HAL_DMA_Abort+0x44c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d040      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a68      	ldr	r2, [pc, #416]	; (80055a0 <HAL_DMA_Abort+0x450>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d03b      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a67      	ldr	r2, [pc, #412]	; (80055a4 <HAL_DMA_Abort+0x454>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d036      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a65      	ldr	r2, [pc, #404]	; (80055a8 <HAL_DMA_Abort+0x458>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d031      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a64      	ldr	r2, [pc, #400]	; (80055ac <HAL_DMA_Abort+0x45c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d02c      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a62      	ldr	r2, [pc, #392]	; (80055b0 <HAL_DMA_Abort+0x460>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d027      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a61      	ldr	r2, [pc, #388]	; (80055b4 <HAL_DMA_Abort+0x464>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d022      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a5f      	ldr	r2, [pc, #380]	; (80055b8 <HAL_DMA_Abort+0x468>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d01d      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a5e      	ldr	r2, [pc, #376]	; (80055bc <HAL_DMA_Abort+0x46c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d018      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a5c      	ldr	r2, [pc, #368]	; (80055c0 <HAL_DMA_Abort+0x470>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a5b      	ldr	r2, [pc, #364]	; (80055c4 <HAL_DMA_Abort+0x474>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00e      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a59      	ldr	r2, [pc, #356]	; (80055c8 <HAL_DMA_Abort+0x478>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d009      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a58      	ldr	r2, [pc, #352]	; (80055cc <HAL_DMA_Abort+0x47c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d004      	beq.n	800547a <HAL_DMA_Abort+0x32a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a56      	ldr	r2, [pc, #344]	; (80055d0 <HAL_DMA_Abort+0x480>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d108      	bne.n	800548c <HAL_DMA_Abort+0x33c>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e007      	b.n	800549c <HAL_DMA_Abort+0x34c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800549c:	e013      	b.n	80054c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800549e:	f7fd fced 	bl	8002e7c <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	d90c      	bls.n	80054c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2203      	movs	r2, #3
 80054be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e12d      	b.n	8005722 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e5      	bne.n	800549e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a2f      	ldr	r2, [pc, #188]	; (8005594 <HAL_DMA_Abort+0x444>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d04a      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2d      	ldr	r2, [pc, #180]	; (8005598 <HAL_DMA_Abort+0x448>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d045      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a2c      	ldr	r2, [pc, #176]	; (800559c <HAL_DMA_Abort+0x44c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d040      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a2a      	ldr	r2, [pc, #168]	; (80055a0 <HAL_DMA_Abort+0x450>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d03b      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a29      	ldr	r2, [pc, #164]	; (80055a4 <HAL_DMA_Abort+0x454>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d036      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a27      	ldr	r2, [pc, #156]	; (80055a8 <HAL_DMA_Abort+0x458>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d031      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a26      	ldr	r2, [pc, #152]	; (80055ac <HAL_DMA_Abort+0x45c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d02c      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a24      	ldr	r2, [pc, #144]	; (80055b0 <HAL_DMA_Abort+0x460>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d027      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a23      	ldr	r2, [pc, #140]	; (80055b4 <HAL_DMA_Abort+0x464>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d022      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a21      	ldr	r2, [pc, #132]	; (80055b8 <HAL_DMA_Abort+0x468>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d01d      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a20      	ldr	r2, [pc, #128]	; (80055bc <HAL_DMA_Abort+0x46c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d018      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1e      	ldr	r2, [pc, #120]	; (80055c0 <HAL_DMA_Abort+0x470>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d013      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1d      	ldr	r2, [pc, #116]	; (80055c4 <HAL_DMA_Abort+0x474>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00e      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1b      	ldr	r2, [pc, #108]	; (80055c8 <HAL_DMA_Abort+0x478>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d009      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1a      	ldr	r2, [pc, #104]	; (80055cc <HAL_DMA_Abort+0x47c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d004      	beq.n	8005572 <HAL_DMA_Abort+0x422>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <HAL_DMA_Abort+0x480>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d101      	bne.n	8005576 <HAL_DMA_Abort+0x426>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <HAL_DMA_Abort+0x428>
 8005576:	2300      	movs	r3, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d02b      	beq.n	80055d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005580:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	223f      	movs	r2, #63	; 0x3f
 800558c:	409a      	lsls	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	609a      	str	r2, [r3, #8]
 8005592:	e02a      	b.n	80055ea <HAL_DMA_Abort+0x49a>
 8005594:	40020010 	.word	0x40020010
 8005598:	40020028 	.word	0x40020028
 800559c:	40020040 	.word	0x40020040
 80055a0:	40020058 	.word	0x40020058
 80055a4:	40020070 	.word	0x40020070
 80055a8:	40020088 	.word	0x40020088
 80055ac:	400200a0 	.word	0x400200a0
 80055b0:	400200b8 	.word	0x400200b8
 80055b4:	40020410 	.word	0x40020410
 80055b8:	40020428 	.word	0x40020428
 80055bc:	40020440 	.word	0x40020440
 80055c0:	40020458 	.word	0x40020458
 80055c4:	40020470 	.word	0x40020470
 80055c8:	40020488 	.word	0x40020488
 80055cc:	400204a0 	.word	0x400204a0
 80055d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2201      	movs	r2, #1
 80055e4:	409a      	lsls	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a4f      	ldr	r2, [pc, #316]	; (800572c <HAL_DMA_Abort+0x5dc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d072      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a4d      	ldr	r2, [pc, #308]	; (8005730 <HAL_DMA_Abort+0x5e0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d06d      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a4c      	ldr	r2, [pc, #304]	; (8005734 <HAL_DMA_Abort+0x5e4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d068      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a4a      	ldr	r2, [pc, #296]	; (8005738 <HAL_DMA_Abort+0x5e8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d063      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a49      	ldr	r2, [pc, #292]	; (800573c <HAL_DMA_Abort+0x5ec>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d05e      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a47      	ldr	r2, [pc, #284]	; (8005740 <HAL_DMA_Abort+0x5f0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d059      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a46      	ldr	r2, [pc, #280]	; (8005744 <HAL_DMA_Abort+0x5f4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d054      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a44      	ldr	r2, [pc, #272]	; (8005748 <HAL_DMA_Abort+0x5f8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d04f      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a43      	ldr	r2, [pc, #268]	; (800574c <HAL_DMA_Abort+0x5fc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d04a      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a41      	ldr	r2, [pc, #260]	; (8005750 <HAL_DMA_Abort+0x600>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d045      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a40      	ldr	r2, [pc, #256]	; (8005754 <HAL_DMA_Abort+0x604>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d040      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a3e      	ldr	r2, [pc, #248]	; (8005758 <HAL_DMA_Abort+0x608>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d03b      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a3d      	ldr	r2, [pc, #244]	; (800575c <HAL_DMA_Abort+0x60c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d036      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a3b      	ldr	r2, [pc, #236]	; (8005760 <HAL_DMA_Abort+0x610>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d031      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a3a      	ldr	r2, [pc, #232]	; (8005764 <HAL_DMA_Abort+0x614>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d02c      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a38      	ldr	r2, [pc, #224]	; (8005768 <HAL_DMA_Abort+0x618>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d027      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a37      	ldr	r2, [pc, #220]	; (800576c <HAL_DMA_Abort+0x61c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a35      	ldr	r2, [pc, #212]	; (8005770 <HAL_DMA_Abort+0x620>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01d      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a34      	ldr	r2, [pc, #208]	; (8005774 <HAL_DMA_Abort+0x624>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a32      	ldr	r2, [pc, #200]	; (8005778 <HAL_DMA_Abort+0x628>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a31      	ldr	r2, [pc, #196]	; (800577c <HAL_DMA_Abort+0x62c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a2f      	ldr	r2, [pc, #188]	; (8005780 <HAL_DMA_Abort+0x630>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2e      	ldr	r2, [pc, #184]	; (8005784 <HAL_DMA_Abort+0x634>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_DMA_Abort+0x58a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2c      	ldr	r2, [pc, #176]	; (8005788 <HAL_DMA_Abort+0x638>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <HAL_DMA_Abort+0x58e>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <HAL_DMA_Abort+0x590>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d015      	beq.n	8005710 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00c      	beq.n	8005710 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005704:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800570e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40020010 	.word	0x40020010
 8005730:	40020028 	.word	0x40020028
 8005734:	40020040 	.word	0x40020040
 8005738:	40020058 	.word	0x40020058
 800573c:	40020070 	.word	0x40020070
 8005740:	40020088 	.word	0x40020088
 8005744:	400200a0 	.word	0x400200a0
 8005748:	400200b8 	.word	0x400200b8
 800574c:	40020410 	.word	0x40020410
 8005750:	40020428 	.word	0x40020428
 8005754:	40020440 	.word	0x40020440
 8005758:	40020458 	.word	0x40020458
 800575c:	40020470 	.word	0x40020470
 8005760:	40020488 	.word	0x40020488
 8005764:	400204a0 	.word	0x400204a0
 8005768:	400204b8 	.word	0x400204b8
 800576c:	58025408 	.word	0x58025408
 8005770:	5802541c 	.word	0x5802541c
 8005774:	58025430 	.word	0x58025430
 8005778:	58025444 	.word	0x58025444
 800577c:	58025458 	.word	0x58025458
 8005780:	5802546c 	.word	0x5802546c
 8005784:	58025480 	.word	0x58025480
 8005788:	58025494 	.word	0x58025494

0800578c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e237      	b.n	8005c0e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d004      	beq.n	80057b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2280      	movs	r2, #128	; 0x80
 80057ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e22c      	b.n	8005c0e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a5c      	ldr	r2, [pc, #368]	; (800592c <HAL_DMA_Abort_IT+0x1a0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d04a      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a5b      	ldr	r2, [pc, #364]	; (8005930 <HAL_DMA_Abort_IT+0x1a4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d045      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a59      	ldr	r2, [pc, #356]	; (8005934 <HAL_DMA_Abort_IT+0x1a8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d040      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a58      	ldr	r2, [pc, #352]	; (8005938 <HAL_DMA_Abort_IT+0x1ac>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d03b      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a56      	ldr	r2, [pc, #344]	; (800593c <HAL_DMA_Abort_IT+0x1b0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d036      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a55      	ldr	r2, [pc, #340]	; (8005940 <HAL_DMA_Abort_IT+0x1b4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d031      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a53      	ldr	r2, [pc, #332]	; (8005944 <HAL_DMA_Abort_IT+0x1b8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d02c      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a52      	ldr	r2, [pc, #328]	; (8005948 <HAL_DMA_Abort_IT+0x1bc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d027      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a50      	ldr	r2, [pc, #320]	; (800594c <HAL_DMA_Abort_IT+0x1c0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d022      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a4f      	ldr	r2, [pc, #316]	; (8005950 <HAL_DMA_Abort_IT+0x1c4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d01d      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a4d      	ldr	r2, [pc, #308]	; (8005954 <HAL_DMA_Abort_IT+0x1c8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a4c      	ldr	r2, [pc, #304]	; (8005958 <HAL_DMA_Abort_IT+0x1cc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a4a      	ldr	r2, [pc, #296]	; (800595c <HAL_DMA_Abort_IT+0x1d0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a49      	ldr	r2, [pc, #292]	; (8005960 <HAL_DMA_Abort_IT+0x1d4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a47      	ldr	r2, [pc, #284]	; (8005964 <HAL_DMA_Abort_IT+0x1d8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_DMA_Abort_IT+0xc8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a46      	ldr	r2, [pc, #280]	; (8005968 <HAL_DMA_Abort_IT+0x1dc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d101      	bne.n	8005858 <HAL_DMA_Abort_IT+0xcc>
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <HAL_DMA_Abort_IT+0xce>
 8005858:	2300      	movs	r3, #0
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8086 	beq.w	800596c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2204      	movs	r2, #4
 8005864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a2f      	ldr	r2, [pc, #188]	; (800592c <HAL_DMA_Abort_IT+0x1a0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d04a      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a2e      	ldr	r2, [pc, #184]	; (8005930 <HAL_DMA_Abort_IT+0x1a4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d045      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a2c      	ldr	r2, [pc, #176]	; (8005934 <HAL_DMA_Abort_IT+0x1a8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d040      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2b      	ldr	r2, [pc, #172]	; (8005938 <HAL_DMA_Abort_IT+0x1ac>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d03b      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a29      	ldr	r2, [pc, #164]	; (800593c <HAL_DMA_Abort_IT+0x1b0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d036      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a28      	ldr	r2, [pc, #160]	; (8005940 <HAL_DMA_Abort_IT+0x1b4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d031      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a26      	ldr	r2, [pc, #152]	; (8005944 <HAL_DMA_Abort_IT+0x1b8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d02c      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a25      	ldr	r2, [pc, #148]	; (8005948 <HAL_DMA_Abort_IT+0x1bc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d027      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a23      	ldr	r2, [pc, #140]	; (800594c <HAL_DMA_Abort_IT+0x1c0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d022      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a22      	ldr	r2, [pc, #136]	; (8005950 <HAL_DMA_Abort_IT+0x1c4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d01d      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a20      	ldr	r2, [pc, #128]	; (8005954 <HAL_DMA_Abort_IT+0x1c8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d018      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1f      	ldr	r2, [pc, #124]	; (8005958 <HAL_DMA_Abort_IT+0x1cc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d013      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1d      	ldr	r2, [pc, #116]	; (800595c <HAL_DMA_Abort_IT+0x1d0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00e      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <HAL_DMA_Abort_IT+0x1d4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d009      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1a      	ldr	r2, [pc, #104]	; (8005964 <HAL_DMA_Abort_IT+0x1d8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d004      	beq.n	8005908 <HAL_DMA_Abort_IT+0x17c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a19      	ldr	r2, [pc, #100]	; (8005968 <HAL_DMA_Abort_IT+0x1dc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d108      	bne.n	800591a <HAL_DMA_Abort_IT+0x18e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e178      	b.n	8005c0c <HAL_DMA_Abort_IT+0x480>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0201 	bic.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e16f      	b.n	8005c0c <HAL_DMA_Abort_IT+0x480>
 800592c:	40020010 	.word	0x40020010
 8005930:	40020028 	.word	0x40020028
 8005934:	40020040 	.word	0x40020040
 8005938:	40020058 	.word	0x40020058
 800593c:	40020070 	.word	0x40020070
 8005940:	40020088 	.word	0x40020088
 8005944:	400200a0 	.word	0x400200a0
 8005948:	400200b8 	.word	0x400200b8
 800594c:	40020410 	.word	0x40020410
 8005950:	40020428 	.word	0x40020428
 8005954:	40020440 	.word	0x40020440
 8005958:	40020458 	.word	0x40020458
 800595c:	40020470 	.word	0x40020470
 8005960:	40020488 	.word	0x40020488
 8005964:	400204a0 	.word	0x400204a0
 8005968:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 020e 	bic.w	r2, r2, #14
 800597a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a6c      	ldr	r2, [pc, #432]	; (8005b34 <HAL_DMA_Abort_IT+0x3a8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d04a      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a6b      	ldr	r2, [pc, #428]	; (8005b38 <HAL_DMA_Abort_IT+0x3ac>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d045      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a69      	ldr	r2, [pc, #420]	; (8005b3c <HAL_DMA_Abort_IT+0x3b0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d040      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a68      	ldr	r2, [pc, #416]	; (8005b40 <HAL_DMA_Abort_IT+0x3b4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d03b      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a66      	ldr	r2, [pc, #408]	; (8005b44 <HAL_DMA_Abort_IT+0x3b8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d036      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a65      	ldr	r2, [pc, #404]	; (8005b48 <HAL_DMA_Abort_IT+0x3bc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d031      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a63      	ldr	r2, [pc, #396]	; (8005b4c <HAL_DMA_Abort_IT+0x3c0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d02c      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a62      	ldr	r2, [pc, #392]	; (8005b50 <HAL_DMA_Abort_IT+0x3c4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d027      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a60      	ldr	r2, [pc, #384]	; (8005b54 <HAL_DMA_Abort_IT+0x3c8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d022      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a5f      	ldr	r2, [pc, #380]	; (8005b58 <HAL_DMA_Abort_IT+0x3cc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d01d      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a5d      	ldr	r2, [pc, #372]	; (8005b5c <HAL_DMA_Abort_IT+0x3d0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d018      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a5c      	ldr	r2, [pc, #368]	; (8005b60 <HAL_DMA_Abort_IT+0x3d4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d013      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a5a      	ldr	r2, [pc, #360]	; (8005b64 <HAL_DMA_Abort_IT+0x3d8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00e      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a59      	ldr	r2, [pc, #356]	; (8005b68 <HAL_DMA_Abort_IT+0x3dc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a57      	ldr	r2, [pc, #348]	; (8005b6c <HAL_DMA_Abort_IT+0x3e0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x290>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a56      	ldr	r2, [pc, #344]	; (8005b70 <HAL_DMA_Abort_IT+0x3e4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d108      	bne.n	8005a2e <HAL_DMA_Abort_IT+0x2a2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0201 	bic.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	e007      	b.n	8005a3e <HAL_DMA_Abort_IT+0x2b2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0201 	bic.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a3c      	ldr	r2, [pc, #240]	; (8005b34 <HAL_DMA_Abort_IT+0x3a8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d072      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a3a      	ldr	r2, [pc, #232]	; (8005b38 <HAL_DMA_Abort_IT+0x3ac>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d06d      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a39      	ldr	r2, [pc, #228]	; (8005b3c <HAL_DMA_Abort_IT+0x3b0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d068      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a37      	ldr	r2, [pc, #220]	; (8005b40 <HAL_DMA_Abort_IT+0x3b4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d063      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a36      	ldr	r2, [pc, #216]	; (8005b44 <HAL_DMA_Abort_IT+0x3b8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d05e      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a34      	ldr	r2, [pc, #208]	; (8005b48 <HAL_DMA_Abort_IT+0x3bc>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d059      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a33      	ldr	r2, [pc, #204]	; (8005b4c <HAL_DMA_Abort_IT+0x3c0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d054      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a31      	ldr	r2, [pc, #196]	; (8005b50 <HAL_DMA_Abort_IT+0x3c4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d04f      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a30      	ldr	r2, [pc, #192]	; (8005b54 <HAL_DMA_Abort_IT+0x3c8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d04a      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a2e      	ldr	r2, [pc, #184]	; (8005b58 <HAL_DMA_Abort_IT+0x3cc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d045      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a2d      	ldr	r2, [pc, #180]	; (8005b5c <HAL_DMA_Abort_IT+0x3d0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d040      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a2b      	ldr	r2, [pc, #172]	; (8005b60 <HAL_DMA_Abort_IT+0x3d4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d03b      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <HAL_DMA_Abort_IT+0x3d8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d036      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a28      	ldr	r2, [pc, #160]	; (8005b68 <HAL_DMA_Abort_IT+0x3dc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d031      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a27      	ldr	r2, [pc, #156]	; (8005b6c <HAL_DMA_Abort_IT+0x3e0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d02c      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a25      	ldr	r2, [pc, #148]	; (8005b70 <HAL_DMA_Abort_IT+0x3e4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d027      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a24      	ldr	r2, [pc, #144]	; (8005b74 <HAL_DMA_Abort_IT+0x3e8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d022      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a22      	ldr	r2, [pc, #136]	; (8005b78 <HAL_DMA_Abort_IT+0x3ec>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d01d      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a21      	ldr	r2, [pc, #132]	; (8005b7c <HAL_DMA_Abort_IT+0x3f0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d018      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1f      	ldr	r2, [pc, #124]	; (8005b80 <HAL_DMA_Abort_IT+0x3f4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d013      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1e      	ldr	r2, [pc, #120]	; (8005b84 <HAL_DMA_Abort_IT+0x3f8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00e      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1c      	ldr	r2, [pc, #112]	; (8005b88 <HAL_DMA_Abort_IT+0x3fc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d009      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <HAL_DMA_Abort_IT+0x400>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d004      	beq.n	8005b2e <HAL_DMA_Abort_IT+0x3a2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a19      	ldr	r2, [pc, #100]	; (8005b90 <HAL_DMA_Abort_IT+0x404>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d132      	bne.n	8005b94 <HAL_DMA_Abort_IT+0x408>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e031      	b.n	8005b96 <HAL_DMA_Abort_IT+0x40a>
 8005b32:	bf00      	nop
 8005b34:	40020010 	.word	0x40020010
 8005b38:	40020028 	.word	0x40020028
 8005b3c:	40020040 	.word	0x40020040
 8005b40:	40020058 	.word	0x40020058
 8005b44:	40020070 	.word	0x40020070
 8005b48:	40020088 	.word	0x40020088
 8005b4c:	400200a0 	.word	0x400200a0
 8005b50:	400200b8 	.word	0x400200b8
 8005b54:	40020410 	.word	0x40020410
 8005b58:	40020428 	.word	0x40020428
 8005b5c:	40020440 	.word	0x40020440
 8005b60:	40020458 	.word	0x40020458
 8005b64:	40020470 	.word	0x40020470
 8005b68:	40020488 	.word	0x40020488
 8005b6c:	400204a0 	.word	0x400204a0
 8005b70:	400204b8 	.word	0x400204b8
 8005b74:	58025408 	.word	0x58025408
 8005b78:	5802541c 	.word	0x5802541c
 8005b7c:	58025430 	.word	0x58025430
 8005b80:	58025444 	.word	0x58025444
 8005b84:	58025458 	.word	0x58025458
 8005b88:	5802546c 	.word	0x5802546c
 8005b8c:	58025480 	.word	0x58025480
 8005b90:	58025494 	.word	0x58025494
 8005b94:	2300      	movs	r3, #0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d028      	beq.n	8005bec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ba8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb4:	f003 031f 	and.w	r3, r3, #31
 8005bb8:	2201      	movs	r2, #1
 8005bba:	409a      	lsls	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bc8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00c      	beq.n	8005bec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005be0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005bea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop

08005c18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c24:	4b67      	ldr	r3, [pc, #412]	; (8005dc4 <HAL_DMA_IRQHandler+0x1ac>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a67      	ldr	r2, [pc, #412]	; (8005dc8 <HAL_DMA_IRQHandler+0x1b0>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	0a9b      	lsrs	r3, r3, #10
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a5f      	ldr	r2, [pc, #380]	; (8005dcc <HAL_DMA_IRQHandler+0x1b4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d04a      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a5d      	ldr	r2, [pc, #372]	; (8005dd0 <HAL_DMA_IRQHandler+0x1b8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d045      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a5c      	ldr	r2, [pc, #368]	; (8005dd4 <HAL_DMA_IRQHandler+0x1bc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d040      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a5a      	ldr	r2, [pc, #360]	; (8005dd8 <HAL_DMA_IRQHandler+0x1c0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d03b      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a59      	ldr	r2, [pc, #356]	; (8005ddc <HAL_DMA_IRQHandler+0x1c4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d036      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a57      	ldr	r2, [pc, #348]	; (8005de0 <HAL_DMA_IRQHandler+0x1c8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d031      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a56      	ldr	r2, [pc, #344]	; (8005de4 <HAL_DMA_IRQHandler+0x1cc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d02c      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a54      	ldr	r2, [pc, #336]	; (8005de8 <HAL_DMA_IRQHandler+0x1d0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d027      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a53      	ldr	r2, [pc, #332]	; (8005dec <HAL_DMA_IRQHandler+0x1d4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d022      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a51      	ldr	r2, [pc, #324]	; (8005df0 <HAL_DMA_IRQHandler+0x1d8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d01d      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a50      	ldr	r2, [pc, #320]	; (8005df4 <HAL_DMA_IRQHandler+0x1dc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d018      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a4e      	ldr	r2, [pc, #312]	; (8005df8 <HAL_DMA_IRQHandler+0x1e0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d013      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a4d      	ldr	r2, [pc, #308]	; (8005dfc <HAL_DMA_IRQHandler+0x1e4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00e      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a4b      	ldr	r2, [pc, #300]	; (8005e00 <HAL_DMA_IRQHandler+0x1e8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d009      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a4a      	ldr	r2, [pc, #296]	; (8005e04 <HAL_DMA_IRQHandler+0x1ec>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d004      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a48      	ldr	r2, [pc, #288]	; (8005e08 <HAL_DMA_IRQHandler+0x1f0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d101      	bne.n	8005cee <HAL_DMA_IRQHandler+0xd6>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <HAL_DMA_IRQHandler+0xd8>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 842b 	beq.w	800654c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	2208      	movs	r2, #8
 8005d00:	409a      	lsls	r2, r3
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80a2 	beq.w	8005e50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2e      	ldr	r2, [pc, #184]	; (8005dcc <HAL_DMA_IRQHandler+0x1b4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d04a      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a2d      	ldr	r2, [pc, #180]	; (8005dd0 <HAL_DMA_IRQHandler+0x1b8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d045      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2b      	ldr	r2, [pc, #172]	; (8005dd4 <HAL_DMA_IRQHandler+0x1bc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d040      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2a      	ldr	r2, [pc, #168]	; (8005dd8 <HAL_DMA_IRQHandler+0x1c0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d03b      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a28      	ldr	r2, [pc, #160]	; (8005ddc <HAL_DMA_IRQHandler+0x1c4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d036      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a27      	ldr	r2, [pc, #156]	; (8005de0 <HAL_DMA_IRQHandler+0x1c8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d031      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a25      	ldr	r2, [pc, #148]	; (8005de4 <HAL_DMA_IRQHandler+0x1cc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d02c      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a24      	ldr	r2, [pc, #144]	; (8005de8 <HAL_DMA_IRQHandler+0x1d0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d027      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a22      	ldr	r2, [pc, #136]	; (8005dec <HAL_DMA_IRQHandler+0x1d4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d022      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a21      	ldr	r2, [pc, #132]	; (8005df0 <HAL_DMA_IRQHandler+0x1d8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d01d      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1f      	ldr	r2, [pc, #124]	; (8005df4 <HAL_DMA_IRQHandler+0x1dc>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d018      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	; (8005df8 <HAL_DMA_IRQHandler+0x1e0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d013      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1c      	ldr	r2, [pc, #112]	; (8005dfc <HAL_DMA_IRQHandler+0x1e4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00e      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1b      	ldr	r2, [pc, #108]	; (8005e00 <HAL_DMA_IRQHandler+0x1e8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d009      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <HAL_DMA_IRQHandler+0x1ec>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <HAL_DMA_IRQHandler+0x1f0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d12f      	bne.n	8005e0c <HAL_DMA_IRQHandler+0x1f4>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bf14      	ite	ne
 8005dba:	2301      	movne	r3, #1
 8005dbc:	2300      	moveq	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	e02e      	b.n	8005e20 <HAL_DMA_IRQHandler+0x208>
 8005dc2:	bf00      	nop
 8005dc4:	24000000 	.word	0x24000000
 8005dc8:	1b4e81b5 	.word	0x1b4e81b5
 8005dcc:	40020010 	.word	0x40020010
 8005dd0:	40020028 	.word	0x40020028
 8005dd4:	40020040 	.word	0x40020040
 8005dd8:	40020058 	.word	0x40020058
 8005ddc:	40020070 	.word	0x40020070
 8005de0:	40020088 	.word	0x40020088
 8005de4:	400200a0 	.word	0x400200a0
 8005de8:	400200b8 	.word	0x400200b8
 8005dec:	40020410 	.word	0x40020410
 8005df0:	40020428 	.word	0x40020428
 8005df4:	40020440 	.word	0x40020440
 8005df8:	40020458 	.word	0x40020458
 8005dfc:	40020470 	.word	0x40020470
 8005e00:	40020488 	.word	0x40020488
 8005e04:	400204a0 	.word	0x400204a0
 8005e08:	400204b8 	.word	0x400204b8
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bf14      	ite	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	2300      	moveq	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d015      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0204 	bic.w	r2, r2, #4
 8005e32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e48:	f043 0201 	orr.w	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e54:	f003 031f 	and.w	r3, r3, #31
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d06e      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a69      	ldr	r2, [pc, #420]	; (8006010 <HAL_DMA_IRQHandler+0x3f8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d04a      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a67      	ldr	r2, [pc, #412]	; (8006014 <HAL_DMA_IRQHandler+0x3fc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d045      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a66      	ldr	r2, [pc, #408]	; (8006018 <HAL_DMA_IRQHandler+0x400>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d040      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a64      	ldr	r2, [pc, #400]	; (800601c <HAL_DMA_IRQHandler+0x404>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d03b      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a63      	ldr	r2, [pc, #396]	; (8006020 <HAL_DMA_IRQHandler+0x408>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d036      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a61      	ldr	r2, [pc, #388]	; (8006024 <HAL_DMA_IRQHandler+0x40c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d031      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a60      	ldr	r2, [pc, #384]	; (8006028 <HAL_DMA_IRQHandler+0x410>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d02c      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a5e      	ldr	r2, [pc, #376]	; (800602c <HAL_DMA_IRQHandler+0x414>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d027      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a5d      	ldr	r2, [pc, #372]	; (8006030 <HAL_DMA_IRQHandler+0x418>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d022      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a5b      	ldr	r2, [pc, #364]	; (8006034 <HAL_DMA_IRQHandler+0x41c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d01d      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a5a      	ldr	r2, [pc, #360]	; (8006038 <HAL_DMA_IRQHandler+0x420>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d018      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a58      	ldr	r2, [pc, #352]	; (800603c <HAL_DMA_IRQHandler+0x424>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d013      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a57      	ldr	r2, [pc, #348]	; (8006040 <HAL_DMA_IRQHandler+0x428>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00e      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a55      	ldr	r2, [pc, #340]	; (8006044 <HAL_DMA_IRQHandler+0x42c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d009      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a54      	ldr	r2, [pc, #336]	; (8006048 <HAL_DMA_IRQHandler+0x430>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d004      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a52      	ldr	r2, [pc, #328]	; (800604c <HAL_DMA_IRQHandler+0x434>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d10a      	bne.n	8005f1c <HAL_DMA_IRQHandler+0x304>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bf14      	ite	ne
 8005f14:	2301      	movne	r3, #1
 8005f16:	2300      	moveq	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	e003      	b.n	8005f24 <HAL_DMA_IRQHandler+0x30c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00d      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2201      	movs	r2, #1
 8005f32:	409a      	lsls	r2, r3
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3c:	f043 0202 	orr.w	r2, r3, #2
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	409a      	lsls	r2, r3
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 808f 	beq.w	8006078 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a2c      	ldr	r2, [pc, #176]	; (8006010 <HAL_DMA_IRQHandler+0x3f8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04a      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a2a      	ldr	r2, [pc, #168]	; (8006014 <HAL_DMA_IRQHandler+0x3fc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d045      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a29      	ldr	r2, [pc, #164]	; (8006018 <HAL_DMA_IRQHandler+0x400>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d040      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a27      	ldr	r2, [pc, #156]	; (800601c <HAL_DMA_IRQHandler+0x404>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d03b      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a26      	ldr	r2, [pc, #152]	; (8006020 <HAL_DMA_IRQHandler+0x408>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d036      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a24      	ldr	r2, [pc, #144]	; (8006024 <HAL_DMA_IRQHandler+0x40c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d031      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a23      	ldr	r2, [pc, #140]	; (8006028 <HAL_DMA_IRQHandler+0x410>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d02c      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a21      	ldr	r2, [pc, #132]	; (800602c <HAL_DMA_IRQHandler+0x414>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d027      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a20      	ldr	r2, [pc, #128]	; (8006030 <HAL_DMA_IRQHandler+0x418>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d022      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <HAL_DMA_IRQHandler+0x41c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1d      	ldr	r2, [pc, #116]	; (8006038 <HAL_DMA_IRQHandler+0x420>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d018      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1b      	ldr	r2, [pc, #108]	; (800603c <HAL_DMA_IRQHandler+0x424>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <HAL_DMA_IRQHandler+0x428>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a18      	ldr	r2, [pc, #96]	; (8006044 <HAL_DMA_IRQHandler+0x42c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a17      	ldr	r2, [pc, #92]	; (8006048 <HAL_DMA_IRQHandler+0x430>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a15      	ldr	r2, [pc, #84]	; (800604c <HAL_DMA_IRQHandler+0x434>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d12a      	bne.n	8006050 <HAL_DMA_IRQHandler+0x438>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	e023      	b.n	8006058 <HAL_DMA_IRQHandler+0x440>
 8006010:	40020010 	.word	0x40020010
 8006014:	40020028 	.word	0x40020028
 8006018:	40020040 	.word	0x40020040
 800601c:	40020058 	.word	0x40020058
 8006020:	40020070 	.word	0x40020070
 8006024:	40020088 	.word	0x40020088
 8006028:	400200a0 	.word	0x400200a0
 800602c:	400200b8 	.word	0x400200b8
 8006030:	40020410 	.word	0x40020410
 8006034:	40020428 	.word	0x40020428
 8006038:	40020440 	.word	0x40020440
 800603c:	40020458 	.word	0x40020458
 8006040:	40020470 	.word	0x40020470
 8006044:	40020488 	.word	0x40020488
 8006048:	400204a0 	.word	0x400204a0
 800604c:	400204b8 	.word	0x400204b8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2300      	movs	r3, #0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00d      	beq.n	8006078 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	2204      	movs	r2, #4
 8006066:	409a      	lsls	r2, r3
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006070:	f043 0204 	orr.w	r2, r3, #4
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	2210      	movs	r2, #16
 8006082:	409a      	lsls	r2, r3
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	4013      	ands	r3, r2
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 80a6 	beq.w	80061da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a85      	ldr	r2, [pc, #532]	; (80062a8 <HAL_DMA_IRQHandler+0x690>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d04a      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a83      	ldr	r2, [pc, #524]	; (80062ac <HAL_DMA_IRQHandler+0x694>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d045      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a82      	ldr	r2, [pc, #520]	; (80062b0 <HAL_DMA_IRQHandler+0x698>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d040      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a80      	ldr	r2, [pc, #512]	; (80062b4 <HAL_DMA_IRQHandler+0x69c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d03b      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a7f      	ldr	r2, [pc, #508]	; (80062b8 <HAL_DMA_IRQHandler+0x6a0>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d036      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a7d      	ldr	r2, [pc, #500]	; (80062bc <HAL_DMA_IRQHandler+0x6a4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d031      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a7c      	ldr	r2, [pc, #496]	; (80062c0 <HAL_DMA_IRQHandler+0x6a8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d02c      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a7a      	ldr	r2, [pc, #488]	; (80062c4 <HAL_DMA_IRQHandler+0x6ac>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d027      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a79      	ldr	r2, [pc, #484]	; (80062c8 <HAL_DMA_IRQHandler+0x6b0>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d022      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a77      	ldr	r2, [pc, #476]	; (80062cc <HAL_DMA_IRQHandler+0x6b4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01d      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a76      	ldr	r2, [pc, #472]	; (80062d0 <HAL_DMA_IRQHandler+0x6b8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a74      	ldr	r2, [pc, #464]	; (80062d4 <HAL_DMA_IRQHandler+0x6bc>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a73      	ldr	r2, [pc, #460]	; (80062d8 <HAL_DMA_IRQHandler+0x6c0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a71      	ldr	r2, [pc, #452]	; (80062dc <HAL_DMA_IRQHandler+0x6c4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a70      	ldr	r2, [pc, #448]	; (80062e0 <HAL_DMA_IRQHandler+0x6c8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a6e      	ldr	r2, [pc, #440]	; (80062e4 <HAL_DMA_IRQHandler+0x6cc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d10a      	bne.n	8006144 <HAL_DMA_IRQHandler+0x52c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	bf14      	ite	ne
 800613c:	2301      	movne	r3, #1
 800613e:	2300      	moveq	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	e009      	b.n	8006158 <HAL_DMA_IRQHandler+0x540>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	bf14      	ite	ne
 8006152:	2301      	movne	r3, #1
 8006154:	2300      	moveq	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d03e      	beq.n	80061da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	2210      	movs	r2, #16
 8006166:	409a      	lsls	r2, r3
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d018      	beq.n	80061ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d108      	bne.n	800619a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d024      	beq.n	80061da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
 8006198:	e01f      	b.n	80061da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01b      	beq.n	80061da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
 80061aa:	e016      	b.n	80061da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d107      	bne.n	80061ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0208 	bic.w	r2, r2, #8
 80061c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	2220      	movs	r2, #32
 80061e4:	409a      	lsls	r2, r3
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8110 	beq.w	8006410 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a2c      	ldr	r2, [pc, #176]	; (80062a8 <HAL_DMA_IRQHandler+0x690>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d04a      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a2b      	ldr	r2, [pc, #172]	; (80062ac <HAL_DMA_IRQHandler+0x694>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d045      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a29      	ldr	r2, [pc, #164]	; (80062b0 <HAL_DMA_IRQHandler+0x698>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d040      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a28      	ldr	r2, [pc, #160]	; (80062b4 <HAL_DMA_IRQHandler+0x69c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d03b      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <HAL_DMA_IRQHandler+0x6a0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d036      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a25      	ldr	r2, [pc, #148]	; (80062bc <HAL_DMA_IRQHandler+0x6a4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d031      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a23      	ldr	r2, [pc, #140]	; (80062c0 <HAL_DMA_IRQHandler+0x6a8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d02c      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a22      	ldr	r2, [pc, #136]	; (80062c4 <HAL_DMA_IRQHandler+0x6ac>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d027      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a20      	ldr	r2, [pc, #128]	; (80062c8 <HAL_DMA_IRQHandler+0x6b0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d022      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a1f      	ldr	r2, [pc, #124]	; (80062cc <HAL_DMA_IRQHandler+0x6b4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d01d      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a1d      	ldr	r2, [pc, #116]	; (80062d0 <HAL_DMA_IRQHandler+0x6b8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d018      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <HAL_DMA_IRQHandler+0x6bc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d013      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <HAL_DMA_IRQHandler+0x6c0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00e      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a19      	ldr	r2, [pc, #100]	; (80062dc <HAL_DMA_IRQHandler+0x6c4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d009      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a17      	ldr	r2, [pc, #92]	; (80062e0 <HAL_DMA_IRQHandler+0x6c8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a16      	ldr	r2, [pc, #88]	; (80062e4 <HAL_DMA_IRQHandler+0x6cc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d12b      	bne.n	80062e8 <HAL_DMA_IRQHandler+0x6d0>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	e02a      	b.n	80062fc <HAL_DMA_IRQHandler+0x6e4>
 80062a6:	bf00      	nop
 80062a8:	40020010 	.word	0x40020010
 80062ac:	40020028 	.word	0x40020028
 80062b0:	40020040 	.word	0x40020040
 80062b4:	40020058 	.word	0x40020058
 80062b8:	40020070 	.word	0x40020070
 80062bc:	40020088 	.word	0x40020088
 80062c0:	400200a0 	.word	0x400200a0
 80062c4:	400200b8 	.word	0x400200b8
 80062c8:	40020410 	.word	0x40020410
 80062cc:	40020428 	.word	0x40020428
 80062d0:	40020440 	.word	0x40020440
 80062d4:	40020458 	.word	0x40020458
 80062d8:	40020470 	.word	0x40020470
 80062dc:	40020488 	.word	0x40020488
 80062e0:	400204a0 	.word	0x400204a0
 80062e4:	400204b8 	.word	0x400204b8
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	bf14      	ite	ne
 80062f6:	2301      	movne	r3, #1
 80062f8:	2300      	moveq	r3, #0
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8087 	beq.w	8006410 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006306:	f003 031f 	and.w	r3, r3, #31
 800630a:	2220      	movs	r2, #32
 800630c:	409a      	lsls	r2, r3
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b04      	cmp	r3, #4
 800631c:	d139      	bne.n	8006392 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0216 	bic.w	r2, r2, #22
 800632c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800633c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <HAL_DMA_IRQHandler+0x736>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0208 	bic.w	r2, r2, #8
 800635c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	223f      	movs	r2, #63	; 0x3f
 8006368:	409a      	lsls	r2, r3
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 834a 	beq.w	8006a1c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4798      	blx	r3
          }
          return;
 8006390:	e344      	b.n	8006a1c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d018      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d108      	bne.n	80063c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d02c      	beq.n	8006410 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	4798      	blx	r3
 80063be:	e027      	b.n	8006410 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d023      	beq.n	8006410 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
 80063d0:	e01e      	b.n	8006410 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10f      	bne.n	8006400 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0210 	bic.w	r2, r2, #16
 80063ee:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8306 	beq.w	8006a26 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 8088 	beq.w	8006538 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2204      	movs	r2, #4
 800642c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a7a      	ldr	r2, [pc, #488]	; (8006620 <HAL_DMA_IRQHandler+0xa08>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d04a      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a79      	ldr	r2, [pc, #484]	; (8006624 <HAL_DMA_IRQHandler+0xa0c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d045      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a77      	ldr	r2, [pc, #476]	; (8006628 <HAL_DMA_IRQHandler+0xa10>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d040      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a76      	ldr	r2, [pc, #472]	; (800662c <HAL_DMA_IRQHandler+0xa14>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d03b      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a74      	ldr	r2, [pc, #464]	; (8006630 <HAL_DMA_IRQHandler+0xa18>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d036      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a73      	ldr	r2, [pc, #460]	; (8006634 <HAL_DMA_IRQHandler+0xa1c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d031      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a71      	ldr	r2, [pc, #452]	; (8006638 <HAL_DMA_IRQHandler+0xa20>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d02c      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a70      	ldr	r2, [pc, #448]	; (800663c <HAL_DMA_IRQHandler+0xa24>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d027      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a6e      	ldr	r2, [pc, #440]	; (8006640 <HAL_DMA_IRQHandler+0xa28>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d022      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a6d      	ldr	r2, [pc, #436]	; (8006644 <HAL_DMA_IRQHandler+0xa2c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d01d      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a6b      	ldr	r2, [pc, #428]	; (8006648 <HAL_DMA_IRQHandler+0xa30>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d018      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a6a      	ldr	r2, [pc, #424]	; (800664c <HAL_DMA_IRQHandler+0xa34>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d013      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a68      	ldr	r2, [pc, #416]	; (8006650 <HAL_DMA_IRQHandler+0xa38>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00e      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a67      	ldr	r2, [pc, #412]	; (8006654 <HAL_DMA_IRQHandler+0xa3c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d009      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a65      	ldr	r2, [pc, #404]	; (8006658 <HAL_DMA_IRQHandler+0xa40>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d004      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a64      	ldr	r2, [pc, #400]	; (800665c <HAL_DMA_IRQHandler+0xa44>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d108      	bne.n	80064e2 <HAL_DMA_IRQHandler+0x8ca>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	e007      	b.n	80064f2 <HAL_DMA_IRQHandler+0x8da>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d307      	bcc.n	800650e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1f2      	bne.n	80064f2 <HAL_DMA_IRQHandler+0x8da>
 800650c:	e000      	b.n	8006510 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800650e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2203      	movs	r2, #3
 800652a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800652e:	e003      	b.n	8006538 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8272 	beq.w	8006a26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
 800654a:	e26c      	b.n	8006a26 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a43      	ldr	r2, [pc, #268]	; (8006660 <HAL_DMA_IRQHandler+0xa48>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d022      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a42      	ldr	r2, [pc, #264]	; (8006664 <HAL_DMA_IRQHandler+0xa4c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d01d      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a40      	ldr	r2, [pc, #256]	; (8006668 <HAL_DMA_IRQHandler+0xa50>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d018      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a3f      	ldr	r2, [pc, #252]	; (800666c <HAL_DMA_IRQHandler+0xa54>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d013      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a3d      	ldr	r2, [pc, #244]	; (8006670 <HAL_DMA_IRQHandler+0xa58>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00e      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a3c      	ldr	r2, [pc, #240]	; (8006674 <HAL_DMA_IRQHandler+0xa5c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d009      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a3a      	ldr	r2, [pc, #232]	; (8006678 <HAL_DMA_IRQHandler+0xa60>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d004      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a39      	ldr	r2, [pc, #228]	; (800667c <HAL_DMA_IRQHandler+0xa64>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d101      	bne.n	80065a0 <HAL_DMA_IRQHandler+0x988>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <HAL_DMA_IRQHandler+0x98a>
 80065a0:	2300      	movs	r3, #0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 823f 	beq.w	8006a26 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b4:	f003 031f 	and.w	r3, r3, #31
 80065b8:	2204      	movs	r2, #4
 80065ba:	409a      	lsls	r2, r3
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	4013      	ands	r3, r2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80cd 	beq.w	8006760 <HAL_DMA_IRQHandler+0xb48>
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 80c7 	beq.w	8006760 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	2204      	movs	r2, #4
 80065dc:	409a      	lsls	r2, r3
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d049      	beq.n	8006680 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8210 	beq.w	8006a20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006608:	e20a      	b.n	8006a20 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 8206 	beq.w	8006a20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800661c:	e200      	b.n	8006a20 <HAL_DMA_IRQHandler+0xe08>
 800661e:	bf00      	nop
 8006620:	40020010 	.word	0x40020010
 8006624:	40020028 	.word	0x40020028
 8006628:	40020040 	.word	0x40020040
 800662c:	40020058 	.word	0x40020058
 8006630:	40020070 	.word	0x40020070
 8006634:	40020088 	.word	0x40020088
 8006638:	400200a0 	.word	0x400200a0
 800663c:	400200b8 	.word	0x400200b8
 8006640:	40020410 	.word	0x40020410
 8006644:	40020428 	.word	0x40020428
 8006648:	40020440 	.word	0x40020440
 800664c:	40020458 	.word	0x40020458
 8006650:	40020470 	.word	0x40020470
 8006654:	40020488 	.word	0x40020488
 8006658:	400204a0 	.word	0x400204a0
 800665c:	400204b8 	.word	0x400204b8
 8006660:	58025408 	.word	0x58025408
 8006664:	5802541c 	.word	0x5802541c
 8006668:	58025430 	.word	0x58025430
 800666c:	58025444 	.word	0x58025444
 8006670:	58025458 	.word	0x58025458
 8006674:	5802546c 	.word	0x5802546c
 8006678:	58025480 	.word	0x58025480
 800667c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d160      	bne.n	800674c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a7f      	ldr	r2, [pc, #508]	; (800688c <HAL_DMA_IRQHandler+0xc74>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d04a      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a7d      	ldr	r2, [pc, #500]	; (8006890 <HAL_DMA_IRQHandler+0xc78>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d045      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a7c      	ldr	r2, [pc, #496]	; (8006894 <HAL_DMA_IRQHandler+0xc7c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d040      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a7a      	ldr	r2, [pc, #488]	; (8006898 <HAL_DMA_IRQHandler+0xc80>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d03b      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a79      	ldr	r2, [pc, #484]	; (800689c <HAL_DMA_IRQHandler+0xc84>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d036      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a77      	ldr	r2, [pc, #476]	; (80068a0 <HAL_DMA_IRQHandler+0xc88>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d031      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a76      	ldr	r2, [pc, #472]	; (80068a4 <HAL_DMA_IRQHandler+0xc8c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d02c      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a74      	ldr	r2, [pc, #464]	; (80068a8 <HAL_DMA_IRQHandler+0xc90>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d027      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a73      	ldr	r2, [pc, #460]	; (80068ac <HAL_DMA_IRQHandler+0xc94>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d022      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a71      	ldr	r2, [pc, #452]	; (80068b0 <HAL_DMA_IRQHandler+0xc98>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d01d      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a70      	ldr	r2, [pc, #448]	; (80068b4 <HAL_DMA_IRQHandler+0xc9c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d018      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a6e      	ldr	r2, [pc, #440]	; (80068b8 <HAL_DMA_IRQHandler+0xca0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d013      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a6d      	ldr	r2, [pc, #436]	; (80068bc <HAL_DMA_IRQHandler+0xca4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00e      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a6b      	ldr	r2, [pc, #428]	; (80068c0 <HAL_DMA_IRQHandler+0xca8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d009      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a6a      	ldr	r2, [pc, #424]	; (80068c4 <HAL_DMA_IRQHandler+0xcac>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d004      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a68      	ldr	r2, [pc, #416]	; (80068c8 <HAL_DMA_IRQHandler+0xcb0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d108      	bne.n	800673c <HAL_DMA_IRQHandler+0xb24>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0208 	bic.w	r2, r2, #8
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	e007      	b.n	800674c <HAL_DMA_IRQHandler+0xb34>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0204 	bic.w	r2, r2, #4
 800674a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8165 	beq.w	8006a20 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800675e:	e15f      	b.n	8006a20 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006764:	f003 031f 	and.w	r3, r3, #31
 8006768:	2202      	movs	r2, #2
 800676a:	409a      	lsls	r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4013      	ands	r3, r2
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80c5 	beq.w	8006900 <HAL_DMA_IRQHandler+0xce8>
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80bf 	beq.w	8006900 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	2202      	movs	r2, #2
 800678c:	409a      	lsls	r2, r3
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d018      	beq.n	80067ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 813a 	beq.w	8006a24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067b8:	e134      	b.n	8006a24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 8130 	beq.w	8006a24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067cc:	e12a      	b.n	8006a24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f040 8089 	bne.w	80068ec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a2b      	ldr	r2, [pc, #172]	; (800688c <HAL_DMA_IRQHandler+0xc74>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d04a      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a29      	ldr	r2, [pc, #164]	; (8006890 <HAL_DMA_IRQHandler+0xc78>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d045      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a28      	ldr	r2, [pc, #160]	; (8006894 <HAL_DMA_IRQHandler+0xc7c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d040      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a26      	ldr	r2, [pc, #152]	; (8006898 <HAL_DMA_IRQHandler+0xc80>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d03b      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a25      	ldr	r2, [pc, #148]	; (800689c <HAL_DMA_IRQHandler+0xc84>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d036      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a23      	ldr	r2, [pc, #140]	; (80068a0 <HAL_DMA_IRQHandler+0xc88>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d031      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a22      	ldr	r2, [pc, #136]	; (80068a4 <HAL_DMA_IRQHandler+0xc8c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d02c      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a20      	ldr	r2, [pc, #128]	; (80068a8 <HAL_DMA_IRQHandler+0xc90>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d027      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a1f      	ldr	r2, [pc, #124]	; (80068ac <HAL_DMA_IRQHandler+0xc94>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d022      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1d      	ldr	r2, [pc, #116]	; (80068b0 <HAL_DMA_IRQHandler+0xc98>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01d      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1c      	ldr	r2, [pc, #112]	; (80068b4 <HAL_DMA_IRQHandler+0xc9c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d018      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1a      	ldr	r2, [pc, #104]	; (80068b8 <HAL_DMA_IRQHandler+0xca0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a19      	ldr	r2, [pc, #100]	; (80068bc <HAL_DMA_IRQHandler+0xca4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a17      	ldr	r2, [pc, #92]	; (80068c0 <HAL_DMA_IRQHandler+0xca8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a16      	ldr	r2, [pc, #88]	; (80068c4 <HAL_DMA_IRQHandler+0xcac>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_DMA_IRQHandler+0xc62>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <HAL_DMA_IRQHandler+0xcb0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d128      	bne.n	80068cc <HAL_DMA_IRQHandler+0xcb4>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0214 	bic.w	r2, r2, #20
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	e027      	b.n	80068dc <HAL_DMA_IRQHandler+0xcc4>
 800688c:	40020010 	.word	0x40020010
 8006890:	40020028 	.word	0x40020028
 8006894:	40020040 	.word	0x40020040
 8006898:	40020058 	.word	0x40020058
 800689c:	40020070 	.word	0x40020070
 80068a0:	40020088 	.word	0x40020088
 80068a4:	400200a0 	.word	0x400200a0
 80068a8:	400200b8 	.word	0x400200b8
 80068ac:	40020410 	.word	0x40020410
 80068b0:	40020428 	.word	0x40020428
 80068b4:	40020440 	.word	0x40020440
 80068b8:	40020458 	.word	0x40020458
 80068bc:	40020470 	.word	0x40020470
 80068c0:	40020488 	.word	0x40020488
 80068c4:	400204a0 	.word	0x400204a0
 80068c8:	400204b8 	.word	0x400204b8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 020a 	bic.w	r2, r2, #10
 80068da:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8097 	beq.w	8006a24 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068fe:	e091      	b.n	8006a24 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006904:	f003 031f 	and.w	r3, r3, #31
 8006908:	2208      	movs	r2, #8
 800690a:	409a      	lsls	r2, r3
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8088 	beq.w	8006a26 <HAL_DMA_IRQHandler+0xe0e>
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8082 	beq.w	8006a26 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a41      	ldr	r2, [pc, #260]	; (8006a2c <HAL_DMA_IRQHandler+0xe14>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d04a      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a3f      	ldr	r2, [pc, #252]	; (8006a30 <HAL_DMA_IRQHandler+0xe18>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d045      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a3e      	ldr	r2, [pc, #248]	; (8006a34 <HAL_DMA_IRQHandler+0xe1c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d040      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a3c      	ldr	r2, [pc, #240]	; (8006a38 <HAL_DMA_IRQHandler+0xe20>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d03b      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a3b      	ldr	r2, [pc, #236]	; (8006a3c <HAL_DMA_IRQHandler+0xe24>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d036      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a39      	ldr	r2, [pc, #228]	; (8006a40 <HAL_DMA_IRQHandler+0xe28>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d031      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a38      	ldr	r2, [pc, #224]	; (8006a44 <HAL_DMA_IRQHandler+0xe2c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d02c      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a36      	ldr	r2, [pc, #216]	; (8006a48 <HAL_DMA_IRQHandler+0xe30>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d027      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a35      	ldr	r2, [pc, #212]	; (8006a4c <HAL_DMA_IRQHandler+0xe34>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d022      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a33      	ldr	r2, [pc, #204]	; (8006a50 <HAL_DMA_IRQHandler+0xe38>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d01d      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a32      	ldr	r2, [pc, #200]	; (8006a54 <HAL_DMA_IRQHandler+0xe3c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d018      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a30      	ldr	r2, [pc, #192]	; (8006a58 <HAL_DMA_IRQHandler+0xe40>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a2f      	ldr	r2, [pc, #188]	; (8006a5c <HAL_DMA_IRQHandler+0xe44>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00e      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a2d      	ldr	r2, [pc, #180]	; (8006a60 <HAL_DMA_IRQHandler+0xe48>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d009      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2c      	ldr	r2, [pc, #176]	; (8006a64 <HAL_DMA_IRQHandler+0xe4c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d004      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a2a      	ldr	r2, [pc, #168]	; (8006a68 <HAL_DMA_IRQHandler+0xe50>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d108      	bne.n	80069d4 <HAL_DMA_IRQHandler+0xdbc>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 021c 	bic.w	r2, r2, #28
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	e007      	b.n	80069e4 <HAL_DMA_IRQHandler+0xdcc>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 020e 	bic.w	r2, r2, #14
 80069e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e8:	f003 031f 	and.w	r3, r3, #31
 80069ec:	2201      	movs	r2, #1
 80069ee:	409a      	lsls	r2, r3
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
 8006a1a:	e004      	b.n	8006a26 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006a1c:	bf00      	nop
 8006a1e:	e002      	b.n	8006a26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a20:	bf00      	nop
 8006a22:	e000      	b.n	8006a26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006a26:	3728      	adds	r7, #40	; 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	40020010 	.word	0x40020010
 8006a30:	40020028 	.word	0x40020028
 8006a34:	40020040 	.word	0x40020040
 8006a38:	40020058 	.word	0x40020058
 8006a3c:	40020070 	.word	0x40020070
 8006a40:	40020088 	.word	0x40020088
 8006a44:	400200a0 	.word	0x400200a0
 8006a48:	400200b8 	.word	0x400200b8
 8006a4c:	40020410 	.word	0x40020410
 8006a50:	40020428 	.word	0x40020428
 8006a54:	40020440 	.word	0x40020440
 8006a58:	40020458 	.word	0x40020458
 8006a5c:	40020470 	.word	0x40020470
 8006a60:	40020488 	.word	0x40020488
 8006a64:	400204a0 	.word	0x400204a0
 8006a68:	400204b8 	.word	0x400204b8

08006a6c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a7a:	b2db      	uxtb	r3, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a42      	ldr	r2, [pc, #264]	; (8006ba0 <DMA_CalcBaseAndBitshift+0x118>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d04a      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a41      	ldr	r2, [pc, #260]	; (8006ba4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d045      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a3f      	ldr	r2, [pc, #252]	; (8006ba8 <DMA_CalcBaseAndBitshift+0x120>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d040      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a3e      	ldr	r2, [pc, #248]	; (8006bac <DMA_CalcBaseAndBitshift+0x124>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d03b      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a3c      	ldr	r2, [pc, #240]	; (8006bb0 <DMA_CalcBaseAndBitshift+0x128>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d036      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a3b      	ldr	r2, [pc, #236]	; (8006bb4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d031      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a39      	ldr	r2, [pc, #228]	; (8006bb8 <DMA_CalcBaseAndBitshift+0x130>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d02c      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a38      	ldr	r2, [pc, #224]	; (8006bbc <DMA_CalcBaseAndBitshift+0x134>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d027      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a36      	ldr	r2, [pc, #216]	; (8006bc0 <DMA_CalcBaseAndBitshift+0x138>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d022      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a35      	ldr	r2, [pc, #212]	; (8006bc4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d01d      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a33      	ldr	r2, [pc, #204]	; (8006bc8 <DMA_CalcBaseAndBitshift+0x140>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d018      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a32      	ldr	r2, [pc, #200]	; (8006bcc <DMA_CalcBaseAndBitshift+0x144>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d013      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a30      	ldr	r2, [pc, #192]	; (8006bd0 <DMA_CalcBaseAndBitshift+0x148>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00e      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a2f      	ldr	r2, [pc, #188]	; (8006bd4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d009      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a2d      	ldr	r2, [pc, #180]	; (8006bd8 <DMA_CalcBaseAndBitshift+0x150>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d004      	beq.n	8006b30 <DMA_CalcBaseAndBitshift+0xa8>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a2c      	ldr	r2, [pc, #176]	; (8006bdc <DMA_CalcBaseAndBitshift+0x154>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d101      	bne.n	8006b34 <DMA_CalcBaseAndBitshift+0xac>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <DMA_CalcBaseAndBitshift+0xae>
 8006b34:	2300      	movs	r3, #0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d024      	beq.n	8006b84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	3b10      	subs	r3, #16
 8006b42:	4a27      	ldr	r2, [pc, #156]	; (8006be0 <DMA_CalcBaseAndBitshift+0x158>)
 8006b44:	fba2 2303 	umull	r2, r3, r2, r3
 8006b48:	091b      	lsrs	r3, r3, #4
 8006b4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f003 0307 	and.w	r3, r3, #7
 8006b52:	4a24      	ldr	r2, [pc, #144]	; (8006be4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006b54:	5cd3      	ldrb	r3, [r2, r3]
 8006b56:	461a      	mov	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d908      	bls.n	8006b74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	4b1f      	ldr	r3, [pc, #124]	; (8006be8 <DMA_CalcBaseAndBitshift+0x160>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	1d1a      	adds	r2, r3, #4
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	659a      	str	r2, [r3, #88]	; 0x58
 8006b72:	e00d      	b.n	8006b90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	4b1b      	ldr	r3, [pc, #108]	; (8006be8 <DMA_CalcBaseAndBitshift+0x160>)
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6593      	str	r3, [r2, #88]	; 0x58
 8006b82:	e005      	b.n	8006b90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	40020010 	.word	0x40020010
 8006ba4:	40020028 	.word	0x40020028
 8006ba8:	40020040 	.word	0x40020040
 8006bac:	40020058 	.word	0x40020058
 8006bb0:	40020070 	.word	0x40020070
 8006bb4:	40020088 	.word	0x40020088
 8006bb8:	400200a0 	.word	0x400200a0
 8006bbc:	400200b8 	.word	0x400200b8
 8006bc0:	40020410 	.word	0x40020410
 8006bc4:	40020428 	.word	0x40020428
 8006bc8:	40020440 	.word	0x40020440
 8006bcc:	40020458 	.word	0x40020458
 8006bd0:	40020470 	.word	0x40020470
 8006bd4:	40020488 	.word	0x40020488
 8006bd8:	400204a0 	.word	0x400204a0
 8006bdc:	400204b8 	.word	0x400204b8
 8006be0:	aaaaaaab 	.word	0xaaaaaaab
 8006be4:	08011a34 	.word	0x08011a34
 8006be8:	fffffc00 	.word	0xfffffc00

08006bec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d120      	bne.n	8006c42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d858      	bhi.n	8006cba <DMA_CheckFifoParam+0xce>
 8006c08:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <DMA_CheckFifoParam+0x24>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c21 	.word	0x08006c21
 8006c14:	08006c33 	.word	0x08006c33
 8006c18:	08006c21 	.word	0x08006c21
 8006c1c:	08006cbb 	.word	0x08006cbb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d048      	beq.n	8006cbe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c30:	e045      	b.n	8006cbe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c3a:	d142      	bne.n	8006cc2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c40:	e03f      	b.n	8006cc2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c4a:	d123      	bne.n	8006c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d838      	bhi.n	8006cc6 <DMA_CheckFifoParam+0xda>
 8006c54:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <DMA_CheckFifoParam+0x70>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006c6d 	.word	0x08006c6d
 8006c60:	08006c73 	.word	0x08006c73
 8006c64:	08006c6d 	.word	0x08006c6d
 8006c68:	08006c85 	.word	0x08006c85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
        break;
 8006c70:	e030      	b.n	8006cd4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d025      	beq.n	8006cca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c82:	e022      	b.n	8006cca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c8c:	d11f      	bne.n	8006cce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c92:	e01c      	b.n	8006cce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d902      	bls.n	8006ca2 <DMA_CheckFifoParam+0xb6>
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d003      	beq.n	8006ca8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006ca0:	e018      	b.n	8006cd4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ca6:	e015      	b.n	8006cd4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00e      	beq.n	8006cd2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb8:	e00b      	b.n	8006cd2 <DMA_CheckFifoParam+0xe6>
        break;
 8006cba:	bf00      	nop
 8006cbc:	e00a      	b.n	8006cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8006cbe:	bf00      	nop
 8006cc0:	e008      	b.n	8006cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8006cc2:	bf00      	nop
 8006cc4:	e006      	b.n	8006cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8006cc6:	bf00      	nop
 8006cc8:	e004      	b.n	8006cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e002      	b.n	8006cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8006cce:	bf00      	nop
 8006cd0:	e000      	b.n	8006cd4 <DMA_CheckFifoParam+0xe8>
    break;
 8006cd2:	bf00      	nop
    }
  }

  return status;
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop

08006ce4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a38      	ldr	r2, [pc, #224]	; (8006dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d022      	beq.n	8006d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a36      	ldr	r2, [pc, #216]	; (8006ddc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d01d      	beq.n	8006d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a35      	ldr	r2, [pc, #212]	; (8006de0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d018      	beq.n	8006d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a33      	ldr	r2, [pc, #204]	; (8006de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d013      	beq.n	8006d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a32      	ldr	r2, [pc, #200]	; (8006de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00e      	beq.n	8006d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a30      	ldr	r2, [pc, #192]	; (8006dec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d009      	beq.n	8006d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a2f      	ldr	r2, [pc, #188]	; (8006df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d004      	beq.n	8006d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a2d      	ldr	r2, [pc, #180]	; (8006df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d101      	bne.n	8006d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e000      	b.n	8006d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006d46:	2300      	movs	r3, #0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01a      	beq.n	8006d82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	3b08      	subs	r3, #8
 8006d54:	4a28      	ldr	r2, [pc, #160]	; (8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006d56:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5a:	091b      	lsrs	r3, r3, #4
 8006d5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	4b26      	ldr	r3, [pc, #152]	; (8006dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	461a      	mov	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a24      	ldr	r2, [pc, #144]	; (8006e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006d70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	2201      	movs	r2, #1
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006d80:	e024      	b.n	8006dcc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	3b10      	subs	r3, #16
 8006d8a:	4a1e      	ldr	r2, [pc, #120]	; (8006e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d90:	091b      	lsrs	r3, r3, #4
 8006d92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4a1c      	ldr	r2, [pc, #112]	; (8006e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d806      	bhi.n	8006daa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4a1b      	ldr	r2, [pc, #108]	; (8006e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d902      	bls.n	8006daa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3308      	adds	r3, #8
 8006da8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	461a      	mov	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a16      	ldr	r2, [pc, #88]	; (8006e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006dbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	409a      	lsls	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	58025408 	.word	0x58025408
 8006ddc:	5802541c 	.word	0x5802541c
 8006de0:	58025430 	.word	0x58025430
 8006de4:	58025444 	.word	0x58025444
 8006de8:	58025458 	.word	0x58025458
 8006dec:	5802546c 	.word	0x5802546c
 8006df0:	58025480 	.word	0x58025480
 8006df4:	58025494 	.word	0x58025494
 8006df8:	cccccccd 	.word	0xcccccccd
 8006dfc:	16009600 	.word	0x16009600
 8006e00:	58025880 	.word	0x58025880
 8006e04:	aaaaaaab 	.word	0xaaaaaaab
 8006e08:	400204b8 	.word	0x400204b8
 8006e0c:	4002040f 	.word	0x4002040f
 8006e10:	10008200 	.word	0x10008200
 8006e14:	40020880 	.word	0x40020880

08006e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d04a      	beq.n	8006ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d847      	bhi.n	8006ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a25      	ldr	r2, [pc, #148]	; (8006ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d022      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a24      	ldr	r2, [pc, #144]	; (8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d01d      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a22      	ldr	r2, [pc, #136]	; (8006ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d018      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a21      	ldr	r2, [pc, #132]	; (8006edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d013      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d00e      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d009      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1c      	ldr	r2, [pc, #112]	; (8006ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d004      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d101      	bne.n	8006e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4b17      	ldr	r3, [pc, #92]	; (8006ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	461a      	mov	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a15      	ldr	r2, [pc, #84]	; (8006ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006ea0:	671a      	str	r2, [r3, #112]	; 0x70
 8006ea2:	e009      	b.n	8006eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4b14      	ldr	r3, [pc, #80]	; (8006ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	461a      	mov	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a11      	ldr	r2, [pc, #68]	; (8006efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006eb6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	409a      	lsls	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	58025408 	.word	0x58025408
 8006ed4:	5802541c 	.word	0x5802541c
 8006ed8:	58025430 	.word	0x58025430
 8006edc:	58025444 	.word	0x58025444
 8006ee0:	58025458 	.word	0x58025458
 8006ee4:	5802546c 	.word	0x5802546c
 8006ee8:	58025480 	.word	0x58025480
 8006eec:	58025494 	.word	0x58025494
 8006ef0:	1600963f 	.word	0x1600963f
 8006ef4:	58025940 	.word	0x58025940
 8006ef8:	1000823f 	.word	0x1000823f
 8006efc:	40020940 	.word	0x40020940

08006f00 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b098      	sub	sp, #96	; 0x60
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006f08:	4a84      	ldr	r2, [pc, #528]	; (800711c <HAL_FDCAN_Init+0x21c>)
 8006f0a:	f107 030c 	add.w	r3, r7, #12
 8006f0e:	4611      	mov	r1, r2
 8006f10:	224c      	movs	r2, #76	; 0x4c
 8006f12:	4618      	mov	r0, r3
 8006f14:	f00a fc44 	bl	80117a0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e1c6      	b.n	80072b0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a7e      	ldr	r2, [pc, #504]	; (8007120 <HAL_FDCAN_Init+0x220>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d106      	bne.n	8006f3a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006f34:	461a      	mov	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7f9 feec 	bl	8000d2c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699a      	ldr	r2, [r3, #24]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0210 	bic.w	r2, r2, #16
 8006f62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f64:	f7fb ff8a 	bl	8002e7c <HAL_GetTick>
 8006f68:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006f6a:	e014      	b.n	8006f96 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006f6c:	f7fb ff86 	bl	8002e7c <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b0a      	cmp	r3, #10
 8006f78:	d90d      	bls.n	8006f96 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f80:	f043 0201 	orr.w	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e18c      	b.n	80072b0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d0e3      	beq.n	8006f6c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699a      	ldr	r2, [r3, #24]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fb4:	f7fb ff62 	bl	8002e7c <HAL_GetTick>
 8006fb8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006fba:	e014      	b.n	8006fe6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006fbc:	f7fb ff5e 	bl	8002e7c <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b0a      	cmp	r3, #10
 8006fc8:	d90d      	bls.n	8006fe6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fd0:	f043 0201 	orr.w	r2, r3, #1
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2203      	movs	r2, #3
 8006fde:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e164      	b.n	80072b0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d0e3      	beq.n	8006fbc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699a      	ldr	r2, [r3, #24]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0202 	orr.w	r2, r2, #2
 8007002:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7c1b      	ldrb	r3, [r3, #16]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d108      	bne.n	800701e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800701a:	619a      	str	r2, [r3, #24]
 800701c:	e007      	b.n	800702e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	699a      	ldr	r2, [r3, #24]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800702c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7c5b      	ldrb	r3, [r3, #17]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d108      	bne.n	8007048 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	699a      	ldr	r2, [r3, #24]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007044:	619a      	str	r2, [r3, #24]
 8007046:	e007      	b.n	8007058 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699a      	ldr	r2, [r3, #24]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007056:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7c9b      	ldrb	r3, [r3, #18]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d108      	bne.n	8007072 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800706e:	619a      	str	r2, [r3, #24]
 8007070:	e007      	b.n	8007082 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	699a      	ldr	r2, [r3, #24]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007080:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699a      	ldr	r2, [r3, #24]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80070a6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691a      	ldr	r2, [r3, #16]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0210 	bic.w	r2, r2, #16
 80070b6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d108      	bne.n	80070d2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699a      	ldr	r2, [r3, #24]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0204 	orr.w	r2, r2, #4
 80070ce:	619a      	str	r2, [r3, #24]
 80070d0:	e030      	b.n	8007134 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d02c      	beq.n	8007134 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d020      	beq.n	8007124 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	699a      	ldr	r2, [r3, #24]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070f0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0210 	orr.w	r2, r2, #16
 8007100:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	2b03      	cmp	r3, #3
 8007108:	d114      	bne.n	8007134 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699a      	ldr	r2, [r3, #24]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0220 	orr.w	r2, r2, #32
 8007118:	619a      	str	r2, [r3, #24]
 800711a:	e00b      	b.n	8007134 <HAL_FDCAN_Init+0x234>
 800711c:	08011974 	.word	0x08011974
 8007120:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0220 	orr.w	r2, r2, #32
 8007132:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	3b01      	subs	r3, #1
 800713a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	3b01      	subs	r3, #1
 8007142:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007144:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800714c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	3b01      	subs	r3, #1
 8007156:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800715c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800715e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007168:	d115      	bne.n	8007196 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	3b01      	subs	r3, #1
 8007176:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007178:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717e:	3b01      	subs	r3, #1
 8007180:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007182:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	3b01      	subs	r3, #1
 800718c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007192:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007194:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071bc:	4413      	add	r3, r2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d011      	beq.n	80071e6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80071ca:	f023 0107 	bic.w	r1, r3, #7
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	3360      	adds	r3, #96	; 0x60
 80071d6:	443b      	add	r3, r7
 80071d8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d011      	beq.n	8007212 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80071f6:	f023 0107 	bic.w	r1, r3, #7
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	3360      	adds	r3, #96	; 0x60
 8007202:	443b      	add	r3, r7
 8007204:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007216:	2b00      	cmp	r3, #0
 8007218:	d012      	beq.n	8007240 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007222:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	3360      	adds	r3, #96	; 0x60
 800722e:	443b      	add	r3, r7
 8007230:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007234:	011a      	lsls	r2, r3, #4
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007244:	2b00      	cmp	r3, #0
 8007246:	d012      	beq.n	800726e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007250:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	3360      	adds	r3, #96	; 0x60
 800725c:	443b      	add	r3, r7
 800725e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007262:	021a      	lsls	r2, r3, #8
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a11      	ldr	r2, [pc, #68]	; (80072b8 <HAL_FDCAN_Init+0x3b8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d107      	bne.n	8007288 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f022 0203 	bic.w	r2, r2, #3
 8007286:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fb1f 	bl	80078e4 <FDCAN_CalcultateRamBlockAddresses>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80072ac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3760      	adds	r7, #96	; 0x60
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	4000a000 	.word	0x4000a000

080072bc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b092      	sub	sp, #72	; 0x48
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80072c4:	4b90      	ldr	r3, [pc, #576]	; (8007508 <HAL_FDCAN_IRQHandler+0x24c>)
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	079b      	lsls	r3, r3, #30
 80072ca:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80072cc:	4b8e      	ldr	r3, [pc, #568]	; (8007508 <HAL_FDCAN_IRQHandler+0x24c>)
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	079b      	lsls	r3, r3, #30
 80072d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072d4:	4013      	ands	r3, r2
 80072d6:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80072e2:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072ec:	4013      	ands	r3, r2
 80072ee:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007302:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007304:	4013      	ands	r3, r2
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007312:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800731c:	4013      	ands	r3, r2
 800731e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007326:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800732a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007334:	4013      	ands	r3, r2
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800733e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8007342:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734c:	4013      	ands	r3, r2
 800734e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735a:	2b00      	cmp	r3, #0
 800735c:	d011      	beq.n	8007382 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00a      	beq.n	8007382 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007374:	651a      	str	r2, [r3, #80]	; 0x50
 8007376:	4b64      	ldr	r3, [pc, #400]	; (8007508 <HAL_FDCAN_IRQHandler+0x24c>)
 8007378:	2200      	movs	r2, #0
 800737a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fa65 	bl	800784c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01e      	beq.n	80073ce <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800739a:	2b00      	cmp	r3, #0
 800739c:	d017      	beq.n	80073ce <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80073b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b2:	4013      	ands	r3, r2
 80073b4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073be:	651a      	str	r2, [r3, #80]	; 0x50
 80073c0:	4b51      	ldr	r3, [pc, #324]	; (8007508 <HAL_FDCAN_IRQHandler+0x24c>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80073c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fa16 	bl	80077fa <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80073ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00d      	beq.n	80073f0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073da:	4b4c      	ldr	r3, [pc, #304]	; (800750c <HAL_FDCAN_IRQHandler+0x250>)
 80073dc:	400b      	ands	r3, r1
 80073de:	6513      	str	r3, [r2, #80]	; 0x50
 80073e0:	4a49      	ldr	r2, [pc, #292]	; (8007508 <HAL_FDCAN_IRQHandler+0x24c>)
 80073e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073e4:	0f9b      	lsrs	r3, r3, #30
 80073e6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80073e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f9c4 	bl	8007778 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80073f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00d      	beq.n	8007412 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073fc:	4b43      	ldr	r3, [pc, #268]	; (800750c <HAL_FDCAN_IRQHandler+0x250>)
 80073fe:	400b      	ands	r3, r1
 8007400:	6513      	str	r3, [r2, #80]	; 0x50
 8007402:	4a41      	ldr	r2, [pc, #260]	; (8007508 <HAL_FDCAN_IRQHandler+0x24c>)
 8007404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007406:	0f9b      	lsrs	r3, r3, #30
 8007408:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800740a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f9be 	bl	800778e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00d      	beq.n	8007434 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800741e:	4b3b      	ldr	r3, [pc, #236]	; (800750c <HAL_FDCAN_IRQHandler+0x250>)
 8007420:	400b      	ands	r3, r1
 8007422:	6513      	str	r3, [r2, #80]	; 0x50
 8007424:	4a38      	ldr	r2, [pc, #224]	; (8007508 <HAL_FDCAN_IRQHandler+0x24c>)
 8007426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007428:	0f9b      	lsrs	r3, r3, #30
 800742a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800742c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f9b8 	bl	80077a4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00d      	beq.n	8007456 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007440:	4b32      	ldr	r3, [pc, #200]	; (800750c <HAL_FDCAN_IRQHandler+0x250>)
 8007442:	400b      	ands	r3, r1
 8007444:	6513      	str	r3, [r2, #80]	; 0x50
 8007446:	4a30      	ldr	r2, [pc, #192]	; (8007508 <HAL_FDCAN_IRQHandler+0x24c>)
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	0f9b      	lsrs	r3, r3, #30
 800744c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800744e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f9b2 	bl	80077ba <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800745c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007460:	2b00      	cmp	r3, #0
 8007462:	d011      	beq.n	8007488 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800746a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800747a:	651a      	str	r2, [r3, #80]	; 0x50
 800747c:	4b22      	ldr	r3, [pc, #136]	; (8007508 <HAL_FDCAN_IRQHandler+0x24c>)
 800747e:	2200      	movs	r2, #0
 8007480:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f9a4 	bl	80077d0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01e      	beq.n	80074d4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d017      	beq.n	80074d4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074ac:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074b8:	4013      	ands	r3, r2
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074c4:	651a      	str	r2, [r3, #80]	; 0x50
 80074c6:	4b10      	ldr	r3, [pc, #64]	; (8007508 <HAL_FDCAN_IRQHandler+0x24c>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80074cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f988 	bl	80077e4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d016      	beq.n	8007510 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00f      	beq.n	8007510 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80074f8:	651a      	str	r2, [r3, #80]	; 0x50
 80074fa:	4b03      	ldr	r3, [pc, #12]	; (8007508 <HAL_FDCAN_IRQHandler+0x24c>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f985 	bl	8007810 <HAL_FDCAN_RxBufferNewMessageCallback>
 8007506:	e003      	b.n	8007510 <HAL_FDCAN_IRQHandler+0x254>
 8007508:	4000a800 	.word	0x4000a800
 800750c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d011      	beq.n	8007542 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007534:	651a      	str	r2, [r3, #80]	; 0x50
 8007536:	4b8d      	ldr	r3, [pc, #564]	; (800776c <HAL_FDCAN_IRQHandler+0x4b0>)
 8007538:	2200      	movs	r2, #0
 800753a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f971 	bl	8007824 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d011      	beq.n	8007574 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007566:	651a      	str	r2, [r3, #80]	; 0x50
 8007568:	4b80      	ldr	r3, [pc, #512]	; (800776c <HAL_FDCAN_IRQHandler+0x4b0>)
 800756a:	2200      	movs	r2, #0
 800756c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f962 	bl	8007838 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d016      	beq.n	80075b0 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00f      	beq.n	80075b0 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007598:	651a      	str	r2, [r3, #80]	; 0x50
 800759a:	4b74      	ldr	r3, [pc, #464]	; (800776c <HAL_FDCAN_IRQHandler+0x4b0>)
 800759c:	2200      	movs	r2, #0
 800759e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00d      	beq.n	80075d2 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075bc:	4b6c      	ldr	r3, [pc, #432]	; (8007770 <HAL_FDCAN_IRQHandler+0x4b4>)
 80075be:	400b      	ands	r3, r1
 80075c0:	6513      	str	r3, [r2, #80]	; 0x50
 80075c2:	4a6a      	ldr	r2, [pc, #424]	; (800776c <HAL_FDCAN_IRQHandler+0x4b0>)
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	0f9b      	lsrs	r3, r3, #30
 80075c8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80075ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f951 	bl	8007874 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80075d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d011      	beq.n	80075fc <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075de:	4b64      	ldr	r3, [pc, #400]	; (8007770 <HAL_FDCAN_IRQHandler+0x4b4>)
 80075e0:	400b      	ands	r3, r1
 80075e2:	6513      	str	r3, [r2, #80]	; 0x50
 80075e4:	4a61      	ldr	r2, [pc, #388]	; (800776c <HAL_FDCAN_IRQHandler+0x4b0>)
 80075e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e8:	0f9b      	lsrs	r3, r3, #30
 80075ea:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80075f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a5c      	ldr	r2, [pc, #368]	; (8007774 <HAL_FDCAN_IRQHandler+0x4b8>)
 8007602:	4293      	cmp	r3, r2
 8007604:	f040 80a6 	bne.w	8007754 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 0303 	and.w	r3, r3, #3
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 809e 	beq.w	8007754 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	f003 030f 	and.w	r3, r3, #15
 8007622:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762c:	4013      	ands	r3, r2
 800762e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800763a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	6a3a      	ldr	r2, [r7, #32]
 8007644:	4013      	ands	r3, r2
 8007646:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007652:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	4013      	ands	r3, r2
 800765e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800766a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	4013      	ands	r3, r2
 8007676:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8007682:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4013      	ands	r3, r2
 800768e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	2b00      	cmp	r3, #0
 8007694:	d007      	beq.n	80076a6 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800769e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f8f2 	bl	800788a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d007      	beq.n	80076bc <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	6a3a      	ldr	r2, [r7, #32]
 80076b2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80076b4:	6a39      	ldr	r1, [r7, #32]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f8f2 	bl	80078a0 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01b      	beq.n	8007702 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d014      	beq.n	8007702 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076de:	0c1b      	lsrs	r3, r3, #16
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ee:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2240      	movs	r2, #64	; 0x40
 80076f6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	6939      	ldr	r1, [r7, #16]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f8da 	bl	80078b6 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d007      	beq.n	8007718 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007710:	69f9      	ldr	r1, [r7, #28]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f8db 	bl	80078ce <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00b      	beq.n	8007736 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f87e 	bl	8007860 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007764:	bf00      	nop
 8007766:	3748      	adds	r7, #72	; 0x48
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	4000a800 	.word	0x4000a800
 8007770:	3fcfffff 	.word	0x3fcfffff
 8007774:	4000a000 	.word	0x4000a000

08007778 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80077ee:	bf00      	nop
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80078fa:	4ba7      	ldr	r3, [pc, #668]	; (8007b98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	0091      	lsls	r1, r2, #2
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6812      	ldr	r2, [r2, #0]
 8007906:	430b      	orrs	r3, r1
 8007908:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007914:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	041a      	lsls	r2, r3, #16
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	4413      	add	r3, r2
 8007930:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800793a:	4b97      	ldr	r3, [pc, #604]	; (8007b98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800793c:	4013      	ands	r3, r2
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	0091      	lsls	r1, r2, #2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6812      	ldr	r2, [r2, #0]
 8007946:	430b      	orrs	r3, r1
 8007948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007954:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795c:	041a      	lsls	r2, r3, #16
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	4413      	add	r3, r2
 8007972:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800797c:	4b86      	ldr	r3, [pc, #536]	; (8007b98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800797e:	4013      	ands	r3, r2
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	0091      	lsls	r1, r2, #2
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	6812      	ldr	r2, [r2, #0]
 8007988:	430b      	orrs	r3, r1
 800798a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007996:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	041a      	lsls	r2, r3, #16
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80079b2:	fb02 f303 	mul.w	r3, r2, r3
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	4413      	add	r3, r2
 80079ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80079c4:	4b74      	ldr	r3, [pc, #464]	; (8007b98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079c6:	4013      	ands	r3, r2
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	0091      	lsls	r1, r2, #2
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6812      	ldr	r2, [r2, #0]
 80079d0:	430b      	orrs	r3, r1
 80079d2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079de:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079e6:	041a      	lsls	r2, r3, #16
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80079fa:	fb02 f303 	mul.w	r3, r2, r3
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	4413      	add	r3, r2
 8007a02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007a0c:	4b62      	ldr	r3, [pc, #392]	; (8007b98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a0e:	4013      	ands	r3, r2
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	0091      	lsls	r1, r2, #2
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6812      	ldr	r2, [r2, #0]
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007a26:	fb02 f303 	mul.w	r3, r2, r3
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007a38:	4b57      	ldr	r3, [pc, #348]	; (8007b98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	0091      	lsls	r1, r2, #2
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6812      	ldr	r2, [r2, #0]
 8007a44:	430b      	orrs	r3, r1
 8007a46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a52:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	041a      	lsls	r2, r3, #16
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	4413      	add	r3, r2
 8007a70:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007a7a:	4b47      	ldr	r3, [pc, #284]	; (8007b98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	0091      	lsls	r1, r2, #2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6812      	ldr	r2, [r2, #0]
 8007a86:	430b      	orrs	r3, r1
 8007a88:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a94:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a9c:	041a      	lsls	r2, r3, #16
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007ab0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab8:	061a      	lsls	r2, r3, #24
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ac8:	4b34      	ldr	r3, [pc, #208]	; (8007b9c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007aca:	4413      	add	r3, r2
 8007acc:	009a      	lsls	r2, r3, #2
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	441a      	add	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	441a      	add	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007afe:	fb01 f303 	mul.w	r3, r1, r3
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	441a      	add	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b12:	6879      	ldr	r1, [r7, #4]
 8007b14:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007b16:	fb01 f303 	mul.w	r3, r1, r3
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	441a      	add	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007b2e:	fb01 f303 	mul.w	r3, r1, r3
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	441a      	add	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	441a      	add	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b5e:	fb01 f303 	mul.w	r3, r1, r3
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	441a      	add	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b7a:	fb01 f303 	mul.w	r3, r1, r3
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	441a      	add	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b8e:	4a04      	ldr	r2, [pc, #16]	; (8007ba0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d915      	bls.n	8007bc0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007b94:	e006      	b.n	8007ba4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007b96:	bf00      	nop
 8007b98:	ffff0003 	.word	0xffff0003
 8007b9c:	10002b00 	.word	0x10002b00
 8007ba0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007baa:	f043 0220 	orr.w	r2, r3, #32
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e010      	b.n	8007be2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	e005      	b.n	8007bd4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d3f3      	bcc.n	8007bc8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop

08007bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b089      	sub	sp, #36	; 0x24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007bfe:	4b89      	ldr	r3, [pc, #548]	; (8007e24 <HAL_GPIO_Init+0x234>)
 8007c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c02:	e194      	b.n	8007f2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	2101      	movs	r1, #1
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c10:	4013      	ands	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 8186 	beq.w	8007f28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d00b      	beq.n	8007c3c <HAL_GPIO_Init+0x4c>
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d007      	beq.n	8007c3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c30:	2b11      	cmp	r3, #17
 8007c32:	d003      	beq.n	8007c3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2b12      	cmp	r3, #18
 8007c3a:	d130      	bne.n	8007c9e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	2203      	movs	r2, #3
 8007c48:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4c:	43db      	mvns	r3, r3
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	4013      	ands	r3, r2
 8007c52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c72:	2201      	movs	r2, #1
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7a:	43db      	mvns	r3, r3
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	091b      	lsrs	r3, r3, #4
 8007c88:	f003 0201 	and.w	r2, r3, #1
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	2203      	movs	r2, #3
 8007caa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cae:	43db      	mvns	r3, r3
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	689a      	ldr	r2, [r3, #8]
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d003      	beq.n	8007cde <HAL_GPIO_Init+0xee>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2b12      	cmp	r3, #18
 8007cdc:	d123      	bne.n	8007d26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	08da      	lsrs	r2, r3, #3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3208      	adds	r2, #8
 8007ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	f003 0307 	and.w	r3, r3, #7
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	220f      	movs	r2, #15
 8007cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfa:	43db      	mvns	r3, r3
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	691a      	ldr	r2, [r3, #16]
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	f003 0307 	and.w	r3, r3, #7
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	08da      	lsrs	r2, r3, #3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	3208      	adds	r2, #8
 8007d20:	69b9      	ldr	r1, [r7, #24]
 8007d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	2203      	movs	r2, #3
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	43db      	mvns	r3, r3
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f003 0203 	and.w	r2, r3, #3
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	69ba      	ldr	r2, [r7, #24]
 8007d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 80e0 	beq.w	8007f28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d68:	4b2f      	ldr	r3, [pc, #188]	; (8007e28 <HAL_GPIO_Init+0x238>)
 8007d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d6e:	4a2e      	ldr	r2, [pc, #184]	; (8007e28 <HAL_GPIO_Init+0x238>)
 8007d70:	f043 0302 	orr.w	r3, r3, #2
 8007d74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d78:	4b2b      	ldr	r3, [pc, #172]	; (8007e28 <HAL_GPIO_Init+0x238>)
 8007d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d86:	4a29      	ldr	r2, [pc, #164]	; (8007e2c <HAL_GPIO_Init+0x23c>)
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	089b      	lsrs	r3, r3, #2
 8007d8c:	3302      	adds	r3, #2
 8007d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	220f      	movs	r2, #15
 8007d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007da2:	43db      	mvns	r3, r3
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	4013      	ands	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a20      	ldr	r2, [pc, #128]	; (8007e30 <HAL_GPIO_Init+0x240>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d052      	beq.n	8007e58 <HAL_GPIO_Init+0x268>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a1f      	ldr	r2, [pc, #124]	; (8007e34 <HAL_GPIO_Init+0x244>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d031      	beq.n	8007e1e <HAL_GPIO_Init+0x22e>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a1e      	ldr	r2, [pc, #120]	; (8007e38 <HAL_GPIO_Init+0x248>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d02b      	beq.n	8007e1a <HAL_GPIO_Init+0x22a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a1d      	ldr	r2, [pc, #116]	; (8007e3c <HAL_GPIO_Init+0x24c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d025      	beq.n	8007e16 <HAL_GPIO_Init+0x226>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a1c      	ldr	r2, [pc, #112]	; (8007e40 <HAL_GPIO_Init+0x250>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d01f      	beq.n	8007e12 <HAL_GPIO_Init+0x222>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a1b      	ldr	r2, [pc, #108]	; (8007e44 <HAL_GPIO_Init+0x254>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d019      	beq.n	8007e0e <HAL_GPIO_Init+0x21e>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a1a      	ldr	r2, [pc, #104]	; (8007e48 <HAL_GPIO_Init+0x258>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d013      	beq.n	8007e0a <HAL_GPIO_Init+0x21a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a19      	ldr	r2, [pc, #100]	; (8007e4c <HAL_GPIO_Init+0x25c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00d      	beq.n	8007e06 <HAL_GPIO_Init+0x216>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a18      	ldr	r2, [pc, #96]	; (8007e50 <HAL_GPIO_Init+0x260>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d007      	beq.n	8007e02 <HAL_GPIO_Init+0x212>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a17      	ldr	r2, [pc, #92]	; (8007e54 <HAL_GPIO_Init+0x264>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d101      	bne.n	8007dfe <HAL_GPIO_Init+0x20e>
 8007dfa:	2309      	movs	r3, #9
 8007dfc:	e02d      	b.n	8007e5a <HAL_GPIO_Init+0x26a>
 8007dfe:	230a      	movs	r3, #10
 8007e00:	e02b      	b.n	8007e5a <HAL_GPIO_Init+0x26a>
 8007e02:	2308      	movs	r3, #8
 8007e04:	e029      	b.n	8007e5a <HAL_GPIO_Init+0x26a>
 8007e06:	2307      	movs	r3, #7
 8007e08:	e027      	b.n	8007e5a <HAL_GPIO_Init+0x26a>
 8007e0a:	2306      	movs	r3, #6
 8007e0c:	e025      	b.n	8007e5a <HAL_GPIO_Init+0x26a>
 8007e0e:	2305      	movs	r3, #5
 8007e10:	e023      	b.n	8007e5a <HAL_GPIO_Init+0x26a>
 8007e12:	2304      	movs	r3, #4
 8007e14:	e021      	b.n	8007e5a <HAL_GPIO_Init+0x26a>
 8007e16:	2303      	movs	r3, #3
 8007e18:	e01f      	b.n	8007e5a <HAL_GPIO_Init+0x26a>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e01d      	b.n	8007e5a <HAL_GPIO_Init+0x26a>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e01b      	b.n	8007e5a <HAL_GPIO_Init+0x26a>
 8007e22:	bf00      	nop
 8007e24:	58000080 	.word	0x58000080
 8007e28:	58024400 	.word	0x58024400
 8007e2c:	58000400 	.word	0x58000400
 8007e30:	58020000 	.word	0x58020000
 8007e34:	58020400 	.word	0x58020400
 8007e38:	58020800 	.word	0x58020800
 8007e3c:	58020c00 	.word	0x58020c00
 8007e40:	58021000 	.word	0x58021000
 8007e44:	58021400 	.word	0x58021400
 8007e48:	58021800 	.word	0x58021800
 8007e4c:	58021c00 	.word	0x58021c00
 8007e50:	58022000 	.word	0x58022000
 8007e54:	58022400 	.word	0x58022400
 8007e58:	2300      	movs	r3, #0
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	f002 0203 	and.w	r2, r2, #3
 8007e60:	0092      	lsls	r2, r2, #2
 8007e62:	4093      	lsls	r3, r2
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e6a:	4938      	ldr	r1, [pc, #224]	; (8007f4c <HAL_GPIO_Init+0x35c>)
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	089b      	lsrs	r3, r3, #2
 8007e70:	3302      	adds	r3, #2
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	43db      	mvns	r3, r3
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	4013      	ands	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	43db      	mvns	r3, r3
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	43db      	mvns	r3, r3
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	4013      	ands	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	43db      	mvns	r3, r3
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	fa22 f303 	lsr.w	r3, r2, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f47f ae63 	bne.w	8007c04 <HAL_GPIO_Init+0x14>
  }
}
 8007f3e:	bf00      	nop
 8007f40:	bf00      	nop
 8007f42:	3724      	adds	r7, #36	; 0x24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	58000400 	.word	0x58000400

08007f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	807b      	strh	r3, [r7, #2]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f60:	787b      	ldrb	r3, [r7, #1]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f66:	887a      	ldrh	r2, [r7, #2]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f6c:	e003      	b.n	8007f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f6e:	887b      	ldrh	r3, [r7, #2]
 8007f70:	041a      	lsls	r2, r3, #16
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	619a      	str	r2, [r3, #24]
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	4603      	mov	r3, r0
 8007f8a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f94:	88fb      	ldrh	r3, [r7, #6]
 8007f96:	4013      	ands	r3, r2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d008      	beq.n	8007fae <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fa0:	88fb      	ldrh	r3, [r7, #6]
 8007fa2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 f804 	bl	8007fb6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e07f      	b.n	80080de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7f9 fa02 	bl	80013fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2224      	movs	r2, #36	; 0x24
 8007ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0201 	bic.w	r2, r2, #1
 800800e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800801c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800802c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d107      	bne.n	8008046 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689a      	ldr	r2, [r3, #8]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008042:	609a      	str	r2, [r3, #8]
 8008044:	e006      	b.n	8008054 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008052:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	2b02      	cmp	r3, #2
 800805a:	d104      	bne.n	8008066 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008064:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6859      	ldr	r1, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	4b1d      	ldr	r3, [pc, #116]	; (80080e8 <HAL_I2C_Init+0x11c>)
 8008072:	430b      	orrs	r3, r1
 8008074:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008084:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691a      	ldr	r2, [r3, #16]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	ea42 0103 	orr.w	r1, r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	021a      	lsls	r2, r3, #8
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	69d9      	ldr	r1, [r3, #28]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1a      	ldr	r2, [r3, #32]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0201 	orr.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	02008000 	.word	0x02008000

080080ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
  }
}
 8008118:	bf00      	nop
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	0a1b      	lsrs	r3, r3, #8
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d010      	beq.n	8008166 <HAL_I2C_ER_IRQHandler+0x46>
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	09db      	lsrs	r3, r3, #7
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008154:	f043 0201 	orr.w	r2, r3, #1
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008164:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	0a9b      	lsrs	r3, r3, #10
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d010      	beq.n	8008194 <HAL_I2C_ER_IRQHandler+0x74>
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	09db      	lsrs	r3, r3, #7
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008182:	f043 0208 	orr.w	r2, r3, #8
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008192:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	0a5b      	lsrs	r3, r3, #9
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	d010      	beq.n	80081c2 <HAL_I2C_ER_IRQHandler+0xa2>
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	09db      	lsrs	r3, r3, #7
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00a      	beq.n	80081c2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b0:	f043 0202 	orr.w	r2, r3, #2
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081c0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f003 030b 	and.w	r3, r3, #11
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80081d2:	68f9      	ldr	r1, [r7, #12]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fc77 	bl	8008ac8 <I2C_ITError>
  }
}
 80081da:	bf00      	nop
 80081dc:	3718      	adds	r7, #24
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	460b      	mov	r3, r1
 8008214:	70fb      	strb	r3, [r7, #3]
 8008216:	4613      	mov	r3, r2
 8008218:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b086      	sub	sp, #24
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008272:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800827e:	2b01      	cmp	r3, #1
 8008280:	d101      	bne.n	8008286 <I2C_Slave_ISR_IT+0x24>
 8008282:	2302      	movs	r3, #2
 8008284:	e0ec      	b.n	8008460 <I2C_Slave_ISR_IT+0x1fe>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	095b      	lsrs	r3, r3, #5
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	d009      	beq.n	80082ae <I2C_Slave_ISR_IT+0x4c>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	095b      	lsrs	r3, r3, #5
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80082a6:	6939      	ldr	r1, [r7, #16]
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 f9bf 	bl	800862c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	091b      	lsrs	r3, r3, #4
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d04d      	beq.n	8008356 <I2C_Slave_ISR_IT+0xf4>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	091b      	lsrs	r3, r3, #4
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d047      	beq.n	8008356 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d128      	bne.n	8008322 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b28      	cmp	r3, #40	; 0x28
 80082da:	d108      	bne.n	80082ee <I2C_Slave_ISR_IT+0x8c>
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082e2:	d104      	bne.n	80082ee <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80082e4:	6939      	ldr	r1, [r7, #16]
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 fb98 	bl	8008a1c <I2C_ITListenCplt>
 80082ec:	e032      	b.n	8008354 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b29      	cmp	r3, #41	; 0x29
 80082f8:	d10e      	bne.n	8008318 <I2C_Slave_ISR_IT+0xb6>
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008300:	d00a      	beq.n	8008318 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2210      	movs	r2, #16
 8008308:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 fcd3 	bl	8008cb6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f92d 	bl	8008570 <I2C_ITSlaveSeqCplt>
 8008316:	e01d      	b.n	8008354 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2210      	movs	r2, #16
 800831e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008320:	e096      	b.n	8008450 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2210      	movs	r2, #16
 8008328:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832e:	f043 0204 	orr.w	r2, r3, #4
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d004      	beq.n	8008346 <I2C_Slave_ISR_IT+0xe4>
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008342:	f040 8085 	bne.w	8008450 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834a:	4619      	mov	r1, r3
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 fbbb 	bl	8008ac8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008352:	e07d      	b.n	8008450 <I2C_Slave_ISR_IT+0x1ee>
 8008354:	e07c      	b.n	8008450 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	089b      	lsrs	r3, r3, #2
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d030      	beq.n	80083c4 <I2C_Slave_ISR_IT+0x162>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	089b      	lsrs	r3, r3, #2
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b00      	cmp	r3, #0
 800836c:	d02a      	beq.n	80083c4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008372:	b29b      	uxth	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d018      	beq.n	80083aa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008394:	3b01      	subs	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	3b01      	subs	r3, #1
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d14f      	bne.n	8008454 <I2C_Slave_ISR_IT+0x1f2>
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083ba:	d04b      	beq.n	8008454 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f8d7 	bl	8008570 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80083c2:	e047      	b.n	8008454 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	08db      	lsrs	r3, r3, #3
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	08db      	lsrs	r3, r3, #3
 80083d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d004      	beq.n	80083e6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80083dc:	6939      	ldr	r1, [r7, #16]
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 f842 	bl	8008468 <I2C_ITAddrCplt>
 80083e4:	e037      	b.n	8008456 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	085b      	lsrs	r3, r3, #1
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d031      	beq.n	8008456 <I2C_Slave_ISR_IT+0x1f4>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	085b      	lsrs	r3, r3, #1
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d02b      	beq.n	8008456 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008402:	b29b      	uxth	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d018      	beq.n	800843a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	781a      	ldrb	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008422:	b29b      	uxth	r3, r3
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008430:	3b01      	subs	r3, #1
 8008432:	b29a      	uxth	r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	851a      	strh	r2, [r3, #40]	; 0x28
 8008438:	e00d      	b.n	8008456 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008440:	d002      	beq.n	8008448 <I2C_Slave_ISR_IT+0x1e6>
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d106      	bne.n	8008456 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 f891 	bl	8008570 <I2C_ITSlaveSeqCplt>
 800844e:	e002      	b.n	8008456 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008450:	bf00      	nop
 8008452:	e000      	b.n	8008456 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008454:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008478:	b2db      	uxtb	r3, r3
 800847a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800847e:	2b28      	cmp	r3, #40	; 0x28
 8008480:	d16a      	bne.n	8008558 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	0c1b      	lsrs	r3, r3, #16
 800848a:	b2db      	uxtb	r3, r3
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	0c1b      	lsrs	r3, r3, #16
 800849a:	b29b      	uxth	r3, r3
 800849c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80084a0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084ae:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80084bc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d138      	bne.n	8008538 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80084c6:	897b      	ldrh	r3, [r7, #10]
 80084c8:	09db      	lsrs	r3, r3, #7
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	89bb      	ldrh	r3, [r7, #12]
 80084ce:	4053      	eors	r3, r2
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	f003 0306 	and.w	r3, r3, #6
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d11c      	bne.n	8008514 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80084da:	897b      	ldrh	r3, [r7, #10]
 80084dc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d13b      	bne.n	8008568 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2208      	movs	r2, #8
 80084fc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008506:	89ba      	ldrh	r2, [r7, #12]
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff fe7c 	bl	800820a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008512:	e029      	b.n	8008568 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008514:	893b      	ldrh	r3, [r7, #8]
 8008516:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fc0c 	bl	8008d3a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800852a:	89ba      	ldrh	r2, [r7, #12]
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7ff fe6a 	bl	800820a <HAL_I2C_AddrCallback>
}
 8008536:	e017      	b.n	8008568 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fbfc 	bl	8008d3a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800854a:	89ba      	ldrh	r2, [r7, #12]
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff fe5a 	bl	800820a <HAL_I2C_AddrCallback>
}
 8008556:	e007      	b.n	8008568 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2208      	movs	r2, #8
 800855e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008568:	bf00      	nop
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	0b9b      	lsrs	r3, r3, #14
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	2b00      	cmp	r3, #0
 8008592:	d008      	beq.n	80085a6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e00d      	b.n	80085c2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	0bdb      	lsrs	r3, r3, #15
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d007      	beq.n	80085c2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b29      	cmp	r3, #41	; 0x29
 80085cc:	d112      	bne.n	80085f4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2228      	movs	r2, #40	; 0x28
 80085d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2221      	movs	r2, #33	; 0x21
 80085da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80085dc:	2101      	movs	r1, #1
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fbab 	bl	8008d3a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff fdf8 	bl	80081e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80085f2:	e017      	b.n	8008624 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b2a      	cmp	r3, #42	; 0x2a
 80085fe:	d111      	bne.n	8008624 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2228      	movs	r2, #40	; 0x28
 8008604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2222      	movs	r2, #34	; 0x22
 800860c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800860e:	2102      	movs	r1, #2
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fb92 	bl	8008d3a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff fde9 	bl	80081f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008648:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2220      	movs	r2, #32
 8008650:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008652:	7bfb      	ldrb	r3, [r7, #15]
 8008654:	2b21      	cmp	r3, #33	; 0x21
 8008656:	d002      	beq.n	800865e <I2C_ITSlaveCplt+0x32>
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	2b29      	cmp	r3, #41	; 0x29
 800865c:	d108      	bne.n	8008670 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800865e:	f248 0101 	movw	r1, #32769	; 0x8001
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fb69 	bl	8008d3a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2221      	movs	r2, #33	; 0x21
 800866c:	631a      	str	r2, [r3, #48]	; 0x30
 800866e:	e00d      	b.n	800868c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	2b22      	cmp	r3, #34	; 0x22
 8008674:	d002      	beq.n	800867c <I2C_ITSlaveCplt+0x50>
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	2b2a      	cmp	r3, #42	; 0x2a
 800867a:	d107      	bne.n	800868c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800867c:	f248 0102 	movw	r1, #32770	; 0x8002
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fb5a 	bl	8008d3a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2222      	movs	r2, #34	; 0x22
 800868a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800869a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6859      	ldr	r1, [r3, #4]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	4b80      	ldr	r3, [pc, #512]	; (80088a8 <I2C_ITSlaveCplt+0x27c>)
 80086a8:	400b      	ands	r3, r1
 80086aa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fb02 	bl	8008cb6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	0b9b      	lsrs	r3, r3, #14
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d07a      	beq.n	80087b4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80086cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 8111 	beq.w	80088fa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a73      	ldr	r2, [pc, #460]	; (80088ac <I2C_ITSlaveCplt+0x280>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d059      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a71      	ldr	r2, [pc, #452]	; (80088b0 <I2C_ITSlaveCplt+0x284>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d053      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a6f      	ldr	r2, [pc, #444]	; (80088b4 <I2C_ITSlaveCplt+0x288>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d04d      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a6d      	ldr	r2, [pc, #436]	; (80088b8 <I2C_ITSlaveCplt+0x28c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d047      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a6b      	ldr	r2, [pc, #428]	; (80088bc <I2C_ITSlaveCplt+0x290>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d041      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a69      	ldr	r2, [pc, #420]	; (80088c0 <I2C_ITSlaveCplt+0x294>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d03b      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a67      	ldr	r2, [pc, #412]	; (80088c4 <I2C_ITSlaveCplt+0x298>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d035      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a65      	ldr	r2, [pc, #404]	; (80088c8 <I2C_ITSlaveCplt+0x29c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d02f      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a63      	ldr	r2, [pc, #396]	; (80088cc <I2C_ITSlaveCplt+0x2a0>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d029      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a61      	ldr	r2, [pc, #388]	; (80088d0 <I2C_ITSlaveCplt+0x2a4>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d023      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a5f      	ldr	r2, [pc, #380]	; (80088d4 <I2C_ITSlaveCplt+0x2a8>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d01d      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a5d      	ldr	r2, [pc, #372]	; (80088d8 <I2C_ITSlaveCplt+0x2ac>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d017      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a5b      	ldr	r2, [pc, #364]	; (80088dc <I2C_ITSlaveCplt+0x2b0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d011      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a59      	ldr	r2, [pc, #356]	; (80088e0 <I2C_ITSlaveCplt+0x2b4>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d00b      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a57      	ldr	r2, [pc, #348]	; (80088e4 <I2C_ITSlaveCplt+0x2b8>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d005      	beq.n	8008798 <I2C_ITSlaveCplt+0x16c>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a55      	ldr	r2, [pc, #340]	; (80088e8 <I2C_ITSlaveCplt+0x2bc>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d105      	bne.n	80087a4 <I2C_ITSlaveCplt+0x178>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	e004      	b.n	80087ae <I2C_ITSlaveCplt+0x182>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	8553      	strh	r3, [r2, #42]	; 0x2a
 80087b2:	e0a2      	b.n	80088fa <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	0bdb      	lsrs	r3, r3, #15
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 809c 	beq.w	80088fa <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 808f 	beq.w	80088fa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a32      	ldr	r2, [pc, #200]	; (80088ac <I2C_ITSlaveCplt+0x280>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d059      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a30      	ldr	r2, [pc, #192]	; (80088b0 <I2C_ITSlaveCplt+0x284>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d053      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a2e      	ldr	r2, [pc, #184]	; (80088b4 <I2C_ITSlaveCplt+0x288>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d04d      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a2c      	ldr	r2, [pc, #176]	; (80088b8 <I2C_ITSlaveCplt+0x28c>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d047      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a2a      	ldr	r2, [pc, #168]	; (80088bc <I2C_ITSlaveCplt+0x290>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d041      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a28      	ldr	r2, [pc, #160]	; (80088c0 <I2C_ITSlaveCplt+0x294>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d03b      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a26      	ldr	r2, [pc, #152]	; (80088c4 <I2C_ITSlaveCplt+0x298>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d035      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a24      	ldr	r2, [pc, #144]	; (80088c8 <I2C_ITSlaveCplt+0x29c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d02f      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a22      	ldr	r2, [pc, #136]	; (80088cc <I2C_ITSlaveCplt+0x2a0>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d029      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a20      	ldr	r2, [pc, #128]	; (80088d0 <I2C_ITSlaveCplt+0x2a4>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d023      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a1e      	ldr	r2, [pc, #120]	; (80088d4 <I2C_ITSlaveCplt+0x2a8>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d01d      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a1c      	ldr	r2, [pc, #112]	; (80088d8 <I2C_ITSlaveCplt+0x2ac>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d017      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a1a      	ldr	r2, [pc, #104]	; (80088dc <I2C_ITSlaveCplt+0x2b0>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d011      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a18      	ldr	r2, [pc, #96]	; (80088e0 <I2C_ITSlaveCplt+0x2b4>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d00b      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a16      	ldr	r2, [pc, #88]	; (80088e4 <I2C_ITSlaveCplt+0x2b8>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d005      	beq.n	800889c <I2C_ITSlaveCplt+0x270>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a14      	ldr	r2, [pc, #80]	; (80088e8 <I2C_ITSlaveCplt+0x2bc>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d127      	bne.n	80088ec <I2C_ITSlaveCplt+0x2c0>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	e026      	b.n	80088f6 <I2C_ITSlaveCplt+0x2ca>
 80088a8:	fe00e800 	.word	0xfe00e800
 80088ac:	40020010 	.word	0x40020010
 80088b0:	40020028 	.word	0x40020028
 80088b4:	40020040 	.word	0x40020040
 80088b8:	40020058 	.word	0x40020058
 80088bc:	40020070 	.word	0x40020070
 80088c0:	40020088 	.word	0x40020088
 80088c4:	400200a0 	.word	0x400200a0
 80088c8:	400200b8 	.word	0x400200b8
 80088cc:	40020410 	.word	0x40020410
 80088d0:	40020428 	.word	0x40020428
 80088d4:	40020440 	.word	0x40020440
 80088d8:	40020458 	.word	0x40020458
 80088dc:	40020470 	.word	0x40020470
 80088e0:	40020488 	.word	0x40020488
 80088e4:	400204a0 	.word	0x400204a0
 80088e8:	400204b8 	.word	0x400204b8
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	089b      	lsrs	r3, r3, #2
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d020      	beq.n	8008948 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f023 0304 	bic.w	r3, r3, #4
 800890c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	b2d2      	uxtb	r2, r2
 800891a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00c      	beq.n	8008948 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008932:	3b01      	subs	r3, #1
 8008934:	b29a      	uxth	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800893e:	b29b      	uxth	r3, r3
 8008940:	3b01      	subs	r3, #1
 8008942:	b29a      	uxth	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800894c:	b29b      	uxth	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d005      	beq.n	800895e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008956:	f043 0204 	orr.w	r2, r3, #4
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008970:	2b00      	cmp	r3, #0
 8008972:	d010      	beq.n	8008996 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f8a4 	bl	8008ac8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b28      	cmp	r3, #40	; 0x28
 800898a:	d141      	bne.n	8008a10 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800898c:	6979      	ldr	r1, [r7, #20]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f844 	bl	8008a1c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008994:	e03c      	b.n	8008a10 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800899e:	d014      	beq.n	80089ca <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff fde5 	bl	8008570 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a1b      	ldr	r2, [pc, #108]	; (8008a18 <I2C_ITSlaveCplt+0x3ec>)
 80089aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff fc2f 	bl	8008226 <HAL_I2C_ListenCpltCallback>
}
 80089c8:	e022      	b.n	8008a10 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b22      	cmp	r3, #34	; 0x22
 80089d4:	d10e      	bne.n	80089f4 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7ff fc02 	bl	80081f6 <HAL_I2C_SlaveRxCpltCallback>
}
 80089f2:	e00d      	b.n	8008a10 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff fbe9 	bl	80081e2 <HAL_I2C_SlaveTxCpltCallback>
}
 8008a10:	bf00      	nop
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	ffff0000 	.word	0xffff0000

08008a1c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a26      	ldr	r2, [pc, #152]	; (8008ac4 <I2C_ITListenCplt+0xa8>)
 8008a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	089b      	lsrs	r3, r3, #2
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d022      	beq.n	8008a9a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	b2d2      	uxtb	r2, r2
 8008a60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d012      	beq.n	8008a9a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	3b01      	subs	r3, #1
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a92:	f043 0204 	orr.w	r2, r3, #4
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008a9a:	f248 0103 	movw	r1, #32771	; 0x8003
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f94b 	bl	8008d3a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2210      	movs	r2, #16
 8008aaa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff fbb6 	bl	8008226 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	ffff0000 	.word	0xffff0000

08008ac8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a5d      	ldr	r2, [pc, #372]	; (8008c5c <I2C_ITError+0x194>)
 8008ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	431a      	orrs	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
 8008afc:	2b28      	cmp	r3, #40	; 0x28
 8008afe:	d005      	beq.n	8008b0c <I2C_ITError+0x44>
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
 8008b02:	2b29      	cmp	r3, #41	; 0x29
 8008b04:	d002      	beq.n	8008b0c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	2b2a      	cmp	r3, #42	; 0x2a
 8008b0a:	d10b      	bne.n	8008b24 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b0c:	2103      	movs	r1, #3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f913 	bl	8008d3a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2228      	movs	r2, #40	; 0x28
 8008b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a50      	ldr	r2, [pc, #320]	; (8008c60 <I2C_ITError+0x198>)
 8008b20:	635a      	str	r2, [r3, #52]	; 0x34
 8008b22:	e011      	b.n	8008b48 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b24:	f248 0103 	movw	r1, #32771	; 0x8003
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f906 	bl	8008d3a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b60      	cmp	r3, #96	; 0x60
 8008b38:	d003      	beq.n	8008b42 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2220      	movs	r2, #32
 8008b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d039      	beq.n	8008bca <I2C_ITError+0x102>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2b11      	cmp	r3, #17
 8008b5a:	d002      	beq.n	8008b62 <I2C_ITError+0x9a>
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b21      	cmp	r3, #33	; 0x21
 8008b60:	d133      	bne.n	8008bca <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b70:	d107      	bne.n	8008b82 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b80:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fd ff70 	bl	8006a6c <HAL_DMA_GetState>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d017      	beq.n	8008bc2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b96:	4a33      	ldr	r2, [pc, #204]	; (8008c64 <I2C_ITError+0x19c>)
 8008b98:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fc fdf0 	bl	800578c <HAL_DMA_Abort_IT>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d04d      	beq.n	8008c4e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008bc0:	e045      	b.n	8008c4e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f850 	bl	8008c68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008bc8:	e041      	b.n	8008c4e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d039      	beq.n	8008c46 <I2C_ITError+0x17e>
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b12      	cmp	r3, #18
 8008bd6:	d002      	beq.n	8008bde <I2C_ITError+0x116>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b22      	cmp	r3, #34	; 0x22
 8008bdc:	d133      	bne.n	8008c46 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bec:	d107      	bne.n	8008bfe <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bfc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fd ff32 	bl	8006a6c <HAL_DMA_GetState>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d017      	beq.n	8008c3e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c12:	4a14      	ldr	r2, [pc, #80]	; (8008c64 <I2C_ITError+0x19c>)
 8008c14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fc fdb2 	bl	800578c <HAL_DMA_Abort_IT>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d011      	beq.n	8008c52 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c3c:	e009      	b.n	8008c52 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f812 	bl	8008c68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c44:	e005      	b.n	8008c52 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f80e 	bl	8008c68 <I2C_TreatErrorCallback>
  }
}
 8008c4c:	e002      	b.n	8008c54 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c4e:	bf00      	nop
 8008c50:	e000      	b.n	8008c54 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c52:	bf00      	nop
}
 8008c54:	bf00      	nop
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	ffff0000 	.word	0xffff0000
 8008c60:	08008263 	.word	0x08008263
 8008c64:	08008cff 	.word	0x08008cff

08008c68 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b60      	cmp	r3, #96	; 0x60
 8008c7a:	d10e      	bne.n	8008c9a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fadb 	bl	800824e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008c98:	e009      	b.n	8008cae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7ff fac6 	bl	800823a <HAL_I2C_ErrorCallback>
}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	f003 0302 	and.w	r3, r3, #2
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d103      	bne.n	8008cd4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d007      	beq.n	8008cf2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	699a      	ldr	r2, [r3, #24]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f042 0201 	orr.w	r2, r2, #1
 8008cf0:	619a      	str	r2, [r3, #24]
  }
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d18:	2200      	movs	r2, #0
 8008d1a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d28:	2200      	movs	r2, #0
 8008d2a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f7ff ff9b 	bl	8008c68 <I2C_TreatErrorCallback>
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	460b      	mov	r3, r1
 8008d44:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008d4a:	887b      	ldrh	r3, [r7, #2]
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00f      	beq.n	8008d74 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008d5a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008d68:	2b28      	cmp	r3, #40	; 0x28
 8008d6a:	d003      	beq.n	8008d74 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008d72:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008d74:	887b      	ldrh	r3, [r7, #2]
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00f      	beq.n	8008d9e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008d84:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008d92:	2b28      	cmp	r3, #40	; 0x28
 8008d94:	d003      	beq.n	8008d9e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008d9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008d9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	da03      	bge.n	8008dae <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008dac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008dae:	887b      	ldrh	r3, [r7, #2]
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d103      	bne.n	8008dbc <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008dba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008dbc:	887b      	ldrh	r3, [r7, #2]
 8008dbe:	2b20      	cmp	r3, #32
 8008dc0:	d103      	bne.n	8008dca <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f043 0320 	orr.w	r3, r3, #32
 8008dc8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008dca:	887b      	ldrh	r3, [r7, #2]
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d103      	bne.n	8008dd8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6819      	ldr	r1, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	43da      	mvns	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	400a      	ands	r2, r1
 8008de8:	601a      	str	r2, [r3, #0]
}
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b20      	cmp	r3, #32
 8008e0a:	d138      	bne.n	8008e7e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d101      	bne.n	8008e1a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008e16:	2302      	movs	r3, #2
 8008e18:	e032      	b.n	8008e80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2224      	movs	r2, #36	; 0x24
 8008e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 0201 	bic.w	r2, r2, #1
 8008e38:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e48:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6819      	ldr	r1, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0201 	orr.w	r2, r2, #1
 8008e68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2220      	movs	r2, #32
 8008e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e000      	b.n	8008e80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e7e:	2302      	movs	r3, #2
  }
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	d139      	bne.n	8008f16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e033      	b.n	8008f18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2224      	movs	r2, #36	; 0x24
 8008ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0201 	bic.w	r2, r2, #1
 8008ece:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008ede:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	021b      	lsls	r3, r3, #8
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0201 	orr.w	r2, r2, #1
 8008f00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2220      	movs	r2, #32
 8008f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	e000      	b.n	8008f18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008f16:	2302      	movs	r3, #2
  }
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f2c:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f32:	4a0c      	ldr	r2, [pc, #48]	; (8008f64 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008f34:	f043 0302 	orr.w	r3, r3, #2
 8008f38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008f3c:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f42:	f003 0302 	and.w	r3, r3, #2
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8008f4a:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	4906      	ldr	r1, [pc, #24]	; (8008f68 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	604b      	str	r3, [r1, #4]
}
 8008f56:	bf00      	nop
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	58024400 	.word	0x58024400
 8008f68:	58000400 	.word	0x58000400

08008f6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008f74:	4b19      	ldr	r3, [pc, #100]	; (8008fdc <HAL_PWREx_ConfigSupply+0x70>)
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	f003 0304 	and.w	r3, r3, #4
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d00a      	beq.n	8008f96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008f80:	4b16      	ldr	r3, [pc, #88]	; (8008fdc <HAL_PWREx_ConfigSupply+0x70>)
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d001      	beq.n	8008f92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e01f      	b.n	8008fd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e01d      	b.n	8008fd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008f96:	4b11      	ldr	r3, [pc, #68]	; (8008fdc <HAL_PWREx_ConfigSupply+0x70>)
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f023 0207 	bic.w	r2, r3, #7
 8008f9e:	490f      	ldr	r1, [pc, #60]	; (8008fdc <HAL_PWREx_ConfigSupply+0x70>)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008fa6:	f7f9 ff69 	bl	8002e7c <HAL_GetTick>
 8008faa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008fac:	e009      	b.n	8008fc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008fae:	f7f9 ff65 	bl	8002e7c <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fbc:	d901      	bls.n	8008fc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e007      	b.n	8008fd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008fc2:	4b06      	ldr	r3, [pc, #24]	; (8008fdc <HAL_PWREx_ConfigSupply+0x70>)
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fce:	d1ee      	bne.n	8008fae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	58024800 	.word	0x58024800

08008fe0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08c      	sub	sp, #48	; 0x30
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e3fd      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 8087 	beq.w	800910e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009000:	4b99      	ldr	r3, [pc, #612]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009008:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800900a:	4b97      	ldr	r3, [pc, #604]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 800900c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009012:	2b10      	cmp	r3, #16
 8009014:	d007      	beq.n	8009026 <HAL_RCC_OscConfig+0x46>
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	2b18      	cmp	r3, #24
 800901a:	d110      	bne.n	800903e <HAL_RCC_OscConfig+0x5e>
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	2b02      	cmp	r3, #2
 8009024:	d10b      	bne.n	800903e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009026:	4b90      	ldr	r3, [pc, #576]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d06c      	beq.n	800910c <HAL_RCC_OscConfig+0x12c>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d168      	bne.n	800910c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e3d7      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009046:	d106      	bne.n	8009056 <HAL_RCC_OscConfig+0x76>
 8009048:	4b87      	ldr	r3, [pc, #540]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a86      	ldr	r2, [pc, #536]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 800904e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	e02e      	b.n	80090b4 <HAL_RCC_OscConfig+0xd4>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10c      	bne.n	8009078 <HAL_RCC_OscConfig+0x98>
 800905e:	4b82      	ldr	r3, [pc, #520]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a81      	ldr	r2, [pc, #516]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	4b7f      	ldr	r3, [pc, #508]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a7e      	ldr	r2, [pc, #504]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	e01d      	b.n	80090b4 <HAL_RCC_OscConfig+0xd4>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009080:	d10c      	bne.n	800909c <HAL_RCC_OscConfig+0xbc>
 8009082:	4b79      	ldr	r3, [pc, #484]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a78      	ldr	r2, [pc, #480]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	4b76      	ldr	r3, [pc, #472]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a75      	ldr	r2, [pc, #468]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	e00b      	b.n	80090b4 <HAL_RCC_OscConfig+0xd4>
 800909c:	4b72      	ldr	r3, [pc, #456]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a71      	ldr	r2, [pc, #452]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 80090a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	4b6f      	ldr	r3, [pc, #444]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a6e      	ldr	r2, [pc, #440]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 80090ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d013      	beq.n	80090e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090bc:	f7f9 fede 	bl	8002e7c <HAL_GetTick>
 80090c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090c2:	e008      	b.n	80090d6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090c4:	f7f9 feda 	bl	8002e7c <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	2b64      	cmp	r3, #100	; 0x64
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e38b      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090d6:	4b64      	ldr	r3, [pc, #400]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0f0      	beq.n	80090c4 <HAL_RCC_OscConfig+0xe4>
 80090e2:	e014      	b.n	800910e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e4:	f7f9 feca 	bl	8002e7c <HAL_GetTick>
 80090e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80090ea:	e008      	b.n	80090fe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090ec:	f7f9 fec6 	bl	8002e7c <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	2b64      	cmp	r3, #100	; 0x64
 80090f8:	d901      	bls.n	80090fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e377      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80090fe:	4b5a      	ldr	r3, [pc, #360]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1f0      	bne.n	80090ec <HAL_RCC_OscConfig+0x10c>
 800910a:	e000      	b.n	800910e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800910c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 80ae 	beq.w	8009278 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800911c:	4b52      	ldr	r3, [pc, #328]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009124:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009126:	4b50      	ldr	r3, [pc, #320]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d007      	beq.n	8009142 <HAL_RCC_OscConfig+0x162>
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	2b18      	cmp	r3, #24
 8009136:	d13a      	bne.n	80091ae <HAL_RCC_OscConfig+0x1ce>
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d135      	bne.n	80091ae <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009142:	4b49      	ldr	r3, [pc, #292]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0304 	and.w	r3, r3, #4
 800914a:	2b00      	cmp	r3, #0
 800914c:	d005      	beq.n	800915a <HAL_RCC_OscConfig+0x17a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e349      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800915a:	f7f9 fe9b 	bl	8002e94 <HAL_GetREVID>
 800915e:	4603      	mov	r3, r0
 8009160:	f241 0203 	movw	r2, #4099	; 0x1003
 8009164:	4293      	cmp	r3, r2
 8009166:	d817      	bhi.n	8009198 <HAL_RCC_OscConfig+0x1b8>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	2b40      	cmp	r3, #64	; 0x40
 800916e:	d108      	bne.n	8009182 <HAL_RCC_OscConfig+0x1a2>
 8009170:	4b3d      	ldr	r3, [pc, #244]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009178:	4a3b      	ldr	r2, [pc, #236]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 800917a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800917e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009180:	e07a      	b.n	8009278 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009182:	4b39      	ldr	r3, [pc, #228]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	031b      	lsls	r3, r3, #12
 8009190:	4935      	ldr	r1, [pc, #212]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009192:	4313      	orrs	r3, r2
 8009194:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009196:	e06f      	b.n	8009278 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009198:	4b33      	ldr	r3, [pc, #204]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	061b      	lsls	r3, r3, #24
 80091a6:	4930      	ldr	r1, [pc, #192]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 80091a8:	4313      	orrs	r3, r2
 80091aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80091ac:	e064      	b.n	8009278 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d045      	beq.n	8009242 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80091b6:	4b2c      	ldr	r3, [pc, #176]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f023 0219 	bic.w	r2, r3, #25
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	4929      	ldr	r1, [pc, #164]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c8:	f7f9 fe58 	bl	8002e7c <HAL_GetTick>
 80091cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091ce:	e008      	b.n	80091e2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091d0:	f7f9 fe54 	bl	8002e7c <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d901      	bls.n	80091e2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e305      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091e2:	4b21      	ldr	r3, [pc, #132]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0304 	and.w	r3, r3, #4
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d0f0      	beq.n	80091d0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091ee:	f7f9 fe51 	bl	8002e94 <HAL_GetREVID>
 80091f2:	4603      	mov	r3, r0
 80091f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d817      	bhi.n	800922c <HAL_RCC_OscConfig+0x24c>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	2b40      	cmp	r3, #64	; 0x40
 8009202:	d108      	bne.n	8009216 <HAL_RCC_OscConfig+0x236>
 8009204:	4b18      	ldr	r3, [pc, #96]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800920c:	4a16      	ldr	r2, [pc, #88]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 800920e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009212:	6053      	str	r3, [r2, #4]
 8009214:	e030      	b.n	8009278 <HAL_RCC_OscConfig+0x298>
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	031b      	lsls	r3, r3, #12
 8009224:	4910      	ldr	r1, [pc, #64]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009226:	4313      	orrs	r3, r2
 8009228:	604b      	str	r3, [r1, #4]
 800922a:	e025      	b.n	8009278 <HAL_RCC_OscConfig+0x298>
 800922c:	4b0e      	ldr	r3, [pc, #56]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	061b      	lsls	r3, r3, #24
 800923a:	490b      	ldr	r1, [pc, #44]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 800923c:	4313      	orrs	r3, r2
 800923e:	604b      	str	r3, [r1, #4]
 8009240:	e01a      	b.n	8009278 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009242:	4b09      	ldr	r3, [pc, #36]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a08      	ldr	r2, [pc, #32]	; (8009268 <HAL_RCC_OscConfig+0x288>)
 8009248:	f023 0301 	bic.w	r3, r3, #1
 800924c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800924e:	f7f9 fe15 	bl	8002e7c <HAL_GetTick>
 8009252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009254:	e00a      	b.n	800926c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009256:	f7f9 fe11 	bl	8002e7c <HAL_GetTick>
 800925a:	4602      	mov	r2, r0
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	2b02      	cmp	r3, #2
 8009262:	d903      	bls.n	800926c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	e2c2      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
 8009268:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800926c:	4b94      	ldr	r3, [pc, #592]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1ee      	bne.n	8009256 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0310 	and.w	r3, r3, #16
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 80a9 	beq.w	80093d8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009286:	4b8e      	ldr	r3, [pc, #568]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800928e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009290:	4b8b      	ldr	r3, [pc, #556]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009294:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	2b08      	cmp	r3, #8
 800929a:	d007      	beq.n	80092ac <HAL_RCC_OscConfig+0x2cc>
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	2b18      	cmp	r3, #24
 80092a0:	d13a      	bne.n	8009318 <HAL_RCC_OscConfig+0x338>
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d135      	bne.n	8009318 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80092ac:	4b84      	ldr	r3, [pc, #528]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d005      	beq.n	80092c4 <HAL_RCC_OscConfig+0x2e4>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	2b80      	cmp	r3, #128	; 0x80
 80092be:	d001      	beq.n	80092c4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e294      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80092c4:	f7f9 fde6 	bl	8002e94 <HAL_GetREVID>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d817      	bhi.n	8009302 <HAL_RCC_OscConfig+0x322>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	2b20      	cmp	r3, #32
 80092d8:	d108      	bne.n	80092ec <HAL_RCC_OscConfig+0x30c>
 80092da:	4b79      	ldr	r3, [pc, #484]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80092e2:	4a77      	ldr	r2, [pc, #476]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 80092e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80092ea:	e075      	b.n	80093d8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80092ec:	4b74      	ldr	r3, [pc, #464]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	069b      	lsls	r3, r3, #26
 80092fa:	4971      	ldr	r1, [pc, #452]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 80092fc:	4313      	orrs	r3, r2
 80092fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009300:	e06a      	b.n	80093d8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009302:	4b6f      	ldr	r3, [pc, #444]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	061b      	lsls	r3, r3, #24
 8009310:	496b      	ldr	r1, [pc, #428]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009312:	4313      	orrs	r3, r2
 8009314:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009316:	e05f      	b.n	80093d8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	69db      	ldr	r3, [r3, #28]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d042      	beq.n	80093a6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009320:	4b67      	ldr	r3, [pc, #412]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a66      	ldr	r2, [pc, #408]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800932a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800932c:	f7f9 fda6 	bl	8002e7c <HAL_GetTick>
 8009330:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009332:	e008      	b.n	8009346 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009334:	f7f9 fda2 	bl	8002e7c <HAL_GetTick>
 8009338:	4602      	mov	r2, r0
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	2b02      	cmp	r3, #2
 8009340:	d901      	bls.n	8009346 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e253      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009346:	4b5e      	ldr	r3, [pc, #376]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0f0      	beq.n	8009334 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009352:	f7f9 fd9f 	bl	8002e94 <HAL_GetREVID>
 8009356:	4603      	mov	r3, r0
 8009358:	f241 0203 	movw	r2, #4099	; 0x1003
 800935c:	4293      	cmp	r3, r2
 800935e:	d817      	bhi.n	8009390 <HAL_RCC_OscConfig+0x3b0>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	2b20      	cmp	r3, #32
 8009366:	d108      	bne.n	800937a <HAL_RCC_OscConfig+0x39a>
 8009368:	4b55      	ldr	r3, [pc, #340]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009370:	4a53      	ldr	r2, [pc, #332]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009372:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009376:	6053      	str	r3, [r2, #4]
 8009378:	e02e      	b.n	80093d8 <HAL_RCC_OscConfig+0x3f8>
 800937a:	4b51      	ldr	r3, [pc, #324]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	069b      	lsls	r3, r3, #26
 8009388:	494d      	ldr	r1, [pc, #308]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 800938a:	4313      	orrs	r3, r2
 800938c:	604b      	str	r3, [r1, #4]
 800938e:	e023      	b.n	80093d8 <HAL_RCC_OscConfig+0x3f8>
 8009390:	4b4b      	ldr	r3, [pc, #300]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a1b      	ldr	r3, [r3, #32]
 800939c:	061b      	lsls	r3, r3, #24
 800939e:	4948      	ldr	r1, [pc, #288]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	60cb      	str	r3, [r1, #12]
 80093a4:	e018      	b.n	80093d8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80093a6:	4b46      	ldr	r3, [pc, #280]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a45      	ldr	r2, [pc, #276]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 80093ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093b2:	f7f9 fd63 	bl	8002e7c <HAL_GetTick>
 80093b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80093b8:	e008      	b.n	80093cc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80093ba:	f7f9 fd5f 	bl	8002e7c <HAL_GetTick>
 80093be:	4602      	mov	r2, r0
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d901      	bls.n	80093cc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e210      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80093cc:	4b3c      	ldr	r3, [pc, #240]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1f0      	bne.n	80093ba <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 0308 	and.w	r3, r3, #8
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d036      	beq.n	8009452 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d019      	beq.n	8009420 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093ec:	4b34      	ldr	r3, [pc, #208]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 80093ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093f0:	4a33      	ldr	r2, [pc, #204]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 80093f2:	f043 0301 	orr.w	r3, r3, #1
 80093f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093f8:	f7f9 fd40 	bl	8002e7c <HAL_GetTick>
 80093fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80093fe:	e008      	b.n	8009412 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009400:	f7f9 fd3c 	bl	8002e7c <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	2b02      	cmp	r3, #2
 800940c:	d901      	bls.n	8009412 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e1ed      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009412:	4b2b      	ldr	r3, [pc, #172]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0f0      	beq.n	8009400 <HAL_RCC_OscConfig+0x420>
 800941e:	e018      	b.n	8009452 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009420:	4b27      	ldr	r3, [pc, #156]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009424:	4a26      	ldr	r2, [pc, #152]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009426:	f023 0301 	bic.w	r3, r3, #1
 800942a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800942c:	f7f9 fd26 	bl	8002e7c <HAL_GetTick>
 8009430:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009432:	e008      	b.n	8009446 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009434:	f7f9 fd22 	bl	8002e7c <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	2b02      	cmp	r3, #2
 8009440:	d901      	bls.n	8009446 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	e1d3      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009446:	4b1e      	ldr	r3, [pc, #120]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1f0      	bne.n	8009434 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0320 	and.w	r3, r3, #32
 800945a:	2b00      	cmp	r3, #0
 800945c:	d038      	beq.n	80094d0 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d019      	beq.n	800949a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009466:	4b16      	ldr	r3, [pc, #88]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a15      	ldr	r2, [pc, #84]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 800946c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009470:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009472:	f7f9 fd03 	bl	8002e7c <HAL_GetTick>
 8009476:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009478:	e008      	b.n	800948c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800947a:	f7f9 fcff 	bl	8002e7c <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	2b02      	cmp	r3, #2
 8009486:	d901      	bls.n	800948c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e1b0      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800948c:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0f0      	beq.n	800947a <HAL_RCC_OscConfig+0x49a>
 8009498:	e01a      	b.n	80094d0 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800949a:	4b09      	ldr	r3, [pc, #36]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a08      	ldr	r2, [pc, #32]	; (80094c0 <HAL_RCC_OscConfig+0x4e0>)
 80094a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80094a6:	f7f9 fce9 	bl	8002e7c <HAL_GetTick>
 80094aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80094ac:	e00a      	b.n	80094c4 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80094ae:	f7f9 fce5 	bl	8002e7c <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d903      	bls.n	80094c4 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e196      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
 80094c0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80094c4:	4b99      	ldr	r3, [pc, #612]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1ee      	bne.n	80094ae <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0304 	and.w	r3, r3, #4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 8081 	beq.w	80095e0 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80094de:	4b94      	ldr	r3, [pc, #592]	; (8009730 <HAL_RCC_OscConfig+0x750>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a93      	ldr	r2, [pc, #588]	; (8009730 <HAL_RCC_OscConfig+0x750>)
 80094e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094ea:	f7f9 fcc7 	bl	8002e7c <HAL_GetTick>
 80094ee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094f0:	e008      	b.n	8009504 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80094f2:	f7f9 fcc3 	bl	8002e7c <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	2b64      	cmp	r3, #100	; 0x64
 80094fe:	d901      	bls.n	8009504 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e174      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009504:	4b8a      	ldr	r3, [pc, #552]	; (8009730 <HAL_RCC_OscConfig+0x750>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0f0      	beq.n	80094f2 <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d106      	bne.n	8009526 <HAL_RCC_OscConfig+0x546>
 8009518:	4b84      	ldr	r3, [pc, #528]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 800951a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951c:	4a83      	ldr	r2, [pc, #524]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 800951e:	f043 0301 	orr.w	r3, r3, #1
 8009522:	6713      	str	r3, [r2, #112]	; 0x70
 8009524:	e02d      	b.n	8009582 <HAL_RCC_OscConfig+0x5a2>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10c      	bne.n	8009548 <HAL_RCC_OscConfig+0x568>
 800952e:	4b7f      	ldr	r3, [pc, #508]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009532:	4a7e      	ldr	r2, [pc, #504]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009534:	f023 0301 	bic.w	r3, r3, #1
 8009538:	6713      	str	r3, [r2, #112]	; 0x70
 800953a:	4b7c      	ldr	r3, [pc, #496]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 800953c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953e:	4a7b      	ldr	r2, [pc, #492]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009540:	f023 0304 	bic.w	r3, r3, #4
 8009544:	6713      	str	r3, [r2, #112]	; 0x70
 8009546:	e01c      	b.n	8009582 <HAL_RCC_OscConfig+0x5a2>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	2b05      	cmp	r3, #5
 800954e:	d10c      	bne.n	800956a <HAL_RCC_OscConfig+0x58a>
 8009550:	4b76      	ldr	r3, [pc, #472]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009554:	4a75      	ldr	r2, [pc, #468]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009556:	f043 0304 	orr.w	r3, r3, #4
 800955a:	6713      	str	r3, [r2, #112]	; 0x70
 800955c:	4b73      	ldr	r3, [pc, #460]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 800955e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009560:	4a72      	ldr	r2, [pc, #456]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009562:	f043 0301 	orr.w	r3, r3, #1
 8009566:	6713      	str	r3, [r2, #112]	; 0x70
 8009568:	e00b      	b.n	8009582 <HAL_RCC_OscConfig+0x5a2>
 800956a:	4b70      	ldr	r3, [pc, #448]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 800956c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956e:	4a6f      	ldr	r2, [pc, #444]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009570:	f023 0301 	bic.w	r3, r3, #1
 8009574:	6713      	str	r3, [r2, #112]	; 0x70
 8009576:	4b6d      	ldr	r3, [pc, #436]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957a:	4a6c      	ldr	r2, [pc, #432]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 800957c:	f023 0304 	bic.w	r3, r3, #4
 8009580:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d015      	beq.n	80095b6 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800958a:	f7f9 fc77 	bl	8002e7c <HAL_GetTick>
 800958e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009590:	e00a      	b.n	80095a8 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009592:	f7f9 fc73 	bl	8002e7c <HAL_GetTick>
 8009596:	4602      	mov	r2, r0
 8009598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d901      	bls.n	80095a8 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e122      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095a8:	4b60      	ldr	r3, [pc, #384]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80095aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ac:	f003 0302 	and.w	r3, r3, #2
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d0ee      	beq.n	8009592 <HAL_RCC_OscConfig+0x5b2>
 80095b4:	e014      	b.n	80095e0 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095b6:	f7f9 fc61 	bl	8002e7c <HAL_GetTick>
 80095ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80095bc:	e00a      	b.n	80095d4 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095be:	f7f9 fc5d 	bl	8002e7c <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d901      	bls.n	80095d4 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e10c      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80095d4:	4b55      	ldr	r3, [pc, #340]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80095d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d8:	f003 0302 	and.w	r3, r3, #2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1ee      	bne.n	80095be <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 8101 	beq.w	80097ec <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80095ea:	4b50      	ldr	r3, [pc, #320]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095f2:	2b18      	cmp	r3, #24
 80095f4:	f000 80bc 	beq.w	8009770 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	f040 809d 	bne.w	800973c <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009602:	4b4a      	ldr	r3, [pc, #296]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a49      	ldr	r2, [pc, #292]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800960c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800960e:	f7f9 fc35 	bl	8002e7c <HAL_GetTick>
 8009612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009614:	e008      	b.n	8009628 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009616:	f7f9 fc31 	bl	8002e7c <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	2b02      	cmp	r3, #2
 8009622:	d901      	bls.n	8009628 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e0e2      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009628:	4b40      	ldr	r3, [pc, #256]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1f0      	bne.n	8009616 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009634:	4b3d      	ldr	r3, [pc, #244]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009638:	4b3e      	ldr	r3, [pc, #248]	; (8009734 <HAL_RCC_OscConfig+0x754>)
 800963a:	4013      	ands	r3, r2
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009644:	0112      	lsls	r2, r2, #4
 8009646:	430a      	orrs	r2, r1
 8009648:	4938      	ldr	r1, [pc, #224]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 800964a:	4313      	orrs	r3, r2
 800964c:	628b      	str	r3, [r1, #40]	; 0x28
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009652:	3b01      	subs	r3, #1
 8009654:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965c:	3b01      	subs	r3, #1
 800965e:	025b      	lsls	r3, r3, #9
 8009660:	b29b      	uxth	r3, r3
 8009662:	431a      	orrs	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	3b01      	subs	r3, #1
 800966a:	041b      	lsls	r3, r3, #16
 800966c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009670:	431a      	orrs	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009676:	3b01      	subs	r3, #1
 8009678:	061b      	lsls	r3, r3, #24
 800967a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800967e:	492b      	ldr	r1, [pc, #172]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009680:	4313      	orrs	r3, r2
 8009682:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009684:	4b29      	ldr	r3, [pc, #164]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009688:	4a28      	ldr	r2, [pc, #160]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 800968a:	f023 0301 	bic.w	r3, r3, #1
 800968e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009690:	4b26      	ldr	r3, [pc, #152]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009694:	4b28      	ldr	r3, [pc, #160]	; (8009738 <HAL_RCC_OscConfig+0x758>)
 8009696:	4013      	ands	r3, r2
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800969c:	00d2      	lsls	r2, r2, #3
 800969e:	4923      	ldr	r1, [pc, #140]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096a0:	4313      	orrs	r3, r2
 80096a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80096a4:	4b21      	ldr	r3, [pc, #132]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a8:	f023 020c 	bic.w	r2, r3, #12
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b0:	491e      	ldr	r1, [pc, #120]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80096b6:	4b1d      	ldr	r3, [pc, #116]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ba:	f023 0202 	bic.w	r2, r3, #2
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c2:	491a      	ldr	r1, [pc, #104]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80096c8:	4b18      	ldr	r3, [pc, #96]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096cc:	4a17      	ldr	r2, [pc, #92]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d4:	4b15      	ldr	r3, [pc, #84]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d8:	4a14      	ldr	r2, [pc, #80]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80096e0:	4b12      	ldr	r3, [pc, #72]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	4a11      	ldr	r2, [pc, #68]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80096ec:	4b0f      	ldr	r3, [pc, #60]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f0:	4a0e      	ldr	r2, [pc, #56]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096f2:	f043 0301 	orr.w	r3, r3, #1
 80096f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096f8:	4b0c      	ldr	r3, [pc, #48]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a0b      	ldr	r2, [pc, #44]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 80096fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009704:	f7f9 fbba 	bl	8002e7c <HAL_GetTick>
 8009708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800970a:	e008      	b.n	800971e <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800970c:	f7f9 fbb6 	bl	8002e7c <HAL_GetTick>
 8009710:	4602      	mov	r2, r0
 8009712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	2b02      	cmp	r3, #2
 8009718:	d901      	bls.n	800971e <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 800971a:	2303      	movs	r3, #3
 800971c:	e067      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800971e:	4b03      	ldr	r3, [pc, #12]	; (800972c <HAL_RCC_OscConfig+0x74c>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d0f0      	beq.n	800970c <HAL_RCC_OscConfig+0x72c>
 800972a:	e05f      	b.n	80097ec <HAL_RCC_OscConfig+0x80c>
 800972c:	58024400 	.word	0x58024400
 8009730:	58024800 	.word	0x58024800
 8009734:	fffffc0c 	.word	0xfffffc0c
 8009738:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800973c:	4b2e      	ldr	r3, [pc, #184]	; (80097f8 <HAL_RCC_OscConfig+0x818>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a2d      	ldr	r2, [pc, #180]	; (80097f8 <HAL_RCC_OscConfig+0x818>)
 8009742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009748:	f7f9 fb98 	bl	8002e7c <HAL_GetTick>
 800974c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800974e:	e008      	b.n	8009762 <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009750:	f7f9 fb94 	bl	8002e7c <HAL_GetTick>
 8009754:	4602      	mov	r2, r0
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	2b02      	cmp	r3, #2
 800975c:	d901      	bls.n	8009762 <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	e045      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009762:	4b25      	ldr	r3, [pc, #148]	; (80097f8 <HAL_RCC_OscConfig+0x818>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1f0      	bne.n	8009750 <HAL_RCC_OscConfig+0x770>
 800976e:	e03d      	b.n	80097ec <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009770:	4b21      	ldr	r3, [pc, #132]	; (80097f8 <HAL_RCC_OscConfig+0x818>)
 8009772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009774:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009776:	4b20      	ldr	r3, [pc, #128]	; (80097f8 <HAL_RCC_OscConfig+0x818>)
 8009778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009780:	2b01      	cmp	r3, #1
 8009782:	d031      	beq.n	80097e8 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	f003 0203 	and.w	r2, r3, #3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800978e:	429a      	cmp	r2, r3
 8009790:	d12a      	bne.n	80097e8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	091b      	lsrs	r3, r3, #4
 8009796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800979e:	429a      	cmp	r2, r3
 80097a0:	d122      	bne.n	80097e8 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d11a      	bne.n	80097e8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	0a5b      	lsrs	r3, r3, #9
 80097b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097be:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d111      	bne.n	80097e8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	0c1b      	lsrs	r3, r3, #16
 80097c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d108      	bne.n	80097e8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	0e1b      	lsrs	r3, r3, #24
 80097da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d001      	beq.n	80097ec <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e000      	b.n	80097ee <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3730      	adds	r7, #48	; 0x30
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	58024400 	.word	0x58024400

080097fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	e19c      	b.n	8009b4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009810:	4b8a      	ldr	r3, [pc, #552]	; (8009a3c <HAL_RCC_ClockConfig+0x240>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	429a      	cmp	r2, r3
 800981c:	d910      	bls.n	8009840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800981e:	4b87      	ldr	r3, [pc, #540]	; (8009a3c <HAL_RCC_ClockConfig+0x240>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f023 020f 	bic.w	r2, r3, #15
 8009826:	4985      	ldr	r1, [pc, #532]	; (8009a3c <HAL_RCC_ClockConfig+0x240>)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	4313      	orrs	r3, r2
 800982c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800982e:	4b83      	ldr	r3, [pc, #524]	; (8009a3c <HAL_RCC_ClockConfig+0x240>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 030f 	and.w	r3, r3, #15
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	429a      	cmp	r2, r3
 800983a:	d001      	beq.n	8009840 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e184      	b.n	8009b4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 0304 	and.w	r3, r3, #4
 8009848:	2b00      	cmp	r3, #0
 800984a:	d010      	beq.n	800986e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	691a      	ldr	r2, [r3, #16]
 8009850:	4b7b      	ldr	r3, [pc, #492]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009858:	429a      	cmp	r2, r3
 800985a:	d908      	bls.n	800986e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800985c:	4b78      	ldr	r3, [pc, #480]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	4975      	ldr	r1, [pc, #468]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 800986a:	4313      	orrs	r3, r2
 800986c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 0308 	and.w	r3, r3, #8
 8009876:	2b00      	cmp	r3, #0
 8009878:	d010      	beq.n	800989c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	695a      	ldr	r2, [r3, #20]
 800987e:	4b70      	ldr	r3, [pc, #448]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009886:	429a      	cmp	r2, r3
 8009888:	d908      	bls.n	800989c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800988a:	4b6d      	ldr	r3, [pc, #436]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	496a      	ldr	r1, [pc, #424]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 8009898:	4313      	orrs	r3, r2
 800989a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 0310 	and.w	r3, r3, #16
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d010      	beq.n	80098ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	699a      	ldr	r2, [r3, #24]
 80098ac:	4b64      	ldr	r3, [pc, #400]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 80098ae:	69db      	ldr	r3, [r3, #28]
 80098b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d908      	bls.n	80098ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80098b8:	4b61      	ldr	r3, [pc, #388]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	495e      	ldr	r1, [pc, #376]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0320 	and.w	r3, r3, #32
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d010      	beq.n	80098f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	69da      	ldr	r2, [r3, #28]
 80098da:	4b59      	ldr	r3, [pc, #356]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d908      	bls.n	80098f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80098e6:	4b56      	ldr	r3, [pc, #344]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	4953      	ldr	r1, [pc, #332]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d010      	beq.n	8009926 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68da      	ldr	r2, [r3, #12]
 8009908:	4b4d      	ldr	r3, [pc, #308]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	f003 030f 	and.w	r3, r3, #15
 8009910:	429a      	cmp	r2, r3
 8009912:	d908      	bls.n	8009926 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009914:	4b4a      	ldr	r3, [pc, #296]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	f023 020f 	bic.w	r2, r3, #15
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	4947      	ldr	r1, [pc, #284]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 8009922:	4313      	orrs	r3, r2
 8009924:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d055      	beq.n	80099de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009932:	4b43      	ldr	r3, [pc, #268]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	4940      	ldr	r1, [pc, #256]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 8009940:	4313      	orrs	r3, r2
 8009942:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	2b02      	cmp	r3, #2
 800994a:	d107      	bne.n	800995c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800994c:	4b3c      	ldr	r3, [pc, #240]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d121      	bne.n	800999c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e0f6      	b.n	8009b4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	2b03      	cmp	r3, #3
 8009962:	d107      	bne.n	8009974 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009964:	4b36      	ldr	r3, [pc, #216]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d115      	bne.n	800999c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	e0ea      	b.n	8009b4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d107      	bne.n	800998c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800997c:	4b30      	ldr	r3, [pc, #192]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009984:	2b00      	cmp	r3, #0
 8009986:	d109      	bne.n	800999c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e0de      	b.n	8009b4a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800998c:	4b2c      	ldr	r3, [pc, #176]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e0d6      	b.n	8009b4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800999c:	4b28      	ldr	r3, [pc, #160]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	f023 0207 	bic.w	r2, r3, #7
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	4925      	ldr	r1, [pc, #148]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099ae:	f7f9 fa65 	bl	8002e7c <HAL_GetTick>
 80099b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099b4:	e00a      	b.n	80099cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099b6:	f7f9 fa61 	bl	8002e7c <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d901      	bls.n	80099cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e0be      	b.n	8009b4a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099cc:	4b1c      	ldr	r3, [pc, #112]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	429a      	cmp	r2, r3
 80099dc:	d1eb      	bne.n	80099b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 0302 	and.w	r3, r3, #2
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d010      	beq.n	8009a0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68da      	ldr	r2, [r3, #12]
 80099ee:	4b14      	ldr	r3, [pc, #80]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	f003 030f 	and.w	r3, r3, #15
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d208      	bcs.n	8009a0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099fa:	4b11      	ldr	r3, [pc, #68]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	f023 020f 	bic.w	r2, r3, #15
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	490e      	ldr	r1, [pc, #56]	; (8009a40 <HAL_RCC_ClockConfig+0x244>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a0c:	4b0b      	ldr	r3, [pc, #44]	; (8009a3c <HAL_RCC_ClockConfig+0x240>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 030f 	and.w	r3, r3, #15
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d214      	bcs.n	8009a44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a1a:	4b08      	ldr	r3, [pc, #32]	; (8009a3c <HAL_RCC_ClockConfig+0x240>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f023 020f 	bic.w	r2, r3, #15
 8009a22:	4906      	ldr	r1, [pc, #24]	; (8009a3c <HAL_RCC_ClockConfig+0x240>)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a2a:	4b04      	ldr	r3, [pc, #16]	; (8009a3c <HAL_RCC_ClockConfig+0x240>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 030f 	and.w	r3, r3, #15
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d005      	beq.n	8009a44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e086      	b.n	8009b4a <HAL_RCC_ClockConfig+0x34e>
 8009a3c:	52002000 	.word	0x52002000
 8009a40:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0304 	and.w	r3, r3, #4
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d010      	beq.n	8009a72 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	691a      	ldr	r2, [r3, #16]
 8009a54:	4b3f      	ldr	r3, [pc, #252]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d208      	bcs.n	8009a72 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009a60:	4b3c      	ldr	r3, [pc, #240]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	4939      	ldr	r1, [pc, #228]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 0308 	and.w	r3, r3, #8
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d010      	beq.n	8009aa0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	695a      	ldr	r2, [r3, #20]
 8009a82:	4b34      	ldr	r3, [pc, #208]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d208      	bcs.n	8009aa0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a8e:	4b31      	ldr	r3, [pc, #196]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	492e      	ldr	r1, [pc, #184]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d010      	beq.n	8009ace <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	699a      	ldr	r2, [r3, #24]
 8009ab0:	4b28      	ldr	r3, [pc, #160]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009ab2:	69db      	ldr	r3, [r3, #28]
 8009ab4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d208      	bcs.n	8009ace <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009abc:	4b25      	ldr	r3, [pc, #148]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009abe:	69db      	ldr	r3, [r3, #28]
 8009ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	4922      	ldr	r1, [pc, #136]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009aca:	4313      	orrs	r3, r2
 8009acc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0320 	and.w	r3, r3, #32
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d010      	beq.n	8009afc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	69da      	ldr	r2, [r3, #28]
 8009ade:	4b1d      	ldr	r3, [pc, #116]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d208      	bcs.n	8009afc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009aea:	4b1a      	ldr	r3, [pc, #104]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	4917      	ldr	r1, [pc, #92]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009afc:	f000 f834 	bl	8009b68 <HAL_RCC_GetSysClockFreq>
 8009b00:	4602      	mov	r2, r0
 8009b02:	4b14      	ldr	r3, [pc, #80]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	0a1b      	lsrs	r3, r3, #8
 8009b08:	f003 030f 	and.w	r3, r3, #15
 8009b0c:	4912      	ldr	r1, [pc, #72]	; (8009b58 <HAL_RCC_ClockConfig+0x35c>)
 8009b0e:	5ccb      	ldrb	r3, [r1, r3]
 8009b10:	f003 031f 	and.w	r3, r3, #31
 8009b14:	fa22 f303 	lsr.w	r3, r2, r3
 8009b18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b1a:	4b0e      	ldr	r3, [pc, #56]	; (8009b54 <HAL_RCC_ClockConfig+0x358>)
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	f003 030f 	and.w	r3, r3, #15
 8009b22:	4a0d      	ldr	r2, [pc, #52]	; (8009b58 <HAL_RCC_ClockConfig+0x35c>)
 8009b24:	5cd3      	ldrb	r3, [r2, r3]
 8009b26:	f003 031f 	and.w	r3, r3, #31
 8009b2a:	693a      	ldr	r2, [r7, #16]
 8009b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b30:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <HAL_RCC_ClockConfig+0x360>)
 8009b32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b34:	4a0a      	ldr	r2, [pc, #40]	; (8009b60 <HAL_RCC_ClockConfig+0x364>)
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009b3a:	4b0a      	ldr	r3, [pc, #40]	; (8009b64 <HAL_RCC_ClockConfig+0x368>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7f8 f99e 	bl	8001e80 <HAL_InitTick>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	58024400 	.word	0x58024400
 8009b58:	08011a24 	.word	0x08011a24
 8009b5c:	24000004 	.word	0x24000004
 8009b60:	24000000 	.word	0x24000000
 8009b64:	24000008 	.word	0x24000008

08009b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b089      	sub	sp, #36	; 0x24
 8009b6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b6e:	4bb3      	ldr	r3, [pc, #716]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b76:	2b18      	cmp	r3, #24
 8009b78:	f200 8155 	bhi.w	8009e26 <HAL_RCC_GetSysClockFreq+0x2be>
 8009b7c:	a201      	add	r2, pc, #4	; (adr r2, 8009b84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b82:	bf00      	nop
 8009b84:	08009be9 	.word	0x08009be9
 8009b88:	08009e27 	.word	0x08009e27
 8009b8c:	08009e27 	.word	0x08009e27
 8009b90:	08009e27 	.word	0x08009e27
 8009b94:	08009e27 	.word	0x08009e27
 8009b98:	08009e27 	.word	0x08009e27
 8009b9c:	08009e27 	.word	0x08009e27
 8009ba0:	08009e27 	.word	0x08009e27
 8009ba4:	08009c0f 	.word	0x08009c0f
 8009ba8:	08009e27 	.word	0x08009e27
 8009bac:	08009e27 	.word	0x08009e27
 8009bb0:	08009e27 	.word	0x08009e27
 8009bb4:	08009e27 	.word	0x08009e27
 8009bb8:	08009e27 	.word	0x08009e27
 8009bbc:	08009e27 	.word	0x08009e27
 8009bc0:	08009e27 	.word	0x08009e27
 8009bc4:	08009c15 	.word	0x08009c15
 8009bc8:	08009e27 	.word	0x08009e27
 8009bcc:	08009e27 	.word	0x08009e27
 8009bd0:	08009e27 	.word	0x08009e27
 8009bd4:	08009e27 	.word	0x08009e27
 8009bd8:	08009e27 	.word	0x08009e27
 8009bdc:	08009e27 	.word	0x08009e27
 8009be0:	08009e27 	.word	0x08009e27
 8009be4:	08009c1b 	.word	0x08009c1b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009be8:	4b94      	ldr	r3, [pc, #592]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 0320 	and.w	r3, r3, #32
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d009      	beq.n	8009c08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bf4:	4b91      	ldr	r3, [pc, #580]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	08db      	lsrs	r3, r3, #3
 8009bfa:	f003 0303 	and.w	r3, r3, #3
 8009bfe:	4a90      	ldr	r2, [pc, #576]	; (8009e40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009c00:	fa22 f303 	lsr.w	r3, r2, r3
 8009c04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009c06:	e111      	b.n	8009e2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009c08:	4b8d      	ldr	r3, [pc, #564]	; (8009e40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009c0a:	61bb      	str	r3, [r7, #24]
    break;
 8009c0c:	e10e      	b.n	8009e2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009c0e:	4b8d      	ldr	r3, [pc, #564]	; (8009e44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c10:	61bb      	str	r3, [r7, #24]
    break;
 8009c12:	e10b      	b.n	8009e2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009c14:	4b8c      	ldr	r3, [pc, #560]	; (8009e48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009c16:	61bb      	str	r3, [r7, #24]
    break;
 8009c18:	e108      	b.n	8009e2c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c1a:	4b88      	ldr	r3, [pc, #544]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1e:	f003 0303 	and.w	r3, r3, #3
 8009c22:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009c24:	4b85      	ldr	r3, [pc, #532]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c28:	091b      	lsrs	r3, r3, #4
 8009c2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c2e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009c30:	4b82      	ldr	r3, [pc, #520]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c34:	f003 0301 	and.w	r3, r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009c3a:	4b80      	ldr	r3, [pc, #512]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3e:	08db      	lsrs	r3, r3, #3
 8009c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	fb02 f303 	mul.w	r3, r2, r3
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c52:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 80e1 	beq.w	8009e20 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	f000 8083 	beq.w	8009d6c <HAL_RCC_GetSysClockFreq+0x204>
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	f200 80a1 	bhi.w	8009db0 <HAL_RCC_GetSysClockFreq+0x248>
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d003      	beq.n	8009c7c <HAL_RCC_GetSysClockFreq+0x114>
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d056      	beq.n	8009d28 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009c7a:	e099      	b.n	8009db0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c7c:	4b6f      	ldr	r3, [pc, #444]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0320 	and.w	r3, r3, #32
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d02d      	beq.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c88:	4b6c      	ldr	r3, [pc, #432]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	08db      	lsrs	r3, r3, #3
 8009c8e:	f003 0303 	and.w	r3, r3, #3
 8009c92:	4a6b      	ldr	r2, [pc, #428]	; (8009e40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009c94:	fa22 f303 	lsr.w	r3, r2, r3
 8009c98:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	ee07 3a90 	vmov	s15, r3
 8009ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	ee07 3a90 	vmov	s15, r3
 8009caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb2:	4b62      	ldr	r3, [pc, #392]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cc6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009e4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009ce2:	e087      	b.n	8009df4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009e50 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf6:	4b51      	ldr	r3, [pc, #324]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d0a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009e4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d26:	e065      	b.n	8009df4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	ee07 3a90 	vmov	s15, r3
 8009d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d32:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009e54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d3a:	4b40      	ldr	r3, [pc, #256]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d42:	ee07 3a90 	vmov	s15, r3
 8009d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d4e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009e4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d6a:	e043      	b.n	8009df4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	ee07 3a90 	vmov	s15, r3
 8009d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d76:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009e58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d7e:	4b2f      	ldr	r3, [pc, #188]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d92:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009e4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dae:	e021      	b.n	8009df4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	ee07 3a90 	vmov	s15, r3
 8009db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009e54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc2:	4b1e      	ldr	r3, [pc, #120]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009dd6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009e4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009df2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009df4:	4b11      	ldr	r3, [pc, #68]	; (8009e3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df8:	0a5b      	lsrs	r3, r3, #9
 8009dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dfe:	3301      	adds	r3, #1
 8009e00:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	ee07 3a90 	vmov	s15, r3
 8009e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e18:	ee17 3a90 	vmov	r3, s15
 8009e1c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009e1e:	e005      	b.n	8009e2c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009e20:	2300      	movs	r3, #0
 8009e22:	61bb      	str	r3, [r7, #24]
    break;
 8009e24:	e002      	b.n	8009e2c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009e26:	4b07      	ldr	r3, [pc, #28]	; (8009e44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009e28:	61bb      	str	r3, [r7, #24]
    break;
 8009e2a:	bf00      	nop
  }

  return sysclockfreq;
 8009e2c:	69bb      	ldr	r3, [r7, #24]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3724      	adds	r7, #36	; 0x24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	58024400 	.word	0x58024400
 8009e40:	03d09000 	.word	0x03d09000
 8009e44:	003d0900 	.word	0x003d0900
 8009e48:	00f42400 	.word	0x00f42400
 8009e4c:	46000000 	.word	0x46000000
 8009e50:	4c742400 	.word	0x4c742400
 8009e54:	4a742400 	.word	0x4a742400
 8009e58:	4b742400 	.word	0x4b742400

08009e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009e62:	f7ff fe81 	bl	8009b68 <HAL_RCC_GetSysClockFreq>
 8009e66:	4602      	mov	r2, r0
 8009e68:	4b10      	ldr	r3, [pc, #64]	; (8009eac <HAL_RCC_GetHCLKFreq+0x50>)
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	0a1b      	lsrs	r3, r3, #8
 8009e6e:	f003 030f 	and.w	r3, r3, #15
 8009e72:	490f      	ldr	r1, [pc, #60]	; (8009eb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009e74:	5ccb      	ldrb	r3, [r1, r3]
 8009e76:	f003 031f 	and.w	r3, r3, #31
 8009e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e80:	4b0a      	ldr	r3, [pc, #40]	; (8009eac <HAL_RCC_GetHCLKFreq+0x50>)
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	f003 030f 	and.w	r3, r3, #15
 8009e88:	4a09      	ldr	r2, [pc, #36]	; (8009eb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009e8a:	5cd3      	ldrb	r3, [r2, r3]
 8009e8c:	f003 031f 	and.w	r3, r3, #31
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	fa22 f303 	lsr.w	r3, r2, r3
 8009e96:	4a07      	ldr	r2, [pc, #28]	; (8009eb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009e98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e9a:	4a07      	ldr	r2, [pc, #28]	; (8009eb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009ea0:	4b04      	ldr	r3, [pc, #16]	; (8009eb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	58024400 	.word	0x58024400
 8009eb0:	08011a24 	.word	0x08011a24
 8009eb4:	24000004 	.word	0x24000004
 8009eb8:	24000000 	.word	0x24000000

08009ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ec0:	f7ff ffcc 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	4b06      	ldr	r3, [pc, #24]	; (8009ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	091b      	lsrs	r3, r3, #4
 8009ecc:	f003 0307 	and.w	r3, r3, #7
 8009ed0:	4904      	ldr	r1, [pc, #16]	; (8009ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ed2:	5ccb      	ldrb	r3, [r1, r3]
 8009ed4:	f003 031f 	and.w	r3, r3, #31
 8009ed8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	58024400 	.word	0x58024400
 8009ee4:	08011a24 	.word	0x08011a24

08009ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009eec:	f7ff ffb6 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	4b06      	ldr	r3, [pc, #24]	; (8009f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ef4:	69db      	ldr	r3, [r3, #28]
 8009ef6:	0a1b      	lsrs	r3, r3, #8
 8009ef8:	f003 0307 	and.w	r3, r3, #7
 8009efc:	4904      	ldr	r1, [pc, #16]	; (8009f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009efe:	5ccb      	ldrb	r3, [r1, r3]
 8009f00:	f003 031f 	and.w	r3, r3, #31
 8009f04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	58024400 	.word	0x58024400
 8009f10:	08011a24 	.word	0x08011a24

08009f14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	223f      	movs	r2, #63	; 0x3f
 8009f22:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009f24:	4b1a      	ldr	r3, [pc, #104]	; (8009f90 <HAL_RCC_GetClockConfig+0x7c>)
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	f003 0207 	and.w	r2, r3, #7
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009f30:	4b17      	ldr	r3, [pc, #92]	; (8009f90 <HAL_RCC_GetClockConfig+0x7c>)
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009f3c:	4b14      	ldr	r3, [pc, #80]	; (8009f90 <HAL_RCC_GetClockConfig+0x7c>)
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	f003 020f 	and.w	r2, r3, #15
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009f48:	4b11      	ldr	r3, [pc, #68]	; (8009f90 <HAL_RCC_GetClockConfig+0x7c>)
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009f54:	4b0e      	ldr	r3, [pc, #56]	; (8009f90 <HAL_RCC_GetClockConfig+0x7c>)
 8009f56:	69db      	ldr	r3, [r3, #28]
 8009f58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009f60:	4b0b      	ldr	r3, [pc, #44]	; (8009f90 <HAL_RCC_GetClockConfig+0x7c>)
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009f6c:	4b08      	ldr	r3, [pc, #32]	; (8009f90 <HAL_RCC_GetClockConfig+0x7c>)
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009f78:	4b06      	ldr	r3, [pc, #24]	; (8009f94 <HAL_RCC_GetClockConfig+0x80>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 020f 	and.w	r2, r3, #15
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	601a      	str	r2, [r3, #0]
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	58024400 	.word	0x58024400
 8009f94:	52002000 	.word	0x52002000

08009f98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d03f      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fbc:	d02a      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009fbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fc2:	d824      	bhi.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fc8:	d018      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009fca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fce:	d81e      	bhi.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d003      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fd8:	d007      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009fda:	e018      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fdc:	4ba3      	ldr	r3, [pc, #652]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe0:	4aa2      	ldr	r2, [pc, #648]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009fe8:	e015      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	3304      	adds	r3, #4
 8009fee:	2102      	movs	r1, #2
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f002 f80d 	bl	800c010 <RCCEx_PLL2_Config>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009ffa:	e00c      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3324      	adds	r3, #36	; 0x24
 800a000:	2102      	movs	r1, #2
 800a002:	4618      	mov	r0, r3
 800a004:	f002 f8b6 	bl	800c174 <RCCEx_PLL3_Config>
 800a008:	4603      	mov	r3, r0
 800a00a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a00c:	e003      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	75fb      	strb	r3, [r7, #23]
      break;
 800a012:	e000      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a014:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a016:	7dfb      	ldrb	r3, [r7, #23]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d109      	bne.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a01c:	4b93      	ldr	r3, [pc, #588]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a028:	4990      	ldr	r1, [pc, #576]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	650b      	str	r3, [r1, #80]	; 0x50
 800a02e:	e001      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d03d      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a044:	2b04      	cmp	r3, #4
 800a046:	d826      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a048:	a201      	add	r2, pc, #4	; (adr r2, 800a050 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04e:	bf00      	nop
 800a050:	0800a065 	.word	0x0800a065
 800a054:	0800a073 	.word	0x0800a073
 800a058:	0800a085 	.word	0x0800a085
 800a05c:	0800a09d 	.word	0x0800a09d
 800a060:	0800a09d 	.word	0x0800a09d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a064:	4b81      	ldr	r3, [pc, #516]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	4a80      	ldr	r2, [pc, #512]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a06a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a06e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a070:	e015      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3304      	adds	r3, #4
 800a076:	2100      	movs	r1, #0
 800a078:	4618      	mov	r0, r3
 800a07a:	f001 ffc9 	bl	800c010 <RCCEx_PLL2_Config>
 800a07e:	4603      	mov	r3, r0
 800a080:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a082:	e00c      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3324      	adds	r3, #36	; 0x24
 800a088:	2100      	movs	r1, #0
 800a08a:	4618      	mov	r0, r3
 800a08c:	f002 f872 	bl	800c174 <RCCEx_PLL3_Config>
 800a090:	4603      	mov	r3, r0
 800a092:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a094:	e003      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	75fb      	strb	r3, [r7, #23]
      break;
 800a09a:	e000      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a09c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a09e:	7dfb      	ldrb	r3, [r7, #23]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d109      	bne.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a0a4:	4b71      	ldr	r3, [pc, #452]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0a8:	f023 0207 	bic.w	r2, r3, #7
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b0:	496e      	ldr	r1, [pc, #440]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	650b      	str	r3, [r1, #80]	; 0x50
 800a0b6:	e001      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d042      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d0:	d02b      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d6:	d825      	bhi.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a0d8:	2bc0      	cmp	r3, #192	; 0xc0
 800a0da:	d028      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a0dc:	2bc0      	cmp	r3, #192	; 0xc0
 800a0de:	d821      	bhi.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a0e0:	2b80      	cmp	r3, #128	; 0x80
 800a0e2:	d016      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a0e4:	2b80      	cmp	r3, #128	; 0x80
 800a0e6:	d81d      	bhi.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a0ec:	2b40      	cmp	r3, #64	; 0x40
 800a0ee:	d007      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a0f0:	e018      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0f2:	4b5e      	ldr	r3, [pc, #376]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f6:	4a5d      	ldr	r2, [pc, #372]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a0f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a0fe:	e017      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	3304      	adds	r3, #4
 800a104:	2100      	movs	r1, #0
 800a106:	4618      	mov	r0, r3
 800a108:	f001 ff82 	bl	800c010 <RCCEx_PLL2_Config>
 800a10c:	4603      	mov	r3, r0
 800a10e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a110:	e00e      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	3324      	adds	r3, #36	; 0x24
 800a116:	2100      	movs	r1, #0
 800a118:	4618      	mov	r0, r3
 800a11a:	f002 f82b 	bl	800c174 <RCCEx_PLL3_Config>
 800a11e:	4603      	mov	r3, r0
 800a120:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a122:	e005      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	75fb      	strb	r3, [r7, #23]
      break;
 800a128:	e002      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a12a:	bf00      	nop
 800a12c:	e000      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a12e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a130:	7dfb      	ldrb	r3, [r7, #23]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d109      	bne.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a136:	4b4d      	ldr	r3, [pc, #308]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a13a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a142:	494a      	ldr	r1, [pc, #296]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a144:	4313      	orrs	r3, r2
 800a146:	650b      	str	r3, [r1, #80]	; 0x50
 800a148:	e001      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
 800a14c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a156:	2b00      	cmp	r3, #0
 800a158:	d049      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a160:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a164:	d030      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a16a:	d82a      	bhi.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a16c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a170:	d02c      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a172:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a176:	d824      	bhi.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a17c:	d018      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a17e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a182:	d81e      	bhi.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a184:	2b00      	cmp	r3, #0
 800a186:	d003      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a18c:	d007      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a18e:	e018      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a190:	4b36      	ldr	r3, [pc, #216]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a194:	4a35      	ldr	r2, [pc, #212]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a19a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a19c:	e017      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f001 ff33 	bl	800c010 <RCCEx_PLL2_Config>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a1ae:	e00e      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3324      	adds	r3, #36	; 0x24
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f001 ffdc 	bl	800c174 <RCCEx_PLL3_Config>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1c0:	e005      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a1c6:	e002      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a1c8:	bf00      	nop
 800a1ca:	e000      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a1cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10a      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a1d4:	4b25      	ldr	r3, [pc, #148]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a1d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a1e2:	4922      	ldr	r1, [pc, #136]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	658b      	str	r3, [r1, #88]	; 0x58
 800a1e8:	e001      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d04b      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a200:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a204:	d030      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a206:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a20a:	d82a      	bhi.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a20c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a210:	d02e      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800a212:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a216:	d824      	bhi.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a21c:	d018      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a21e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a222:	d81e      	bhi.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a224:	2b00      	cmp	r3, #0
 800a226:	d003      	beq.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a22c:	d007      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a22e:	e018      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a230:	4b0e      	ldr	r3, [pc, #56]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a234:	4a0d      	ldr	r2, [pc, #52]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a23a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a23c:	e019      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	3304      	adds	r3, #4
 800a242:	2100      	movs	r1, #0
 800a244:	4618      	mov	r0, r3
 800a246:	f001 fee3 	bl	800c010 <RCCEx_PLL2_Config>
 800a24a:	4603      	mov	r3, r0
 800a24c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a24e:	e010      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3324      	adds	r3, #36	; 0x24
 800a254:	2100      	movs	r1, #0
 800a256:	4618      	mov	r0, r3
 800a258:	f001 ff8c 	bl	800c174 <RCCEx_PLL3_Config>
 800a25c:	4603      	mov	r3, r0
 800a25e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a260:	e007      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	75fb      	strb	r3, [r7, #23]
      break;
 800a266:	e004      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800a268:	bf00      	nop
 800a26a:	e002      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a26c:	58024400 	.word	0x58024400
      break;
 800a270:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a272:	7dfb      	ldrb	r3, [r7, #23]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10a      	bne.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a278:	4b99      	ldr	r3, [pc, #612]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a27a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a27c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a286:	4996      	ldr	r1, [pc, #600]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a288:	4313      	orrs	r3, r2
 800a28a:	658b      	str	r3, [r1, #88]	; 0x58
 800a28c:	e001      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a28e:	7dfb      	ldrb	r3, [r7, #23]
 800a290:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d032      	beq.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2a2:	2b30      	cmp	r3, #48	; 0x30
 800a2a4:	d01c      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800a2a6:	2b30      	cmp	r3, #48	; 0x30
 800a2a8:	d817      	bhi.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a2aa:	2b20      	cmp	r3, #32
 800a2ac:	d00c      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800a2ae:	2b20      	cmp	r3, #32
 800a2b0:	d813      	bhi.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d016      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a2b6:	2b10      	cmp	r3, #16
 800a2b8:	d10f      	bne.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2ba:	4b89      	ldr	r3, [pc, #548]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2be:	4a88      	ldr	r2, [pc, #544]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a2c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a2c6:	e00e      	b.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	2102      	movs	r1, #2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f001 fe9e 	bl	800c010 <RCCEx_PLL2_Config>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a2d8:	e005      	b.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a2de:	e002      	b.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a2e0:	bf00      	nop
 800a2e2:	e000      	b.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a2e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d109      	bne.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a2ec:	4b7c      	ldr	r3, [pc, #496]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a2ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2f8:	4979      	ldr	r1, [pc, #484]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a2fe:	e001      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a300:	7dfb      	ldrb	r3, [r7, #23]
 800a302:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d047      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a318:	d030      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a31a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a31e:	d82a      	bhi.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a320:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a324:	d02c      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a326:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a32a:	d824      	bhi.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a32c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a330:	d018      	beq.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800a332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a336:	d81e      	bhi.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d003      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800a33c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a340:	d007      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800a342:	e018      	b.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a344:	4b66      	ldr	r3, [pc, #408]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a348:	4a65      	ldr	r2, [pc, #404]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a34a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a34e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a350:	e017      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	3304      	adds	r3, #4
 800a356:	2100      	movs	r1, #0
 800a358:	4618      	mov	r0, r3
 800a35a:	f001 fe59 	bl	800c010 <RCCEx_PLL2_Config>
 800a35e:	4603      	mov	r3, r0
 800a360:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a362:	e00e      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3324      	adds	r3, #36	; 0x24
 800a368:	2100      	movs	r1, #0
 800a36a:	4618      	mov	r0, r3
 800a36c:	f001 ff02 	bl	800c174 <RCCEx_PLL3_Config>
 800a370:	4603      	mov	r3, r0
 800a372:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a374:	e005      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	75fb      	strb	r3, [r7, #23]
      break;
 800a37a:	e002      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a37c:	bf00      	nop
 800a37e:	e000      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a380:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a382:	7dfb      	ldrb	r3, [r7, #23]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d109      	bne.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a388:	4b55      	ldr	r3, [pc, #340]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a38a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a38c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a394:	4952      	ldr	r1, [pc, #328]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a396:	4313      	orrs	r3, r2
 800a398:	650b      	str	r3, [r1, #80]	; 0x50
 800a39a:	e001      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a39c:	7dfb      	ldrb	r3, [r7, #23]
 800a39e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d049      	beq.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3b4:	d02e      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a3b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3ba:	d828      	bhi.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a3bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a3c0:	d02a      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800a3c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a3c6:	d822      	bhi.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a3c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a3cc:	d026      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800a3ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a3d2:	d81c      	bhi.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a3d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3d8:	d010      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a3da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3de:	d816      	bhi.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d01d      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800a3e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3e8:	d111      	bne.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f001 fe0d 	bl	800c010 <RCCEx_PLL2_Config>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a3fa:	e012      	b.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3324      	adds	r3, #36	; 0x24
 800a400:	2101      	movs	r1, #1
 800a402:	4618      	mov	r0, r3
 800a404:	f001 feb6 	bl	800c174 <RCCEx_PLL3_Config>
 800a408:	4603      	mov	r3, r0
 800a40a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a40c:	e009      	b.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	75fb      	strb	r3, [r7, #23]
      break;
 800a412:	e006      	b.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a414:	bf00      	nop
 800a416:	e004      	b.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a418:	bf00      	nop
 800a41a:	e002      	b.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a41c:	bf00      	nop
 800a41e:	e000      	b.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a420:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a422:	7dfb      	ldrb	r3, [r7, #23]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d109      	bne.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a428:	4b2d      	ldr	r3, [pc, #180]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a42c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a434:	492a      	ldr	r1, [pc, #168]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a436:	4313      	orrs	r3, r2
 800a438:	650b      	str	r3, [r1, #80]	; 0x50
 800a43a:	e001      	b.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d04d      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a456:	d02e      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800a458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a45c:	d828      	bhi.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a45e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a462:	d02a      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a468:	d822      	bhi.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a46a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a46e:	d026      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x526>
 800a470:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a474:	d81c      	bhi.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a47a:	d010      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a47c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a480:	d816      	bhi.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a482:	2b00      	cmp	r3, #0
 800a484:	d01d      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800a486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a48a:	d111      	bne.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3304      	adds	r3, #4
 800a490:	2101      	movs	r1, #1
 800a492:	4618      	mov	r0, r3
 800a494:	f001 fdbc 	bl	800c010 <RCCEx_PLL2_Config>
 800a498:	4603      	mov	r3, r0
 800a49a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a49c:	e012      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	3324      	adds	r3, #36	; 0x24
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f001 fe65 	bl	800c174 <RCCEx_PLL3_Config>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a4ae:	e009      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a4b4:	e006      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a4b6:	bf00      	nop
 800a4b8:	e004      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a4ba:	bf00      	nop
 800a4bc:	e002      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a4be:	bf00      	nop
 800a4c0:	e000      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a4c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10c      	bne.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a4ca:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a4d8:	4901      	ldr	r1, [pc, #4]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	658b      	str	r3, [r1, #88]	; 0x58
 800a4de:	e003      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800a4e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e4:	7dfb      	ldrb	r3, [r7, #23]
 800a4e6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d02f      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4fc:	d00e      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800a4fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a502:	d814      	bhi.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x596>
 800a504:	2b00      	cmp	r3, #0
 800a506:	d015      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800a508:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a50c:	d10f      	bne.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a50e:	4baf      	ldr	r3, [pc, #700]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a512:	4aae      	ldr	r2, [pc, #696]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a51a:	e00c      	b.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	3304      	adds	r3, #4
 800a520:	2101      	movs	r1, #1
 800a522:	4618      	mov	r0, r3
 800a524:	f001 fd74 	bl	800c010 <RCCEx_PLL2_Config>
 800a528:	4603      	mov	r3, r0
 800a52a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a52c:	e003      	b.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	75fb      	strb	r3, [r7, #23]
      break;
 800a532:	e000      	b.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800a534:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a536:	7dfb      	ldrb	r3, [r7, #23]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d109      	bne.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a53c:	4ba3      	ldr	r3, [pc, #652]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a53e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a540:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a548:	49a0      	ldr	r1, [pc, #640]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a54a:	4313      	orrs	r3, r2
 800a54c:	650b      	str	r3, [r1, #80]	; 0x50
 800a54e:	e001      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a550:	7dfb      	ldrb	r3, [r7, #23]
 800a552:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d032      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a564:	2b03      	cmp	r3, #3
 800a566:	d81b      	bhi.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a568:	a201      	add	r2, pc, #4	; (adr r2, 800a570 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800a56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56e:	bf00      	nop
 800a570:	0800a5a7 	.word	0x0800a5a7
 800a574:	0800a581 	.word	0x0800a581
 800a578:	0800a58f 	.word	0x0800a58f
 800a57c:	0800a5a7 	.word	0x0800a5a7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a580:	4b92      	ldr	r3, [pc, #584]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a584:	4a91      	ldr	r2, [pc, #580]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a58a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a58c:	e00c      	b.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	3304      	adds	r3, #4
 800a592:	2102      	movs	r1, #2
 800a594:	4618      	mov	r0, r3
 800a596:	f001 fd3b 	bl	800c010 <RCCEx_PLL2_Config>
 800a59a:	4603      	mov	r3, r0
 800a59c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a59e:	e003      	b.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a5a4:	e000      	b.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a5a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d109      	bne.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a5ae:	4b87      	ldr	r3, [pc, #540]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a5b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5b2:	f023 0203 	bic.w	r2, r3, #3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ba:	4984      	ldr	r1, [pc, #528]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a5c0:	e001      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5c2:	7dfb      	ldrb	r3, [r7, #23]
 800a5c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 8086 	beq.w	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a5d4:	4b7e      	ldr	r3, [pc, #504]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a7d      	ldr	r2, [pc, #500]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a5da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a5e0:	f7f8 fc4c 	bl	8002e7c <HAL_GetTick>
 800a5e4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5e6:	e009      	b.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5e8:	f7f8 fc48 	bl	8002e7c <HAL_GetTick>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	2b64      	cmp	r3, #100	; 0x64
 800a5f4:	d902      	bls.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	75fb      	strb	r3, [r7, #23]
        break;
 800a5fa:	e005      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5fc:	4b74      	ldr	r3, [pc, #464]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a604:	2b00      	cmp	r3, #0
 800a606:	d0ef      	beq.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a608:	7dfb      	ldrb	r3, [r7, #23]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d166      	bne.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a60e:	4b6f      	ldr	r3, [pc, #444]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a610:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a618:	4053      	eors	r3, r2
 800a61a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d013      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a622:	4b6a      	ldr	r3, [pc, #424]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a62a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a62c:	4b67      	ldr	r3, [pc, #412]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a62e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a630:	4a66      	ldr	r2, [pc, #408]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a636:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a638:	4b64      	ldr	r3, [pc, #400]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63c:	4a63      	ldr	r2, [pc, #396]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a63e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a642:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a644:	4a61      	ldr	r2, [pc, #388]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a654:	d115      	bne.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a656:	f7f8 fc11 	bl	8002e7c <HAL_GetTick>
 800a65a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a65c:	e00b      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a65e:	f7f8 fc0d 	bl	8002e7c <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	f241 3288 	movw	r2, #5000	; 0x1388
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d902      	bls.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	75fb      	strb	r3, [r7, #23]
            break;
 800a674:	e005      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a676:	4b55      	ldr	r3, [pc, #340]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d0ed      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a682:	7dfb      	ldrb	r3, [r7, #23]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d126      	bne.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a68e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a696:	d10d      	bne.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a698:	4b4c      	ldr	r3, [pc, #304]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a6a6:	0919      	lsrs	r1, r3, #4
 800a6a8:	4b4a      	ldr	r3, [pc, #296]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800a6aa:	400b      	ands	r3, r1
 800a6ac:	4947      	ldr	r1, [pc, #284]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	610b      	str	r3, [r1, #16]
 800a6b2:	e005      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a6b4:	4b45      	ldr	r3, [pc, #276]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	4a44      	ldr	r2, [pc, #272]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a6ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6be:	6113      	str	r3, [r2, #16]
 800a6c0:	4b42      	ldr	r3, [pc, #264]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a6c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a6ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6ce:	493f      	ldr	r1, [pc, #252]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	670b      	str	r3, [r1, #112]	; 0x70
 800a6d4:	e004      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a6d6:	7dfb      	ldrb	r3, [r7, #23]
 800a6d8:	75bb      	strb	r3, [r7, #22]
 800a6da:	e001      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6dc:	7dfb      	ldrb	r3, [r7, #23]
 800a6de:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f000 8085 	beq.w	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6f2:	2b28      	cmp	r3, #40	; 0x28
 800a6f4:	d866      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a6f6:	a201      	add	r2, pc, #4	; (adr r2, 800a6fc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fc:	0800a7d9 	.word	0x0800a7d9
 800a700:	0800a7c5 	.word	0x0800a7c5
 800a704:	0800a7c5 	.word	0x0800a7c5
 800a708:	0800a7c5 	.word	0x0800a7c5
 800a70c:	0800a7c5 	.word	0x0800a7c5
 800a710:	0800a7c5 	.word	0x0800a7c5
 800a714:	0800a7c5 	.word	0x0800a7c5
 800a718:	0800a7c5 	.word	0x0800a7c5
 800a71c:	0800a7a1 	.word	0x0800a7a1
 800a720:	0800a7c5 	.word	0x0800a7c5
 800a724:	0800a7c5 	.word	0x0800a7c5
 800a728:	0800a7c5 	.word	0x0800a7c5
 800a72c:	0800a7c5 	.word	0x0800a7c5
 800a730:	0800a7c5 	.word	0x0800a7c5
 800a734:	0800a7c5 	.word	0x0800a7c5
 800a738:	0800a7c5 	.word	0x0800a7c5
 800a73c:	0800a7b3 	.word	0x0800a7b3
 800a740:	0800a7c5 	.word	0x0800a7c5
 800a744:	0800a7c5 	.word	0x0800a7c5
 800a748:	0800a7c5 	.word	0x0800a7c5
 800a74c:	0800a7c5 	.word	0x0800a7c5
 800a750:	0800a7c5 	.word	0x0800a7c5
 800a754:	0800a7c5 	.word	0x0800a7c5
 800a758:	0800a7c5 	.word	0x0800a7c5
 800a75c:	0800a7d9 	.word	0x0800a7d9
 800a760:	0800a7c5 	.word	0x0800a7c5
 800a764:	0800a7c5 	.word	0x0800a7c5
 800a768:	0800a7c5 	.word	0x0800a7c5
 800a76c:	0800a7c5 	.word	0x0800a7c5
 800a770:	0800a7c5 	.word	0x0800a7c5
 800a774:	0800a7c5 	.word	0x0800a7c5
 800a778:	0800a7c5 	.word	0x0800a7c5
 800a77c:	0800a7d9 	.word	0x0800a7d9
 800a780:	0800a7c5 	.word	0x0800a7c5
 800a784:	0800a7c5 	.word	0x0800a7c5
 800a788:	0800a7c5 	.word	0x0800a7c5
 800a78c:	0800a7c5 	.word	0x0800a7c5
 800a790:	0800a7c5 	.word	0x0800a7c5
 800a794:	0800a7c5 	.word	0x0800a7c5
 800a798:	0800a7c5 	.word	0x0800a7c5
 800a79c:	0800a7d9 	.word	0x0800a7d9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	2101      	movs	r1, #1
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f001 fc32 	bl	800c010 <RCCEx_PLL2_Config>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a7b0:	e013      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	3324      	adds	r3, #36	; 0x24
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f001 fcdb 	bl	800c174 <RCCEx_PLL3_Config>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a7c2:	e00a      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7c8:	e007      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x842>
 800a7ca:	bf00      	nop
 800a7cc:	58024400 	.word	0x58024400
 800a7d0:	58024800 	.word	0x58024800
 800a7d4:	00ffffcf 	.word	0x00ffffcf
      break;
 800a7d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d109      	bne.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a7e0:	4b96      	ldr	r3, [pc, #600]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a7e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7e4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7ec:	4993      	ldr	r1, [pc, #588]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	654b      	str	r3, [r1, #84]	; 0x54
 800a7f2:	e001      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
 800a7f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0302 	and.w	r3, r3, #2
 800a800:	2b00      	cmp	r3, #0
 800a802:	d038      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a808:	2b05      	cmp	r3, #5
 800a80a:	d821      	bhi.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800a80c:	a201      	add	r2, pc, #4	; (adr r2, 800a814 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800a80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a812:	bf00      	nop
 800a814:	0800a857 	.word	0x0800a857
 800a818:	0800a82d 	.word	0x0800a82d
 800a81c:	0800a83f 	.word	0x0800a83f
 800a820:	0800a857 	.word	0x0800a857
 800a824:	0800a857 	.word	0x0800a857
 800a828:	0800a857 	.word	0x0800a857
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	3304      	adds	r3, #4
 800a830:	2101      	movs	r1, #1
 800a832:	4618      	mov	r0, r3
 800a834:	f001 fbec 	bl	800c010 <RCCEx_PLL2_Config>
 800a838:	4603      	mov	r3, r0
 800a83a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a83c:	e00c      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3324      	adds	r3, #36	; 0x24
 800a842:	2101      	movs	r1, #1
 800a844:	4618      	mov	r0, r3
 800a846:	f001 fc95 	bl	800c174 <RCCEx_PLL3_Config>
 800a84a:	4603      	mov	r3, r0
 800a84c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a84e:	e003      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	75fb      	strb	r3, [r7, #23]
      break;
 800a854:	e000      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800a856:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a858:	7dfb      	ldrb	r3, [r7, #23]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d109      	bne.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a85e:	4b77      	ldr	r3, [pc, #476]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a862:	f023 0207 	bic.w	r2, r3, #7
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a86a:	4974      	ldr	r1, [pc, #464]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a86c:	4313      	orrs	r3, r2
 800a86e:	654b      	str	r3, [r1, #84]	; 0x54
 800a870:	e001      	b.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a872:	7dfb      	ldrb	r3, [r7, #23]
 800a874:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0304 	and.w	r3, r3, #4
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d03a      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a888:	2b05      	cmp	r3, #5
 800a88a:	d821      	bhi.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800a88c:	a201      	add	r2, pc, #4	; (adr r2, 800a894 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800a88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a892:	bf00      	nop
 800a894:	0800a8d7 	.word	0x0800a8d7
 800a898:	0800a8ad 	.word	0x0800a8ad
 800a89c:	0800a8bf 	.word	0x0800a8bf
 800a8a0:	0800a8d7 	.word	0x0800a8d7
 800a8a4:	0800a8d7 	.word	0x0800a8d7
 800a8a8:	0800a8d7 	.word	0x0800a8d7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f001 fbac 	bl	800c010 <RCCEx_PLL2_Config>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a8bc:	e00c      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	3324      	adds	r3, #36	; 0x24
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f001 fc55 	bl	800c174 <RCCEx_PLL3_Config>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a8ce:	e003      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a8d4:	e000      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800a8d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10a      	bne.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a8de:	4b57      	ldr	r3, [pc, #348]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8e2:	f023 0207 	bic.w	r2, r3, #7
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8ec:	4953      	ldr	r1, [pc, #332]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	658b      	str	r3, [r1, #88]	; 0x58
 800a8f2:	e001      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f4:	7dfb      	ldrb	r3, [r7, #23]
 800a8f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0320 	and.w	r3, r3, #32
 800a900:	2b00      	cmp	r3, #0
 800a902:	d04b      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a90a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a90e:	d02e      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a914:	d828      	bhi.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a91a:	d02a      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a91c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a920:	d822      	bhi.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a922:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a926:	d026      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a928:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a92c:	d81c      	bhi.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a92e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a932:	d010      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800a934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a938:	d816      	bhi.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d01d      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800a93e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a942:	d111      	bne.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	3304      	adds	r3, #4
 800a948:	2100      	movs	r1, #0
 800a94a:	4618      	mov	r0, r3
 800a94c:	f001 fb60 	bl	800c010 <RCCEx_PLL2_Config>
 800a950:	4603      	mov	r3, r0
 800a952:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a954:	e012      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	3324      	adds	r3, #36	; 0x24
 800a95a:	2102      	movs	r1, #2
 800a95c:	4618      	mov	r0, r3
 800a95e:	f001 fc09 	bl	800c174 <RCCEx_PLL3_Config>
 800a962:	4603      	mov	r3, r0
 800a964:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a966:	e009      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	75fb      	strb	r3, [r7, #23]
      break;
 800a96c:	e006      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a96e:	bf00      	nop
 800a970:	e004      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a972:	bf00      	nop
 800a974:	e002      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a976:	bf00      	nop
 800a978:	e000      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a97a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d10a      	bne.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a982:	4b2e      	ldr	r3, [pc, #184]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a986:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a990:	492a      	ldr	r1, [pc, #168]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a992:	4313      	orrs	r3, r2
 800a994:	654b      	str	r3, [r1, #84]	; 0x54
 800a996:	e001      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a998:	7dfb      	ldrb	r3, [r7, #23]
 800a99a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d04d      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a9b2:	d02e      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a9b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a9b8:	d828      	bhi.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a9ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9be:	d02a      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a9c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9c4:	d822      	bhi.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a9c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9ca:	d026      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a9cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9d0:	d81c      	bhi.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a9d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9d6:	d010      	beq.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a9d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9dc:	d816      	bhi.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d01d      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a9e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9e6:	d111      	bne.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f001 fb0e 	bl	800c010 <RCCEx_PLL2_Config>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a9f8:	e012      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3324      	adds	r3, #36	; 0x24
 800a9fe:	2102      	movs	r1, #2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f001 fbb7 	bl	800c174 <RCCEx_PLL3_Config>
 800aa06:	4603      	mov	r3, r0
 800aa08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800aa0a:	e009      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa10:	e006      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800aa12:	bf00      	nop
 800aa14:	e004      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800aa16:	bf00      	nop
 800aa18:	e002      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800aa1a:	bf00      	nop
 800aa1c:	e000      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800aa1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa20:	7dfb      	ldrb	r3, [r7, #23]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10c      	bne.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aa26:	4b05      	ldr	r3, [pc, #20]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800aa28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa34:	4901      	ldr	r1, [pc, #4]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800aa36:	4313      	orrs	r3, r2
 800aa38:	658b      	str	r3, [r1, #88]	; 0x58
 800aa3a:	e003      	b.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800aa3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
 800aa42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d04b      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aa5a:	d02e      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800aa5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aa60:	d828      	bhi.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800aa62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa66:	d02a      	beq.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800aa68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa6c:	d822      	bhi.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800aa6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aa72:	d026      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800aa74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aa78:	d81c      	bhi.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800aa7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa7e:	d010      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800aa80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa84:	d816      	bhi.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d01d      	beq.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800aa8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa8e:	d111      	bne.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3304      	adds	r3, #4
 800aa94:	2100      	movs	r1, #0
 800aa96:	4618      	mov	r0, r3
 800aa98:	f001 faba 	bl	800c010 <RCCEx_PLL2_Config>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800aaa0:	e012      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3324      	adds	r3, #36	; 0x24
 800aaa6:	2102      	movs	r1, #2
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f001 fb63 	bl	800c174 <RCCEx_PLL3_Config>
 800aaae:	4603      	mov	r3, r0
 800aab0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800aab2:	e009      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	75fb      	strb	r3, [r7, #23]
      break;
 800aab8:	e006      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800aaba:	bf00      	nop
 800aabc:	e004      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800aabe:	bf00      	nop
 800aac0:	e002      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800aac2:	bf00      	nop
 800aac4:	e000      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800aac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10a      	bne.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aace:	4b9d      	ldr	r3, [pc, #628]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aadc:	4999      	ldr	r1, [pc, #612]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aade:	4313      	orrs	r3, r2
 800aae0:	658b      	str	r3, [r1, #88]	; 0x58
 800aae2:	e001      	b.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae4:	7dfb      	ldrb	r3, [r7, #23]
 800aae6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 0308 	and.w	r3, r3, #8
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d01a      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aafa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aafe:	d10a      	bne.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	3324      	adds	r3, #36	; 0x24
 800ab04:	2102      	movs	r1, #2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f001 fb34 	bl	800c174 <RCCEx_PLL3_Config>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ab16:	4b8b      	ldr	r3, [pc, #556]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ab18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab24:	4987      	ldr	r1, [pc, #540]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 0310 	and.w	r3, r3, #16
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d01a      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab40:	d10a      	bne.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	3324      	adds	r3, #36	; 0x24
 800ab46:	2102      	movs	r1, #2
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f001 fb13 	bl	800c174 <RCCEx_PLL3_Config>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab58:	4b7a      	ldr	r3, [pc, #488]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ab5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab66:	4977      	ldr	r1, [pc, #476]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d034      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab82:	d01d      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800ab84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab88:	d817      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d003      	beq.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ab8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab92:	d009      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800ab94:	e011      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	3304      	adds	r3, #4
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f001 fa37 	bl	800c010 <RCCEx_PLL2_Config>
 800aba2:	4603      	mov	r3, r0
 800aba4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aba6:	e00c      	b.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3324      	adds	r3, #36	; 0x24
 800abac:	2102      	movs	r1, #2
 800abae:	4618      	mov	r0, r3
 800abb0:	f001 fae0 	bl	800c174 <RCCEx_PLL3_Config>
 800abb4:	4603      	mov	r3, r0
 800abb6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800abb8:	e003      	b.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	75fb      	strb	r3, [r7, #23]
      break;
 800abbe:	e000      	b.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800abc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10a      	bne.n	800abde <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800abc8:	4b5e      	ldr	r3, [pc, #376]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800abca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800abd6:	495b      	ldr	r1, [pc, #364]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800abd8:	4313      	orrs	r3, r2
 800abda:	658b      	str	r3, [r1, #88]	; 0x58
 800abdc:	e001      	b.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abde:	7dfb      	ldrb	r3, [r7, #23]
 800abe0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d033      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abf8:	d01c      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800abfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abfe:	d816      	bhi.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800ac00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac04:	d003      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800ac06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac0a:	d007      	beq.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800ac0c:	e00f      	b.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac0e:	4b4d      	ldr	r3, [pc, #308]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ac10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac12:	4a4c      	ldr	r2, [pc, #304]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ac14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ac1a:	e00c      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3324      	adds	r3, #36	; 0x24
 800ac20:	2101      	movs	r1, #1
 800ac22:	4618      	mov	r0, r3
 800ac24:	f001 faa6 	bl	800c174 <RCCEx_PLL3_Config>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ac2c:	e003      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	75fb      	strb	r3, [r7, #23]
      break;
 800ac32:	e000      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800ac34:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10a      	bne.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac3c:	4b41      	ldr	r3, [pc, #260]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ac3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac4a:	493e      	ldr	r1, [pc, #248]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	654b      	str	r3, [r1, #84]	; 0x54
 800ac50:	e001      	b.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac52:	7dfb      	ldrb	r3, [r7, #23]
 800ac54:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d029      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d003      	beq.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800ac6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac6e:	d007      	beq.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800ac70:	e00f      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac72:	4b34      	ldr	r3, [pc, #208]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ac74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac76:	4a33      	ldr	r2, [pc, #204]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ac78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ac7e:	e00b      	b.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3304      	adds	r3, #4
 800ac84:	2102      	movs	r1, #2
 800ac86:	4618      	mov	r0, r3
 800ac88:	f001 f9c2 	bl	800c010 <RCCEx_PLL2_Config>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ac90:	e002      	b.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	75fb      	strb	r3, [r7, #23]
      break;
 800ac96:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d109      	bne.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ac9e:	4b29      	ldr	r3, [pc, #164]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aca2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acaa:	4926      	ldr	r1, [pc, #152]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800acac:	4313      	orrs	r3, r2
 800acae:	64cb      	str	r3, [r1, #76]	; 0x4c
 800acb0:	e001      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acb2:	7dfb      	ldrb	r3, [r7, #23]
 800acb4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00a      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3324      	adds	r3, #36	; 0x24
 800acc6:	2102      	movs	r1, #2
 800acc8:	4618      	mov	r0, r3
 800acca:	f001 fa53 	bl	800c174 <RCCEx_PLL3_Config>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d001      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d033      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ace8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acec:	d017      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800acee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acf2:	d811      	bhi.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800acf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acf8:	d013      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800acfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acfe:	d80b      	bhi.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d010      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800ad04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad08:	d106      	bne.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad0a:	4b0e      	ldr	r3, [pc, #56]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ad0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad0e:	4a0d      	ldr	r2, [pc, #52]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ad10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ad16:	e007      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad1c:	e004      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800ad1e:	bf00      	nop
 800ad20:	e002      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800ad22:	bf00      	nop
 800ad24:	e000      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800ad26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10c      	bne.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad2e:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ad30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad3a:	4902      	ldr	r1, [pc, #8]	; (800ad44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	654b      	str	r3, [r1, #84]	; 0x54
 800ad40:	e004      	b.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800ad42:	bf00      	nop
 800ad44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad48:	7dfb      	ldrb	r3, [r7, #23]
 800ad4a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d008      	beq.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ad58:	4b31      	ldr	r3, [pc, #196]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ad5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad64:	492e      	ldr	r1, [pc, #184]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ad66:	4313      	orrs	r3, r2
 800ad68:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d009      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ad76:	4b2a      	ldr	r3, [pc, #168]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ad84:	4926      	ldr	r1, [pc, #152]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ad86:	4313      	orrs	r3, r2
 800ad88:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d008      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad96:	4b22      	ldr	r3, [pc, #136]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ad98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad9a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ada2:	491f      	ldr	r1, [pc, #124]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ada4:	4313      	orrs	r3, r2
 800ada6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00d      	beq.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800adb4:	4b1a      	ldr	r3, [pc, #104]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	4a19      	ldr	r2, [pc, #100]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800adba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800adbe:	6113      	str	r3, [r2, #16]
 800adc0:	4b17      	ldr	r3, [pc, #92]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800adc2:	691a      	ldr	r2, [r3, #16]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800adca:	4915      	ldr	r1, [pc, #84]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800adcc:	4313      	orrs	r3, r2
 800adce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	da08      	bge.n	800adea <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800add8:	4b11      	ldr	r3, [pc, #68]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800adda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800addc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ade4:	490e      	ldr	r1, [pc, #56]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ade6:	4313      	orrs	r3, r2
 800ade8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d009      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800adf6:	4b0a      	ldr	r3, [pc, #40]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800adf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae04:	4906      	ldr	r1, [pc, #24]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ae06:	4313      	orrs	r3, r2
 800ae08:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ae0a:	7dbb      	ldrb	r3, [r7, #22]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	e000      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	58024400 	.word	0x58024400

0800ae24 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b090      	sub	sp, #64	; 0x40
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae32:	f040 8095 	bne.w	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800ae36:	4b97      	ldr	r3, [pc, #604]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ae38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae3a:	f003 0307 	and.w	r3, r3, #7
 800ae3e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae42:	2b04      	cmp	r3, #4
 800ae44:	f200 8088 	bhi.w	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800ae48:	a201      	add	r2, pc, #4	; (adr r2, 800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800ae4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4e:	bf00      	nop
 800ae50:	0800ae65 	.word	0x0800ae65
 800ae54:	0800ae8d 	.word	0x0800ae8d
 800ae58:	0800aeb5 	.word	0x0800aeb5
 800ae5c:	0800af51 	.word	0x0800af51
 800ae60:	0800aedd 	.word	0x0800aedd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae64:	4b8b      	ldr	r3, [pc, #556]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae70:	d108      	bne.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 ff64 	bl	800bd44 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae80:	f000 bc94 	b.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae88:	f000 bc90 	b.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae8c:	4b81      	ldr	r3, [pc, #516]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae98:	d108      	bne.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae9a:	f107 0318 	add.w	r3, r7, #24
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 fca8 	bl	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aea8:	f000 bc80 	b.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeb0:	f000 bc7c 	b.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aeb4:	4b77      	ldr	r3, [pc, #476]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aec0:	d108      	bne.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aec2:	f107 030c 	add.w	r3, r7, #12
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 fde8 	bl	800ba9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aed0:	f000 bc6c 	b.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aed8:	f000 bc68 	b.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aedc:	4b6d      	ldr	r3, [pc, #436]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aee4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aee6:	4b6b      	ldr	r3, [pc, #428]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 0304 	and.w	r3, r3, #4
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d10c      	bne.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800aef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d109      	bne.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aef8:	4b66      	ldr	r3, [pc, #408]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	08db      	lsrs	r3, r3, #3
 800aefe:	f003 0303 	and.w	r3, r3, #3
 800af02:	4a65      	ldr	r2, [pc, #404]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800af04:	fa22 f303 	lsr.w	r3, r2, r3
 800af08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af0a:	e01f      	b.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af0c:	4b61      	ldr	r3, [pc, #388]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af18:	d106      	bne.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800af1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af20:	d102      	bne.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800af22:	4b5e      	ldr	r3, [pc, #376]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800af24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af26:	e011      	b.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af28:	4b5a      	ldr	r3, [pc, #360]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af34:	d106      	bne.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800af36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af3c:	d102      	bne.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800af3e:	4b58      	ldr	r3, [pc, #352]	; (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800af40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af42:	e003      	b.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800af44:	2300      	movs	r3, #0
 800af46:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800af48:	f000 bc30 	b.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800af4c:	f000 bc2e 	b.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800af50:	4b54      	ldr	r3, [pc, #336]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800af52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af54:	f000 bc2a 	b.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af5c:	f000 bc26 	b.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af66:	f040 809f 	bne.w	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800af6a:	4b4a      	ldr	r3, [pc, #296]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800af6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af6e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800af72:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af7a:	d04d      	beq.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af82:	f200 8084 	bhi.w	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	2bc0      	cmp	r3, #192	; 0xc0
 800af8a:	d07d      	beq.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	2bc0      	cmp	r3, #192	; 0xc0
 800af90:	d87d      	bhi.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	2b80      	cmp	r3, #128	; 0x80
 800af96:	d02d      	beq.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	2b80      	cmp	r3, #128	; 0x80
 800af9c:	d877      	bhi.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d003      	beq.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	2b40      	cmp	r3, #64	; 0x40
 800afa8:	d012      	beq.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800afaa:	e070      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afac:	4b39      	ldr	r3, [pc, #228]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afb8:	d107      	bne.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afbe:	4618      	mov	r0, r3
 800afc0:	f000 fec0 	bl	800bd44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800afc8:	e3f0      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800afca:	2300      	movs	r3, #0
 800afcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afce:	e3ed      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afd0:	4b30      	ldr	r3, [pc, #192]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afdc:	d107      	bne.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afde:	f107 0318 	add.w	r3, r7, #24
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 fc06 	bl	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800afec:	e3de      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aff2:	e3db      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aff4:	4b27      	ldr	r3, [pc, #156]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800affc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b000:	d107      	bne.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b002:	f107 030c 	add.w	r3, r7, #12
 800b006:	4618      	mov	r0, r3
 800b008:	f000 fd48 	bl	800ba9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b010:	e3cc      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b012:	2300      	movs	r3, #0
 800b014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b016:	e3c9      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b018:	4b1e      	ldr	r3, [pc, #120]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b01a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b01c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b020:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b022:	4b1c      	ldr	r3, [pc, #112]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 0304 	and.w	r3, r3, #4
 800b02a:	2b04      	cmp	r3, #4
 800b02c:	d10c      	bne.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800b02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b030:	2b00      	cmp	r3, #0
 800b032:	d109      	bne.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b034:	4b17      	ldr	r3, [pc, #92]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	08db      	lsrs	r3, r3, #3
 800b03a:	f003 0303 	and.w	r3, r3, #3
 800b03e:	4a16      	ldr	r2, [pc, #88]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b040:	fa22 f303 	lsr.w	r3, r2, r3
 800b044:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b046:	e01e      	b.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b048:	4b12      	ldr	r3, [pc, #72]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b054:	d106      	bne.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800b056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b05c:	d102      	bne.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b05e:	4b0f      	ldr	r3, [pc, #60]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b060:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b062:	e010      	b.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b064:	4b0b      	ldr	r3, [pc, #44]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b06c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b070:	d106      	bne.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800b072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b078:	d102      	bne.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b07a:	4b09      	ldr	r3, [pc, #36]	; (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b07c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b07e:	e002      	b.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b080:	2300      	movs	r3, #0
 800b082:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b084:	e392      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b086:	e391      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b088:	4b06      	ldr	r3, [pc, #24]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b08a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b08c:	e38e      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b092:	e38b      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b094:	58024400 	.word	0x58024400
 800b098:	03d09000 	.word	0x03d09000
 800b09c:	003d0900 	.word	0x003d0900
 800b0a0:	00f42400 	.word	0x00f42400
 800b0a4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0ae:	f040 809c 	bne.w	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b0b2:	4b9d      	ldr	r3, [pc, #628]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b0ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0c2:	d054      	beq.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0ca:	f200 808b 	bhi.w	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b0d4:	f000 8083 	beq.w	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b0de:	f200 8081 	bhi.w	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0e8:	d02f      	beq.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0f0:	d878      	bhi.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d004      	beq.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0fe:	d012      	beq.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800b100:	e070      	b.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b102:	4b89      	ldr	r3, [pc, #548]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b10a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b10e:	d107      	bne.n	800b120 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b114:	4618      	mov	r0, r3
 800b116:	f000 fe15 	bl	800bd44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b11e:	e345      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b120:	2300      	movs	r3, #0
 800b122:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b124:	e342      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b126:	4b80      	ldr	r3, [pc, #512]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b12e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b132:	d107      	bne.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b134:	f107 0318 	add.w	r3, r7, #24
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 fb5b 	bl	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b142:	e333      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b148:	e330      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b14a:	4b77      	ldr	r3, [pc, #476]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b156:	d107      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b158:	f107 030c 	add.w	r3, r7, #12
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 fc9d 	bl	800ba9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b166:	e321      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b16c:	e31e      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b16e:	4b6e      	ldr	r3, [pc, #440]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b176:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b178:	4b6b      	ldr	r3, [pc, #428]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0304 	and.w	r3, r3, #4
 800b180:	2b04      	cmp	r3, #4
 800b182:	d10c      	bne.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800b184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b186:	2b00      	cmp	r3, #0
 800b188:	d109      	bne.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b18a:	4b67      	ldr	r3, [pc, #412]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	08db      	lsrs	r3, r3, #3
 800b190:	f003 0303 	and.w	r3, r3, #3
 800b194:	4a65      	ldr	r2, [pc, #404]	; (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b196:	fa22 f303 	lsr.w	r3, r2, r3
 800b19a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b19c:	e01e      	b.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b19e:	4b62      	ldr	r3, [pc, #392]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1aa:	d106      	bne.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1b2:	d102      	bne.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b1b4:	4b5e      	ldr	r3, [pc, #376]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1b8:	e010      	b.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1ba:	4b5b      	ldr	r3, [pc, #364]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1c6:	d106      	bne.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ce:	d102      	bne.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b1d0:	4b58      	ldr	r3, [pc, #352]	; (800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1d4:	e002      	b.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b1da:	e2e7      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b1dc:	e2e6      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b1de:	4b56      	ldr	r3, [pc, #344]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1e2:	e2e3      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1e8:	e2e0      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1f0:	f040 80a7 	bne.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b1f4:	4b4c      	ldr	r3, [pc, #304]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b1f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1f8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b1fc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b200:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b204:	d055      	beq.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800b206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b20c:	f200 8096 	bhi.w	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b212:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b216:	f000 8084 	beq.w	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b220:	f200 808c 	bhi.w	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b226:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b22a:	d030      	beq.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b232:	f200 8083 	bhi.w	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d004      	beq.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b242:	d012      	beq.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b244:	e07a      	b.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b246:	4b38      	ldr	r3, [pc, #224]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b24e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b252:	d107      	bne.n	800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 fd73 	bl	800bd44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b262:	e2a3      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b264:	2300      	movs	r3, #0
 800b266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b268:	e2a0      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b26a:	4b2f      	ldr	r3, [pc, #188]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b276:	d107      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b278:	f107 0318 	add.w	r3, r7, #24
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 fab9 	bl	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b286:	e291      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b288:	2300      	movs	r3, #0
 800b28a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b28c:	e28e      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b28e:	4b26      	ldr	r3, [pc, #152]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b29a:	d107      	bne.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b29c:	f107 030c 	add.w	r3, r7, #12
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 fbfb 	bl	800ba9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2aa:	e27f      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2b0:	e27c      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b2b2:	4b1d      	ldr	r3, [pc, #116]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2bc:	4b1a      	ldr	r3, [pc, #104]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b04      	cmp	r3, #4
 800b2c6:	d10c      	bne.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d109      	bne.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2ce:	4b16      	ldr	r3, [pc, #88]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	08db      	lsrs	r3, r3, #3
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	4a14      	ldr	r2, [pc, #80]	; (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b2da:	fa22 f303 	lsr.w	r3, r2, r3
 800b2de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2e0:	e01e      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2e2:	4b11      	ldr	r3, [pc, #68]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ee:	d106      	bne.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2f6:	d102      	bne.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b2f8:	4b0d      	ldr	r3, [pc, #52]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2fc:	e010      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2fe:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b30a:	d106      	bne.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b312:	d102      	bne.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b314:	4b07      	ldr	r3, [pc, #28]	; (800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b316:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b318:	e002      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b31e:	e245      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b320:	e244      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b322:	4b05      	ldr	r3, [pc, #20]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b324:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b326:	e241      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b328:	58024400 	.word	0x58024400
 800b32c:	03d09000 	.word	0x03d09000
 800b330:	003d0900 	.word	0x003d0900
 800b334:	00f42400 	.word	0x00f42400
 800b338:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800b33c:	2300      	movs	r3, #0
 800b33e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b340:	e234      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b348:	f040 809c 	bne.w	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b34c:	4b9b      	ldr	r3, [pc, #620]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b350:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b354:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b35c:	d054      	beq.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800b35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b364:	f200 808b 	bhi.w	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b36e:	f000 8083 	beq.w	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800b372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b374:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b378:	f200 8081 	bhi.w	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b382:	d02f      	beq.n	800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b38a:	d878      	bhi.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d004      	beq.n	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800b392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b398:	d012      	beq.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800b39a:	e070      	b.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b39c:	4b87      	ldr	r3, [pc, #540]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3a8:	d107      	bne.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f000 fcc8 	bl	800bd44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b3b8:	e1f8      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3be:	e1f5      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3c0:	4b7e      	ldr	r3, [pc, #504]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3cc:	d107      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3ce:	f107 0318 	add.w	r3, r7, #24
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f000 fa0e 	bl	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b3dc:	e1e6      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3e2:	e1e3      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3e4:	4b75      	ldr	r3, [pc, #468]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3f0:	d107      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3f2:	f107 030c 	add.w	r3, r7, #12
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 fb50 	bl	800ba9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b400:	e1d4      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b402:	2300      	movs	r3, #0
 800b404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b406:	e1d1      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b408:	4b6c      	ldr	r3, [pc, #432]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b40a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b40c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b410:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b412:	4b6a      	ldr	r3, [pc, #424]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f003 0304 	and.w	r3, r3, #4
 800b41a:	2b04      	cmp	r3, #4
 800b41c:	d10c      	bne.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b420:	2b00      	cmp	r3, #0
 800b422:	d109      	bne.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b424:	4b65      	ldr	r3, [pc, #404]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	08db      	lsrs	r3, r3, #3
 800b42a:	f003 0303 	and.w	r3, r3, #3
 800b42e:	4a64      	ldr	r2, [pc, #400]	; (800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800b430:	fa22 f303 	lsr.w	r3, r2, r3
 800b434:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b436:	e01e      	b.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b438:	4b60      	ldr	r3, [pc, #384]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b444:	d106      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800b446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b44c:	d102      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b44e:	4b5d      	ldr	r3, [pc, #372]	; (800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800b450:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b452:	e010      	b.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b454:	4b59      	ldr	r3, [pc, #356]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b45c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b460:	d106      	bne.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b468:	d102      	bne.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b46a:	4b57      	ldr	r3, [pc, #348]	; (800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800b46c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b46e:	e002      	b.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b470:	2300      	movs	r3, #0
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b474:	e19a      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b476:	e199      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b478:	4b54      	ldr	r3, [pc, #336]	; (800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b47a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b47c:	e196      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b47e:	2300      	movs	r3, #0
 800b480:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b482:	e193      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b48a:	d173      	bne.n	800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b48c:	4b4b      	ldr	r3, [pc, #300]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b48e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b494:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b49c:	d02f      	beq.n	800b4fe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4a4:	d863      	bhi.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d004      	beq.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4b2:	d012      	beq.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800b4b4:	e05b      	b.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4b6:	4b41      	ldr	r3, [pc, #260]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4c2:	d107      	bne.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4c4:	f107 0318 	add.w	r3, r7, #24
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 f993 	bl	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b4d2:	e16b      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4d8:	e168      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4da:	4b38      	ldr	r3, [pc, #224]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e6:	d107      	bne.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4e8:	f107 030c 	add.w	r3, r7, #12
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 fad5 	bl	800ba9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b4f6:	e159      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4fc:	e156      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b4fe:	4b2f      	ldr	r3, [pc, #188]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b502:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b506:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b508:	4b2c      	ldr	r3, [pc, #176]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0304 	and.w	r3, r3, #4
 800b510:	2b04      	cmp	r3, #4
 800b512:	d10c      	bne.n	800b52e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800b514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b516:	2b00      	cmp	r3, #0
 800b518:	d109      	bne.n	800b52e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b51a:	4b28      	ldr	r3, [pc, #160]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	08db      	lsrs	r3, r3, #3
 800b520:	f003 0303 	and.w	r3, r3, #3
 800b524:	4a26      	ldr	r2, [pc, #152]	; (800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800b526:	fa22 f303 	lsr.w	r3, r2, r3
 800b52a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b52c:	e01e      	b.n	800b56c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b52e:	4b23      	ldr	r3, [pc, #140]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b53a:	d106      	bne.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800b53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b53e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b542:	d102      	bne.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b544:	4b1f      	ldr	r3, [pc, #124]	; (800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800b546:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b548:	e010      	b.n	800b56c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b54a:	4b1c      	ldr	r3, [pc, #112]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b556:	d106      	bne.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800b558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b55e:	d102      	bne.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b560:	4b19      	ldr	r3, [pc, #100]	; (800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800b562:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b564:	e002      	b.n	800b56c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b566:	2300      	movs	r3, #0
 800b568:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b56a:	e11f      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b56c:	e11e      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800b56e:	2300      	movs	r3, #0
 800b570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b572:	e11b      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b57a:	d13e      	bne.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b57c:	4b0f      	ldr	r3, [pc, #60]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b57e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b584:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d004      	beq.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800b58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b592:	d01d      	beq.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b594:	e02e      	b.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b596:	4b09      	ldr	r3, [pc, #36]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b59e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5a2:	d107      	bne.n	800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 fbcb 	bl	800bd44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5b2:	e0fb      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5b8:	e0f8      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b5ba:	bf00      	nop
 800b5bc:	58024400 	.word	0x58024400
 800b5c0:	03d09000 	.word	0x03d09000
 800b5c4:	003d0900 	.word	0x003d0900
 800b5c8:	00f42400 	.word	0x00f42400
 800b5cc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5d0:	4b79      	ldr	r3, [pc, #484]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5dc:	d107      	bne.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5de:	f107 0318 	add.w	r3, r7, #24
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 f906 	bl	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5ec:	e0de      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5f2:	e0db      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5f8:	e0d8      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b600:	f040 8085 	bne.w	800b70e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b604:	4b6c      	ldr	r3, [pc, #432]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b608:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b60c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b614:	d06b      	beq.n	800b6ee <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800b616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b61c:	d874      	bhi.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800b61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b624:	d056      	beq.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800b626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b62c:	d86c      	bhi.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800b62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b630:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b634:	d03b      	beq.n	800b6ae <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800b636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b638:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b63c:	d864      	bhi.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800b63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b644:	d021      	beq.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800b646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b64c:	d85c      	bhi.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800b64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b650:	2b00      	cmp	r3, #0
 800b652:	d004      	beq.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b65a:	d004      	beq.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800b65c:	e054      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b65e:	f000 f8b3 	bl	800b7c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b662:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b664:	e0a2      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b666:	4b54      	ldr	r3, [pc, #336]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b66e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b672:	d107      	bne.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b674:	f107 0318 	add.w	r3, r7, #24
 800b678:	4618      	mov	r0, r3
 800b67a:	f000 f8bb 	bl	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b682:	e093      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b688:	e090      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b68a:	4b4b      	ldr	r3, [pc, #300]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b696:	d107      	bne.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b698:	f107 030c 	add.w	r3, r7, #12
 800b69c:	4618      	mov	r0, r3
 800b69e:	f000 f9fd 	bl	800ba9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b6a6:	e081      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6ac:	e07e      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b6ae:	4b42      	ldr	r3, [pc, #264]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0304 	and.w	r3, r3, #4
 800b6b6:	2b04      	cmp	r3, #4
 800b6b8:	d109      	bne.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b6ba:	4b3f      	ldr	r3, [pc, #252]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	08db      	lsrs	r3, r3, #3
 800b6c0:	f003 0303 	and.w	r3, r3, #3
 800b6c4:	4a3d      	ldr	r2, [pc, #244]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b6cc:	e06e      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6d2:	e06b      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b6d4:	4b38      	ldr	r3, [pc, #224]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6e0:	d102      	bne.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800b6e2:	4b37      	ldr	r3, [pc, #220]	; (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b6e6:	e061      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6ec:	e05e      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6ee:	4b32      	ldr	r3, [pc, #200]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6fa:	d102      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800b6fc:	4b31      	ldr	r3, [pc, #196]	; (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b700:	e054      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b702:	2300      	movs	r3, #0
 800b704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b706:	e051      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b708:	2300      	movs	r3, #0
 800b70a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b70c:	e04e      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b714:	d148      	bne.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b716:	4b28      	ldr	r3, [pc, #160]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b71a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b71e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b726:	d02a      	beq.n	800b77e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b72e:	d838      	bhi.n	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	2b00      	cmp	r3, #0
 800b734:	d004      	beq.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b73c:	d00d      	beq.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b73e:	e030      	b.n	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b740:	4b1d      	ldr	r3, [pc, #116]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b74c:	d102      	bne.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800b74e:	4b1d      	ldr	r3, [pc, #116]	; (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b750:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b752:	e02b      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b754:	2300      	movs	r3, #0
 800b756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b758:	e028      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b75a:	4b17      	ldr	r3, [pc, #92]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b766:	d107      	bne.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 fae9 	bl	800bd44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b774:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b776:	e019      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b778:	2300      	movs	r3, #0
 800b77a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b77c:	e016      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b77e:	4b0e      	ldr	r3, [pc, #56]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b78a:	d107      	bne.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b78c:	f107 0318 	add.w	r3, r7, #24
 800b790:	4618      	mov	r0, r3
 800b792:	f000 f82f 	bl	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b79a:	e007      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b79c:	2300      	movs	r3, #0
 800b79e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7a0:	e004      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7a6:	e001      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3740      	adds	r7, #64	; 0x40
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	58024400 	.word	0x58024400
 800b7bc:	03d09000 	.word	0x03d09000
 800b7c0:	003d0900 	.word	0x003d0900
 800b7c4:	00f42400 	.word	0x00f42400

0800b7c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b7cc:	f7fe fb46 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	4b06      	ldr	r3, [pc, #24]	; (800b7ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b7d4:	6a1b      	ldr	r3, [r3, #32]
 800b7d6:	091b      	lsrs	r3, r3, #4
 800b7d8:	f003 0307 	and.w	r3, r3, #7
 800b7dc:	4904      	ldr	r1, [pc, #16]	; (800b7f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b7de:	5ccb      	ldrb	r3, [r1, r3]
 800b7e0:	f003 031f 	and.w	r3, r3, #31
 800b7e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	58024400 	.word	0x58024400
 800b7f0:	08011a24 	.word	0x08011a24

0800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b089      	sub	sp, #36	; 0x24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b7fc:	4ba1      	ldr	r3, [pc, #644]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b800:	f003 0303 	and.w	r3, r3, #3
 800b804:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b806:	4b9f      	ldr	r3, [pc, #636]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80a:	0b1b      	lsrs	r3, r3, #12
 800b80c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b810:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b812:	4b9c      	ldr	r3, [pc, #624]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b816:	091b      	lsrs	r3, r3, #4
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b81e:	4b99      	ldr	r3, [pc, #612]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b822:	08db      	lsrs	r3, r3, #3
 800b824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	fb02 f303 	mul.w	r3, r2, r3
 800b82e:	ee07 3a90 	vmov	s15, r3
 800b832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b836:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f000 8111 	beq.w	800ba64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	2b02      	cmp	r3, #2
 800b846:	f000 8083 	beq.w	800b950 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	f200 80a1 	bhi.w	800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d003      	beq.n	800b860 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d056      	beq.n	800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b85e:	e099      	b.n	800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b860:	4b88      	ldr	r3, [pc, #544]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 0320 	and.w	r3, r3, #32
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d02d      	beq.n	800b8c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b86c:	4b85      	ldr	r3, [pc, #532]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	08db      	lsrs	r3, r3, #3
 800b872:	f003 0303 	and.w	r3, r3, #3
 800b876:	4a84      	ldr	r2, [pc, #528]	; (800ba88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b878:	fa22 f303 	lsr.w	r3, r2, r3
 800b87c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	ee07 3a90 	vmov	s15, r3
 800b884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	ee07 3a90 	vmov	s15, r3
 800b88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b896:	4b7b      	ldr	r3, [pc, #492]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b89e:	ee07 3a90 	vmov	s15, r3
 800b8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ba8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b8c6:	e087      	b.n	800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	ee07 3a90 	vmov	s15, r3
 800b8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ba90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8da:	4b6a      	ldr	r3, [pc, #424]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8e2:	ee07 3a90 	vmov	s15, r3
 800b8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ba8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b90a:	e065      	b.n	800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	ee07 3a90 	vmov	s15, r3
 800b912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b916:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b91e:	4b59      	ldr	r3, [pc, #356]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b926:	ee07 3a90 	vmov	s15, r3
 800b92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b92e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b932:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ba8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b93e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b94a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b94e:	e043      	b.n	800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	ee07 3a90 	vmov	s15, r3
 800b956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b95a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ba98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b95e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b962:	4b48      	ldr	r3, [pc, #288]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b96a:	ee07 3a90 	vmov	s15, r3
 800b96e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b972:	ed97 6a03 	vldr	s12, [r7, #12]
 800b976:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ba8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b97a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b97e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b98a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b98e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b992:	e021      	b.n	800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	ee07 3a90 	vmov	s15, r3
 800b99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b99e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9a6:	4b37      	ldr	r3, [pc, #220]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ae:	ee07 3a90 	vmov	s15, r3
 800b9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ba8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b9d8:	4b2a      	ldr	r3, [pc, #168]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9dc:	0a5b      	lsrs	r3, r3, #9
 800b9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e2:	ee07 3a90 	vmov	s15, r3
 800b9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9fe:	ee17 2a90 	vmov	r2, s15
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ba06:	4b1f      	ldr	r3, [pc, #124]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba0a:	0c1b      	lsrs	r3, r3, #16
 800ba0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba10:	ee07 3a90 	vmov	s15, r3
 800ba14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba20:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba2c:	ee17 2a90 	vmov	r2, s15
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ba34:	4b13      	ldr	r3, [pc, #76]	; (800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba38:	0e1b      	lsrs	r3, r3, #24
 800ba3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba3e:	ee07 3a90 	vmov	s15, r3
 800ba42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba5a:	ee17 2a90 	vmov	r2, s15
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ba62:	e008      	b.n	800ba76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	609a      	str	r2, [r3, #8]
}
 800ba76:	bf00      	nop
 800ba78:	3724      	adds	r7, #36	; 0x24
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	58024400 	.word	0x58024400
 800ba88:	03d09000 	.word	0x03d09000
 800ba8c:	46000000 	.word	0x46000000
 800ba90:	4c742400 	.word	0x4c742400
 800ba94:	4a742400 	.word	0x4a742400
 800ba98:	4b742400 	.word	0x4b742400

0800ba9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b089      	sub	sp, #36	; 0x24
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800baa4:	4ba1      	ldr	r3, [pc, #644]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa8:	f003 0303 	and.w	r3, r3, #3
 800baac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800baae:	4b9f      	ldr	r3, [pc, #636]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab2:	0d1b      	lsrs	r3, r3, #20
 800bab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bab8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800baba:	4b9c      	ldr	r3, [pc, #624]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800babc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babe:	0a1b      	lsrs	r3, r3, #8
 800bac0:	f003 0301 	and.w	r3, r3, #1
 800bac4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bac6:	4b99      	ldr	r3, [pc, #612]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baca:	08db      	lsrs	r3, r3, #3
 800bacc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bad0:	693a      	ldr	r2, [r7, #16]
 800bad2:	fb02 f303 	mul.w	r3, r2, r3
 800bad6:	ee07 3a90 	vmov	s15, r3
 800bada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bade:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f000 8111 	beq.w	800bd0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	2b02      	cmp	r3, #2
 800baee:	f000 8083 	beq.w	800bbf8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	f200 80a1 	bhi.w	800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d003      	beq.n	800bb08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d056      	beq.n	800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bb06:	e099      	b.n	800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb08:	4b88      	ldr	r3, [pc, #544]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f003 0320 	and.w	r3, r3, #32
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d02d      	beq.n	800bb70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb14:	4b85      	ldr	r3, [pc, #532]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	08db      	lsrs	r3, r3, #3
 800bb1a:	f003 0303 	and.w	r3, r3, #3
 800bb1e:	4a84      	ldr	r2, [pc, #528]	; (800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bb20:	fa22 f303 	lsr.w	r3, r2, r3
 800bb24:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	ee07 3a90 	vmov	s15, r3
 800bb2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	ee07 3a90 	vmov	s15, r3
 800bb36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb3e:	4b7b      	ldr	r3, [pc, #492]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb46:	ee07 3a90 	vmov	s15, r3
 800bb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb52:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bd34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bb6e:	e087      	b.n	800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	ee07 3a90 	vmov	s15, r3
 800bb76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bd38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bb7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb82:	4b6a      	ldr	r3, [pc, #424]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb8a:	ee07 3a90 	vmov	s15, r3
 800bb8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb92:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb96:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bd34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bbb2:	e065      	b.n	800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	ee07 3a90 	vmov	s15, r3
 800bbba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bbc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbc6:	4b59      	ldr	r3, [pc, #356]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbce:	ee07 3a90 	vmov	s15, r3
 800bbd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbda:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bd34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bbf6:	e043      	b.n	800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	ee07 3a90 	vmov	s15, r3
 800bbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bd40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bc06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc0a:	4b48      	ldr	r3, [pc, #288]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc12:	ee07 3a90 	vmov	s15, r3
 800bc16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bd34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc3a:	e021      	b.n	800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	ee07 3a90 	vmov	s15, r3
 800bc42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bc4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc4e:	4b37      	ldr	r3, [pc, #220]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc56:	ee07 3a90 	vmov	s15, r3
 800bc5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc62:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bd34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bc80:	4b2a      	ldr	r3, [pc, #168]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc84:	0a5b      	lsrs	r3, r3, #9
 800bc86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc8a:	ee07 3a90 	vmov	s15, r3
 800bc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bca6:	ee17 2a90 	vmov	r2, s15
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bcae:	4b1f      	ldr	r3, [pc, #124]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb2:	0c1b      	lsrs	r3, r3, #16
 800bcb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcb8:	ee07 3a90 	vmov	s15, r3
 800bcbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcd4:	ee17 2a90 	vmov	r2, s15
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bcdc:	4b13      	ldr	r3, [pc, #76]	; (800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce0:	0e1b      	lsrs	r3, r3, #24
 800bce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bce6:	ee07 3a90 	vmov	s15, r3
 800bcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd02:	ee17 2a90 	vmov	r2, s15
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bd0a:	e008      	b.n	800bd1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	609a      	str	r2, [r3, #8]
}
 800bd1e:	bf00      	nop
 800bd20:	3724      	adds	r7, #36	; 0x24
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop
 800bd2c:	58024400 	.word	0x58024400
 800bd30:	03d09000 	.word	0x03d09000
 800bd34:	46000000 	.word	0x46000000
 800bd38:	4c742400 	.word	0x4c742400
 800bd3c:	4a742400 	.word	0x4a742400
 800bd40:	4b742400 	.word	0x4b742400

0800bd44 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b089      	sub	sp, #36	; 0x24
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd4c:	4ba0      	ldr	r3, [pc, #640]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd50:	f003 0303 	and.w	r3, r3, #3
 800bd54:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bd56:	4b9e      	ldr	r3, [pc, #632]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5a:	091b      	lsrs	r3, r3, #4
 800bd5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd60:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bd62:	4b9b      	ldr	r3, [pc, #620]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd66:	f003 0301 	and.w	r3, r3, #1
 800bd6a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bd6c:	4b98      	ldr	r3, [pc, #608]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd70:	08db      	lsrs	r3, r3, #3
 800bd72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd76:	693a      	ldr	r2, [r7, #16]
 800bd78:	fb02 f303 	mul.w	r3, r2, r3
 800bd7c:	ee07 3a90 	vmov	s15, r3
 800bd80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd84:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f000 8111 	beq.w	800bfb2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	f000 8083 	beq.w	800be9e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	f200 80a1 	bhi.w	800bee2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d003      	beq.n	800bdae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d056      	beq.n	800be5a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bdac:	e099      	b.n	800bee2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdae:	4b88      	ldr	r3, [pc, #544]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f003 0320 	and.w	r3, r3, #32
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d02d      	beq.n	800be16 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bdba:	4b85      	ldr	r3, [pc, #532]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	08db      	lsrs	r3, r3, #3
 800bdc0:	f003 0303 	and.w	r3, r3, #3
 800bdc4:	4a83      	ldr	r2, [pc, #524]	; (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bdc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdca:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	ee07 3a90 	vmov	s15, r3
 800bdd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	ee07 3a90 	vmov	s15, r3
 800bddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde4:	4b7a      	ldr	r3, [pc, #488]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bde6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdec:	ee07 3a90 	vmov	s15, r3
 800bdf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdf8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be10:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800be14:	e087      	b.n	800bf26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	ee07 3a90 	vmov	s15, r3
 800be1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be20:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800be24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be28:	4b69      	ldr	r3, [pc, #420]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be30:	ee07 3a90 	vmov	s15, r3
 800be34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be38:	ed97 6a03 	vldr	s12, [r7, #12]
 800be3c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be58:	e065      	b.n	800bf26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	ee07 3a90 	vmov	s15, r3
 800be60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be64:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800be68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be6c:	4b58      	ldr	r3, [pc, #352]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be74:	ee07 3a90 	vmov	s15, r3
 800be78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800be80:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be9c:	e043      	b.n	800bf26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	ee07 3a90 	vmov	s15, r3
 800bea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800beac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beb0:	4b47      	ldr	r3, [pc, #284]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800beb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beb8:	ee07 3a90 	vmov	s15, r3
 800bebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bec0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bec4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800becc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bedc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bee0:	e021      	b.n	800bf26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	ee07 3a90 	vmov	s15, r3
 800bee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bef4:	4b36      	ldr	r3, [pc, #216]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800befc:	ee07 3a90 	vmov	s15, r3
 800bf00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf04:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf08:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf24:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800bf26:	4b2a      	ldr	r3, [pc, #168]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf2a:	0a5b      	lsrs	r3, r3, #9
 800bf2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf30:	ee07 3a90 	vmov	s15, r3
 800bf34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf40:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf4c:	ee17 2a90 	vmov	r2, s15
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800bf54:	4b1e      	ldr	r3, [pc, #120]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf58:	0c1b      	lsrs	r3, r3, #16
 800bf5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf7a:	ee17 2a90 	vmov	r2, s15
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800bf82:	4b13      	ldr	r3, [pc, #76]	; (800bfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf86:	0e1b      	lsrs	r3, r3, #24
 800bf88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf8c:	ee07 3a90 	vmov	s15, r3
 800bf90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfa8:	ee17 2a90 	vmov	r2, s15
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bfb0:	e008      	b.n	800bfc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	609a      	str	r2, [r3, #8]
}
 800bfc4:	bf00      	nop
 800bfc6:	3724      	adds	r7, #36	; 0x24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr
 800bfd0:	58024400 	.word	0x58024400
 800bfd4:	03d09000 	.word	0x03d09000
 800bfd8:	46000000 	.word	0x46000000
 800bfdc:	4c742400 	.word	0x4c742400
 800bfe0:	4a742400 	.word	0x4a742400
 800bfe4:	4b742400 	.word	0x4b742400

0800bfe8 <HAL_RCCEx_WWDGxSysResetConfig>:
  * @note   This bit can be set by software but is cleared by hardware during a system reset
  *
  * @retval None
  */
void HAL_RCCEx_WWDGxSysResetConfig(uint32_t RCC_WWDGx)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_SCOPE_WWDG(RCC_WWDGx));
  SET_BIT(RCC->GCR, RCC_WWDGx) ;
 800bff0:	4b06      	ldr	r3, [pc, #24]	; (800c00c <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
 800bff2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bff6:	4905      	ldr	r1, [pc, #20]	; (800c00c <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
}
 800c000:	bf00      	nop
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	58024400 	.word	0x58024400

0800c010 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c01e:	4b53      	ldr	r3, [pc, #332]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c022:	f003 0303 	and.w	r3, r3, #3
 800c026:	2b03      	cmp	r3, #3
 800c028:	d101      	bne.n	800c02e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	e099      	b.n	800c162 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c02e:	4b4f      	ldr	r3, [pc, #316]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a4e      	ldr	r2, [pc, #312]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c034:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c03a:	f7f6 ff1f 	bl	8002e7c <HAL_GetTick>
 800c03e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c040:	e008      	b.n	800c054 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c042:	f7f6 ff1b 	bl	8002e7c <HAL_GetTick>
 800c046:	4602      	mov	r2, r0
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	1ad3      	subs	r3, r2, r3
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d901      	bls.n	800c054 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c050:	2303      	movs	r3, #3
 800c052:	e086      	b.n	800c162 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c054:	4b45      	ldr	r3, [pc, #276]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1f0      	bne.n	800c042 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c060:	4b42      	ldr	r3, [pc, #264]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c064:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	031b      	lsls	r3, r3, #12
 800c06e:	493f      	ldr	r1, [pc, #252]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c070:	4313      	orrs	r3, r2
 800c072:	628b      	str	r3, [r1, #40]	; 0x28
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	3b01      	subs	r3, #1
 800c07a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	3b01      	subs	r3, #1
 800c084:	025b      	lsls	r3, r3, #9
 800c086:	b29b      	uxth	r3, r3
 800c088:	431a      	orrs	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	3b01      	subs	r3, #1
 800c090:	041b      	lsls	r3, r3, #16
 800c092:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c096:	431a      	orrs	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	3b01      	subs	r3, #1
 800c09e:	061b      	lsls	r3, r3, #24
 800c0a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c0a4:	4931      	ldr	r1, [pc, #196]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c0aa:	4b30      	ldr	r3, [pc, #192]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	695b      	ldr	r3, [r3, #20]
 800c0b6:	492d      	ldr	r1, [pc, #180]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c0bc:	4b2b      	ldr	r3, [pc, #172]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c0:	f023 0220 	bic.w	r2, r3, #32
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	699b      	ldr	r3, [r3, #24]
 800c0c8:	4928      	ldr	r1, [pc, #160]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c0ce:	4b27      	ldr	r3, [pc, #156]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d2:	4a26      	ldr	r2, [pc, #152]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c0d4:	f023 0310 	bic.w	r3, r3, #16
 800c0d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c0da:	4b24      	ldr	r3, [pc, #144]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c0dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0de:	4b24      	ldr	r3, [pc, #144]	; (800c170 <RCCEx_PLL2_Config+0x160>)
 800c0e0:	4013      	ands	r3, r2
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	69d2      	ldr	r2, [r2, #28]
 800c0e6:	00d2      	lsls	r2, r2, #3
 800c0e8:	4920      	ldr	r1, [pc, #128]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c0ee:	4b1f      	ldr	r3, [pc, #124]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f2:	4a1e      	ldr	r2, [pc, #120]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c0f4:	f043 0310 	orr.w	r3, r3, #16
 800c0f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d106      	bne.n	800c10e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c100:	4b1a      	ldr	r3, [pc, #104]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c104:	4a19      	ldr	r2, [pc, #100]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c106:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c10a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c10c:	e00f      	b.n	800c12e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d106      	bne.n	800c122 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c114:	4b15      	ldr	r3, [pc, #84]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c118:	4a14      	ldr	r2, [pc, #80]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c11a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c11e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c120:	e005      	b.n	800c12e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c122:	4b12      	ldr	r3, [pc, #72]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c126:	4a11      	ldr	r2, [pc, #68]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c12c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c12e:	4b0f      	ldr	r3, [pc, #60]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a0e      	ldr	r2, [pc, #56]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c134:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c13a:	f7f6 fe9f 	bl	8002e7c <HAL_GetTick>
 800c13e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c140:	e008      	b.n	800c154 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c142:	f7f6 fe9b 	bl	8002e7c <HAL_GetTick>
 800c146:	4602      	mov	r2, r0
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d901      	bls.n	800c154 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c150:	2303      	movs	r3, #3
 800c152:	e006      	b.n	800c162 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c154:	4b05      	ldr	r3, [pc, #20]	; (800c16c <RCCEx_PLL2_Config+0x15c>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d0f0      	beq.n	800c142 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c160:	7bfb      	ldrb	r3, [r7, #15]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	58024400 	.word	0x58024400
 800c170:	ffff0007 	.word	0xffff0007

0800c174 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c182:	4b53      	ldr	r3, [pc, #332]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c186:	f003 0303 	and.w	r3, r3, #3
 800c18a:	2b03      	cmp	r3, #3
 800c18c:	d101      	bne.n	800c192 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	e099      	b.n	800c2c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c192:	4b4f      	ldr	r3, [pc, #316]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a4e      	ldr	r2, [pc, #312]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c19c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c19e:	f7f6 fe6d 	bl	8002e7c <HAL_GetTick>
 800c1a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c1a4:	e008      	b.n	800c1b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c1a6:	f7f6 fe69 	bl	8002e7c <HAL_GetTick>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d901      	bls.n	800c1b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	e086      	b.n	800c2c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c1b8:	4b45      	ldr	r3, [pc, #276]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1f0      	bne.n	800c1a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c1c4:	4b42      	ldr	r3, [pc, #264]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	051b      	lsls	r3, r3, #20
 800c1d2:	493f      	ldr	r1, [pc, #252]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	628b      	str	r3, [r1, #40]	; 0x28
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	025b      	lsls	r3, r3, #9
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	431a      	orrs	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	041b      	lsls	r3, r3, #16
 800c1f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	691b      	ldr	r3, [r3, #16]
 800c200:	3b01      	subs	r3, #1
 800c202:	061b      	lsls	r3, r3, #24
 800c204:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c208:	4931      	ldr	r1, [pc, #196]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c20e:	4b30      	ldr	r3, [pc, #192]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c212:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	492d      	ldr	r1, [pc, #180]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c21c:	4313      	orrs	r3, r2
 800c21e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c220:	4b2b      	ldr	r3, [pc, #172]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c224:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	4928      	ldr	r1, [pc, #160]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c22e:	4313      	orrs	r3, r2
 800c230:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c232:	4b27      	ldr	r3, [pc, #156]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c236:	4a26      	ldr	r2, [pc, #152]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c23c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c23e:	4b24      	ldr	r3, [pc, #144]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c242:	4b24      	ldr	r3, [pc, #144]	; (800c2d4 <RCCEx_PLL3_Config+0x160>)
 800c244:	4013      	ands	r3, r2
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	69d2      	ldr	r2, [r2, #28]
 800c24a:	00d2      	lsls	r2, r2, #3
 800c24c:	4920      	ldr	r1, [pc, #128]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c24e:	4313      	orrs	r3, r2
 800c250:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c252:	4b1f      	ldr	r3, [pc, #124]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c256:	4a1e      	ldr	r2, [pc, #120]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c25c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d106      	bne.n	800c272 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c264:	4b1a      	ldr	r3, [pc, #104]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	4a19      	ldr	r2, [pc, #100]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c26a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c26e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c270:	e00f      	b.n	800c292 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d106      	bne.n	800c286 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c278:	4b15      	ldr	r3, [pc, #84]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27c:	4a14      	ldr	r2, [pc, #80]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c27e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c282:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c284:	e005      	b.n	800c292 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c286:	4b12      	ldr	r3, [pc, #72]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28a:	4a11      	ldr	r2, [pc, #68]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c28c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c290:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c292:	4b0f      	ldr	r3, [pc, #60]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a0e      	ldr	r2, [pc, #56]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c29c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c29e:	f7f6 fded 	bl	8002e7c <HAL_GetTick>
 800c2a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c2a4:	e008      	b.n	800c2b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c2a6:	f7f6 fde9 	bl	8002e7c <HAL_GetTick>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d901      	bls.n	800c2b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	e006      	b.n	800c2c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c2b8:	4b05      	ldr	r3, [pc, #20]	; (800c2d0 <RCCEx_PLL3_Config+0x15c>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d0f0      	beq.n	800c2a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	58024400 	.word	0x58024400
 800c2d4:	ffff0007 	.word	0xffff0007

0800c2d8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d101      	bne.n	800c2ea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e04d      	b.n	800c386 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	7a5b      	ldrb	r3, [r3, #9]
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d105      	bne.n	800c300 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7f5 fb60 	bl	80019c0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2202      	movs	r2, #2
 800c304:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f023 0120 	bic.w	r1, r3, #32
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	685a      	ldr	r2, [r3, #4]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	430a      	orrs	r2, r1
 800c31a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f042 0204 	orr.w	r2, r2, #4
 800c32a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c336:	2b40      	cmp	r3, #64	; 0x40
 800c338:	d104      	bne.n	800c344 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2204      	movs	r2, #4
 800c33e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	e020      	b.n	800c386 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800c344:	f7f6 fd9a 	bl	8002e7c <HAL_GetTick>
 800c348:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800c34a:	e00e      	b.n	800c36a <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c34c:	f7f6 fd96 	bl	8002e7c <HAL_GetTick>
 800c350:	4602      	mov	r2, r0
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	2b02      	cmp	r3, #2
 800c358:	d907      	bls.n	800c36a <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2204      	movs	r2, #4
 800c35e:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2202      	movs	r2, #2
 800c364:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e00d      	b.n	800c386 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	f003 0304 	and.w	r3, r3, #4
 800c374:	2b04      	cmp	r3, #4
 800c376:	d0e9      	beq.n	800c34c <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2201      	movs	r2, #1
 800c37c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
	...

0800c390 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800c398:	2300      	movs	r3, #0
 800c39a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e0eb      	b.n	800c57e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a75      	ldr	r2, [pc, #468]	; (800c588 <HAL_SPI_Init+0x1f8>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d00f      	beq.n	800c3d6 <HAL_SPI_Init+0x46>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a74      	ldr	r2, [pc, #464]	; (800c58c <HAL_SPI_Init+0x1fc>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d00a      	beq.n	800c3d6 <HAL_SPI_Init+0x46>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a72      	ldr	r2, [pc, #456]	; (800c590 <HAL_SPI_Init+0x200>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d005      	beq.n	800c3d6 <HAL_SPI_Init+0x46>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	2b0f      	cmp	r3, #15
 800c3d0:	d901      	bls.n	800c3d6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e0d3      	b.n	800c57e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 f8dc 	bl	800c594 <SPI_GetPacketSize>
 800c3dc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a69      	ldr	r2, [pc, #420]	; (800c588 <HAL_SPI_Init+0x1f8>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d00c      	beq.n	800c402 <HAL_SPI_Init+0x72>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a67      	ldr	r2, [pc, #412]	; (800c58c <HAL_SPI_Init+0x1fc>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d007      	beq.n	800c402 <HAL_SPI_Init+0x72>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a66      	ldr	r2, [pc, #408]	; (800c590 <HAL_SPI_Init+0x200>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d002      	beq.n	800c402 <HAL_SPI_Init+0x72>
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	2b08      	cmp	r3, #8
 800c400:	d811      	bhi.n	800c426 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c406:	4a60      	ldr	r2, [pc, #384]	; (800c588 <HAL_SPI_Init+0x1f8>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d009      	beq.n	800c420 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a5e      	ldr	r2, [pc, #376]	; (800c58c <HAL_SPI_Init+0x1fc>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d004      	beq.n	800c420 <HAL_SPI_Init+0x90>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a5d      	ldr	r2, [pc, #372]	; (800c590 <HAL_SPI_Init+0x200>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d104      	bne.n	800c42a <HAL_SPI_Init+0x9a>
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2b10      	cmp	r3, #16
 800c424:	d901      	bls.n	800c42a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e0a9      	b.n	800c57e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c430:	b2db      	uxtb	r3, r3
 800c432:	2b00      	cmp	r3, #0
 800c434:	d106      	bne.n	800c444 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7f5 fbf8 	bl	8001c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2202      	movs	r2, #2
 800c448:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f022 0201 	bic.w	r2, r2, #1
 800c45a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c464:	d119      	bne.n	800c49a <HAL_SPI_Init+0x10a>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c46e:	d103      	bne.n	800c478 <HAL_SPI_Init+0xe8>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c474:	2b00      	cmp	r3, #0
 800c476:	d008      	beq.n	800c48a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10c      	bne.n	800c49a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c488:	d107      	bne.n	800c49a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c498:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	69da      	ldr	r2, [r3, #28]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a2:	431a      	orrs	r2, r3
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	431a      	orrs	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ac:	ea42 0103 	orr.w	r1, r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68da      	ldr	r2, [r3, #12]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	430a      	orrs	r2, r1
 800c4ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c4:	431a      	orrs	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ca:	431a      	orrs	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	699b      	ldr	r3, [r3, #24]
 800c4d0:	431a      	orrs	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	431a      	orrs	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	695b      	ldr	r3, [r3, #20]
 800c4dc:	431a      	orrs	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a1b      	ldr	r3, [r3, #32]
 800c4e2:	431a      	orrs	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	431a      	orrs	r2, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4ee:	431a      	orrs	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4fa:	ea42 0103 	orr.w	r1, r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	430a      	orrs	r2, r1
 800c508:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d113      	bne.n	800c53a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c524:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c538:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0201 	bic.w	r2, r2, #1
 800c548:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00a      	beq.n	800c56c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	430a      	orrs	r2, r1
 800c56a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	40013000 	.word	0x40013000
 800c58c:	40003800 	.word	0x40003800
 800c590:	40003c00 	.word	0x40003c00

0800c594 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5a0:	095b      	lsrs	r3, r3, #5
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	3307      	adds	r3, #7
 800c5b2:	08db      	lsrs	r3, r3, #3
 800c5b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	fb02 f303 	mul.w	r3, r2, r3
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3714      	adds	r7, #20
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d101      	bne.n	800c5dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e049      	b.n	800c670 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d106      	bne.n	800c5f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7f5 fff5 	bl	80025e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2202      	movs	r2, #2
 800c5fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	3304      	adds	r3, #4
 800c606:	4619      	mov	r1, r3
 800c608:	4610      	mov	r0, r2
 800c60a:	f000 fc67 	bl	800cedc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2201      	movs	r2, #1
 800c612:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2201      	movs	r2, #1
 800c622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2201      	movs	r2, #1
 800c62a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2201      	movs	r2, #1
 800c63a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2201      	movs	r2, #1
 800c642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2201      	movs	r2, #1
 800c64a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2201      	movs	r2, #1
 800c652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2201      	movs	r2, #1
 800c662:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2201      	movs	r2, #1
 800c66a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c686:	b2db      	uxtb	r3, r3
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d001      	beq.n	800c690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c68c:	2301      	movs	r3, #1
 800c68e:	e04f      	b.n	800c730 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2202      	movs	r2, #2
 800c694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	68da      	ldr	r2, [r3, #12]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f042 0201 	orr.w	r2, r2, #1
 800c6a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a23      	ldr	r2, [pc, #140]	; (800c73c <HAL_TIM_Base_Start_IT+0xc4>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d01d      	beq.n	800c6ee <HAL_TIM_Base_Start_IT+0x76>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6ba:	d018      	beq.n	800c6ee <HAL_TIM_Base_Start_IT+0x76>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a1f      	ldr	r2, [pc, #124]	; (800c740 <HAL_TIM_Base_Start_IT+0xc8>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d013      	beq.n	800c6ee <HAL_TIM_Base_Start_IT+0x76>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a1e      	ldr	r2, [pc, #120]	; (800c744 <HAL_TIM_Base_Start_IT+0xcc>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d00e      	beq.n	800c6ee <HAL_TIM_Base_Start_IT+0x76>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a1c      	ldr	r2, [pc, #112]	; (800c748 <HAL_TIM_Base_Start_IT+0xd0>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d009      	beq.n	800c6ee <HAL_TIM_Base_Start_IT+0x76>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a1b      	ldr	r2, [pc, #108]	; (800c74c <HAL_TIM_Base_Start_IT+0xd4>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d004      	beq.n	800c6ee <HAL_TIM_Base_Start_IT+0x76>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a19      	ldr	r2, [pc, #100]	; (800c750 <HAL_TIM_Base_Start_IT+0xd8>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d115      	bne.n	800c71a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	689a      	ldr	r2, [r3, #8]
 800c6f4:	4b17      	ldr	r3, [pc, #92]	; (800c754 <HAL_TIM_Base_Start_IT+0xdc>)
 800c6f6:	4013      	ands	r3, r2
 800c6f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2b06      	cmp	r3, #6
 800c6fe:	d015      	beq.n	800c72c <HAL_TIM_Base_Start_IT+0xb4>
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c706:	d011      	beq.n	800c72c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f042 0201 	orr.w	r2, r2, #1
 800c716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c718:	e008      	b.n	800c72c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f042 0201 	orr.w	r2, r2, #1
 800c728:	601a      	str	r2, [r3, #0]
 800c72a:	e000      	b.n	800c72e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c72c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3714      	adds	r7, #20
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr
 800c73c:	40010000 	.word	0x40010000
 800c740:	40000400 	.word	0x40000400
 800c744:	40000800 	.word	0x40000800
 800c748:	40000c00 	.word	0x40000c00
 800c74c:	40010400 	.word	0x40010400
 800c750:	40001800 	.word	0x40001800
 800c754:	00010007 	.word	0x00010007

0800c758 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d101      	bne.n	800c76a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	e049      	b.n	800c7fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b00      	cmp	r3, #0
 800c774:	d106      	bne.n	800c784 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7f5 ffac 	bl	80026dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2202      	movs	r2, #2
 800c788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3304      	adds	r3, #4
 800c794:	4619      	mov	r1, r3
 800c796:	4610      	mov	r0, r2
 800c798:	f000 fba0 	bl	800cedc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7fc:	2300      	movs	r3, #0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c806:	b580      	push	{r7, lr}
 800c808:	b082      	sub	sp, #8
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d101      	bne.n	800c81a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c816:	2301      	movs	r3, #1
 800c818:	e041      	b.n	800c89e <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c820:	b2db      	uxtb	r3, r3
 800c822:	2b00      	cmp	r3, #0
 800c824:	d106      	bne.n	800c834 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f839 	bl	800c8a6 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2202      	movs	r2, #2
 800c838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	3304      	adds	r3, #4
 800c844:	4619      	mov	r1, r3
 800c846:	4610      	mov	r0, r2
 800c848:	f000 fb48 	bl	800cedc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f022 0208 	bic.w	r2, r2, #8
 800c85a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	6819      	ldr	r1, [r3, #0]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	430a      	orrs	r2, r1
 800c86a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2201      	movs	r2, #1
 800c878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2201      	movs	r2, #1
 800c890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800c8a6:	b480      	push	{r7}
 800c8a8:	b083      	sub	sp, #12
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800c8ae:	bf00      	nop
 800c8b0:	370c      	adds	r7, #12
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr

0800c8ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b082      	sub	sp, #8
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	f003 0302 	and.w	r3, r3, #2
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d122      	bne.n	800c916 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	f003 0302 	and.w	r3, r3, #2
 800c8da:	2b02      	cmp	r3, #2
 800c8dc:	d11b      	bne.n	800c916 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f06f 0202 	mvn.w	r2, #2
 800c8e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	699b      	ldr	r3, [r3, #24]
 800c8f4:	f003 0303 	and.w	r3, r3, #3
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d003      	beq.n	800c904 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 facf 	bl	800cea0 <HAL_TIM_IC_CaptureCallback>
 800c902:	e005      	b.n	800c910 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 fac1 	bl	800ce8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 fad2 	bl	800ceb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	f003 0304 	and.w	r3, r3, #4
 800c920:	2b04      	cmp	r3, #4
 800c922:	d122      	bne.n	800c96a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	f003 0304 	and.w	r3, r3, #4
 800c92e:	2b04      	cmp	r3, #4
 800c930:	d11b      	bne.n	800c96a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f06f 0204 	mvn.w	r2, #4
 800c93a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2202      	movs	r2, #2
 800c940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	699b      	ldr	r3, [r3, #24]
 800c948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d003      	beq.n	800c958 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 faa5 	bl	800cea0 <HAL_TIM_IC_CaptureCallback>
 800c956:	e005      	b.n	800c964 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fa97 	bl	800ce8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 faa8 	bl	800ceb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	691b      	ldr	r3, [r3, #16]
 800c970:	f003 0308 	and.w	r3, r3, #8
 800c974:	2b08      	cmp	r3, #8
 800c976:	d122      	bne.n	800c9be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	f003 0308 	and.w	r3, r3, #8
 800c982:	2b08      	cmp	r3, #8
 800c984:	d11b      	bne.n	800c9be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f06f 0208 	mvn.w	r2, #8
 800c98e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2204      	movs	r2, #4
 800c994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	69db      	ldr	r3, [r3, #28]
 800c99c:	f003 0303 	and.w	r3, r3, #3
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d003      	beq.n	800c9ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fa7b 	bl	800cea0 <HAL_TIM_IC_CaptureCallback>
 800c9aa:	e005      	b.n	800c9b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fa6d 	bl	800ce8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fa7e 	bl	800ceb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	f003 0310 	and.w	r3, r3, #16
 800c9c8:	2b10      	cmp	r3, #16
 800c9ca:	d122      	bne.n	800ca12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	f003 0310 	and.w	r3, r3, #16
 800c9d6:	2b10      	cmp	r3, #16
 800c9d8:	d11b      	bne.n	800ca12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f06f 0210 	mvn.w	r2, #16
 800c9e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2208      	movs	r2, #8
 800c9e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	69db      	ldr	r3, [r3, #28]
 800c9f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d003      	beq.n	800ca00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 fa51 	bl	800cea0 <HAL_TIM_IC_CaptureCallback>
 800c9fe:	e005      	b.n	800ca0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 fa43 	bl	800ce8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fa54 	bl	800ceb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d10e      	bne.n	800ca3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	f003 0301 	and.w	r3, r3, #1
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d107      	bne.n	800ca3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f06f 0201 	mvn.w	r2, #1
 800ca36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7f4 ff93 	bl	8001964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	691b      	ldr	r3, [r3, #16]
 800ca44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca48:	2b80      	cmp	r3, #128	; 0x80
 800ca4a:	d10e      	bne.n	800ca6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca56:	2b80      	cmp	r3, #128	; 0x80
 800ca58:	d107      	bne.n	800ca6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ca62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 fe13 	bl	800d690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca78:	d10e      	bne.n	800ca98 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca84:	2b80      	cmp	r3, #128	; 0x80
 800ca86:	d107      	bne.n	800ca98 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ca90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fe06 	bl	800d6a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caa2:	2b40      	cmp	r3, #64	; 0x40
 800caa4:	d10e      	bne.n	800cac4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab0:	2b40      	cmp	r3, #64	; 0x40
 800cab2:	d107      	bne.n	800cac4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cabc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 fa02 	bl	800cec8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	f003 0320 	and.w	r3, r3, #32
 800cace:	2b20      	cmp	r3, #32
 800cad0:	d10e      	bne.n	800caf0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	f003 0320 	and.w	r3, r3, #32
 800cadc:	2b20      	cmp	r3, #32
 800cade:	d107      	bne.n	800caf0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f06f 0220 	mvn.w	r2, #32
 800cae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 fdc6 	bl	800d67c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d101      	bne.n	800cb12 <HAL_TIM_IC_ConfigChannel+0x1a>
 800cb0e:	2302      	movs	r3, #2
 800cb10:	e082      	b.n	800cc18 <HAL_TIM_IC_ConfigChannel+0x120>
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2201      	movs	r2, #1
 800cb16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d11b      	bne.n	800cb58 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6818      	ldr	r0, [r3, #0]
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	6819      	ldr	r1, [r3, #0]
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	685a      	ldr	r2, [r3, #4]
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	f000 fb54 	bl	800d1dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	699a      	ldr	r2, [r3, #24]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 020c 	bic.w	r2, r2, #12
 800cb42:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6999      	ldr	r1, [r3, #24]
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	689a      	ldr	r2, [r3, #8]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	430a      	orrs	r2, r1
 800cb54:	619a      	str	r2, [r3, #24]
 800cb56:	e05a      	b.n	800cc0e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b04      	cmp	r3, #4
 800cb5c:	d11c      	bne.n	800cb98 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	6818      	ldr	r0, [r3, #0]
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	6819      	ldr	r1, [r3, #0]
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	685a      	ldr	r2, [r3, #4]
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	f000 fbd8 	bl	800d322 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	699a      	ldr	r2, [r3, #24]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800cb80:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	6999      	ldr	r1, [r3, #24]
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	021a      	lsls	r2, r3, #8
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	430a      	orrs	r2, r1
 800cb94:	619a      	str	r2, [r3, #24]
 800cb96:	e03a      	b.n	800cc0e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2b08      	cmp	r3, #8
 800cb9c:	d11b      	bne.n	800cbd6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6818      	ldr	r0, [r3, #0]
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	6819      	ldr	r1, [r3, #0]
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	685a      	ldr	r2, [r3, #4]
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	f000 fc25 	bl	800d3fc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	69da      	ldr	r2, [r3, #28]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f022 020c 	bic.w	r2, r2, #12
 800cbc0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	69d9      	ldr	r1, [r3, #28]
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	689a      	ldr	r2, [r3, #8]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	430a      	orrs	r2, r1
 800cbd2:	61da      	str	r2, [r3, #28]
 800cbd4:	e01b      	b.n	800cc0e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6818      	ldr	r0, [r3, #0]
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	6819      	ldr	r1, [r3, #0]
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	f000 fc45 	bl	800d474 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	69da      	ldr	r2, [r3, #28]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800cbf8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	69d9      	ldr	r1, [r3, #28]
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	021a      	lsls	r2, r3, #8
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	430a      	orrs	r2, r1
 800cc0c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d101      	bne.n	800cc38 <HAL_TIM_ConfigClockSource+0x18>
 800cc34:	2302      	movs	r3, #2
 800cc36:	e0db      	b.n	800cdf0 <HAL_TIM_ConfigClockSource+0x1d0>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2202      	movs	r2, #2
 800cc44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	4b69      	ldr	r3, [pc, #420]	; (800cdf8 <HAL_TIM_ConfigClockSource+0x1d8>)
 800cc54:	4013      	ands	r3, r2
 800cc56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a63      	ldr	r2, [pc, #396]	; (800cdfc <HAL_TIM_ConfigClockSource+0x1dc>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	f000 80a9 	beq.w	800cdc6 <HAL_TIM_ConfigClockSource+0x1a6>
 800cc74:	4a61      	ldr	r2, [pc, #388]	; (800cdfc <HAL_TIM_ConfigClockSource+0x1dc>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	f200 80ae 	bhi.w	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800cc7c:	4a60      	ldr	r2, [pc, #384]	; (800ce00 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	f000 80a1 	beq.w	800cdc6 <HAL_TIM_ConfigClockSource+0x1a6>
 800cc84:	4a5e      	ldr	r2, [pc, #376]	; (800ce00 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	f200 80a6 	bhi.w	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800cc8c:	4a5d      	ldr	r2, [pc, #372]	; (800ce04 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	f000 8099 	beq.w	800cdc6 <HAL_TIM_ConfigClockSource+0x1a6>
 800cc94:	4a5b      	ldr	r2, [pc, #364]	; (800ce04 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	f200 809e 	bhi.w	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800cc9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cca0:	f000 8091 	beq.w	800cdc6 <HAL_TIM_ConfigClockSource+0x1a6>
 800cca4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cca8:	f200 8096 	bhi.w	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800ccac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccb0:	f000 8089 	beq.w	800cdc6 <HAL_TIM_ConfigClockSource+0x1a6>
 800ccb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccb8:	f200 808e 	bhi.w	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800ccbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccc0:	d03e      	beq.n	800cd40 <HAL_TIM_ConfigClockSource+0x120>
 800ccc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccc6:	f200 8087 	bhi.w	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800ccca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccce:	f000 8085 	beq.w	800cddc <HAL_TIM_ConfigClockSource+0x1bc>
 800ccd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccd6:	d87f      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800ccd8:	2b70      	cmp	r3, #112	; 0x70
 800ccda:	d01a      	beq.n	800cd12 <HAL_TIM_ConfigClockSource+0xf2>
 800ccdc:	2b70      	cmp	r3, #112	; 0x70
 800ccde:	d87b      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800cce0:	2b60      	cmp	r3, #96	; 0x60
 800cce2:	d050      	beq.n	800cd86 <HAL_TIM_ConfigClockSource+0x166>
 800cce4:	2b60      	cmp	r3, #96	; 0x60
 800cce6:	d877      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800cce8:	2b50      	cmp	r3, #80	; 0x50
 800ccea:	d03c      	beq.n	800cd66 <HAL_TIM_ConfigClockSource+0x146>
 800ccec:	2b50      	cmp	r3, #80	; 0x50
 800ccee:	d873      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800ccf0:	2b40      	cmp	r3, #64	; 0x40
 800ccf2:	d058      	beq.n	800cda6 <HAL_TIM_ConfigClockSource+0x186>
 800ccf4:	2b40      	cmp	r3, #64	; 0x40
 800ccf6:	d86f      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800ccf8:	2b30      	cmp	r3, #48	; 0x30
 800ccfa:	d064      	beq.n	800cdc6 <HAL_TIM_ConfigClockSource+0x1a6>
 800ccfc:	2b30      	cmp	r3, #48	; 0x30
 800ccfe:	d86b      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800cd00:	2b20      	cmp	r3, #32
 800cd02:	d060      	beq.n	800cdc6 <HAL_TIM_ConfigClockSource+0x1a6>
 800cd04:	2b20      	cmp	r3, #32
 800cd06:	d867      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d05c      	beq.n	800cdc6 <HAL_TIM_ConfigClockSource+0x1a6>
 800cd0c:	2b10      	cmp	r3, #16
 800cd0e:	d05a      	beq.n	800cdc6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800cd10:	e062      	b.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6818      	ldr	r0, [r3, #0]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	6899      	ldr	r1, [r3, #8]
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	f000 fc03 	bl	800d52c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cd34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	609a      	str	r2, [r3, #8]
      break;
 800cd3e:	e04e      	b.n	800cdde <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6818      	ldr	r0, [r3, #0]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	6899      	ldr	r1, [r3, #8]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	685a      	ldr	r2, [r3, #4]
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	f000 fbec 	bl	800d52c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689a      	ldr	r2, [r3, #8]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd62:	609a      	str	r2, [r3, #8]
      break;
 800cd64:	e03b      	b.n	800cdde <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6818      	ldr	r0, [r3, #0]
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	6859      	ldr	r1, [r3, #4]
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	461a      	mov	r2, r3
 800cd74:	f000 faa6 	bl	800d2c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2150      	movs	r1, #80	; 0x50
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f000 fbb6 	bl	800d4f0 <TIM_ITRx_SetConfig>
      break;
 800cd84:	e02b      	b.n	800cdde <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6818      	ldr	r0, [r3, #0]
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	6859      	ldr	r1, [r3, #4]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	461a      	mov	r2, r3
 800cd94:	f000 fb02 	bl	800d39c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2160      	movs	r1, #96	; 0x60
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 fba6 	bl	800d4f0 <TIM_ITRx_SetConfig>
      break;
 800cda4:	e01b      	b.n	800cdde <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6818      	ldr	r0, [r3, #0]
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	6859      	ldr	r1, [r3, #4]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	f000 fa86 	bl	800d2c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2140      	movs	r1, #64	; 0x40
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f000 fb96 	bl	800d4f0 <TIM_ITRx_SetConfig>
      break;
 800cdc4:	e00b      	b.n	800cdde <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4619      	mov	r1, r3
 800cdd0:	4610      	mov	r0, r2
 800cdd2:	f000 fb8d 	bl	800d4f0 <TIM_ITRx_SetConfig>
        break;
 800cdd6:	e002      	b.n	800cdde <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800cdd8:	bf00      	nop
 800cdda:	e000      	b.n	800cdde <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800cddc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2201      	movs	r2, #1
 800cde2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdee:	2300      	movs	r3, #0
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3710      	adds	r7, #16
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	ffceff88 	.word	0xffceff88
 800cdfc:	00100040 	.word	0x00100040
 800ce00:	00100030 	.word	0x00100030
 800ce04:	00100020 	.word	0x00100020

0800ce08 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d101      	bne.n	800ce20 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ce1c:	2302      	movs	r3, #2
 800ce1e:	e031      	b.n	800ce84 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2202      	movs	r2, #2
 800ce2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ce30:	6839      	ldr	r1, [r7, #0]
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 f8ec 	bl	800d010 <TIM_SlaveTimer_SetConfig>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d009      	beq.n	800ce52 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e018      	b.n	800ce84 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	68da      	ldr	r2, [r3, #12]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce60:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	68da      	ldr	r2, [r3, #12]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce70:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2201      	movs	r2, #1
 800ce76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3708      	adds	r7, #8
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce94:	bf00      	nop
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cea8:	bf00      	nop
 800ceaa:	370c      	adds	r7, #12
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ced0:	bf00      	nop
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4a40      	ldr	r2, [pc, #256]	; (800cff0 <TIM_Base_SetConfig+0x114>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d013      	beq.n	800cf1c <TIM_Base_SetConfig+0x40>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cefa:	d00f      	beq.n	800cf1c <TIM_Base_SetConfig+0x40>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	4a3d      	ldr	r2, [pc, #244]	; (800cff4 <TIM_Base_SetConfig+0x118>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d00b      	beq.n	800cf1c <TIM_Base_SetConfig+0x40>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4a3c      	ldr	r2, [pc, #240]	; (800cff8 <TIM_Base_SetConfig+0x11c>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d007      	beq.n	800cf1c <TIM_Base_SetConfig+0x40>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	4a3b      	ldr	r2, [pc, #236]	; (800cffc <TIM_Base_SetConfig+0x120>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d003      	beq.n	800cf1c <TIM_Base_SetConfig+0x40>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4a3a      	ldr	r2, [pc, #232]	; (800d000 <TIM_Base_SetConfig+0x124>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d108      	bne.n	800cf2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4a2f      	ldr	r2, [pc, #188]	; (800cff0 <TIM_Base_SetConfig+0x114>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d01f      	beq.n	800cf76 <TIM_Base_SetConfig+0x9a>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf3c:	d01b      	beq.n	800cf76 <TIM_Base_SetConfig+0x9a>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4a2c      	ldr	r2, [pc, #176]	; (800cff4 <TIM_Base_SetConfig+0x118>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d017      	beq.n	800cf76 <TIM_Base_SetConfig+0x9a>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4a2b      	ldr	r2, [pc, #172]	; (800cff8 <TIM_Base_SetConfig+0x11c>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d013      	beq.n	800cf76 <TIM_Base_SetConfig+0x9a>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a2a      	ldr	r2, [pc, #168]	; (800cffc <TIM_Base_SetConfig+0x120>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d00f      	beq.n	800cf76 <TIM_Base_SetConfig+0x9a>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a29      	ldr	r2, [pc, #164]	; (800d000 <TIM_Base_SetConfig+0x124>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d00b      	beq.n	800cf76 <TIM_Base_SetConfig+0x9a>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a28      	ldr	r2, [pc, #160]	; (800d004 <TIM_Base_SetConfig+0x128>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d007      	beq.n	800cf76 <TIM_Base_SetConfig+0x9a>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a27      	ldr	r2, [pc, #156]	; (800d008 <TIM_Base_SetConfig+0x12c>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d003      	beq.n	800cf76 <TIM_Base_SetConfig+0x9a>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a26      	ldr	r2, [pc, #152]	; (800d00c <TIM_Base_SetConfig+0x130>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d108      	bne.n	800cf88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	4313      	orrs	r3, r2
 800cf86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	695b      	ldr	r3, [r3, #20]
 800cf92:	4313      	orrs	r3, r2
 800cf94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	689a      	ldr	r2, [r3, #8]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4a10      	ldr	r2, [pc, #64]	; (800cff0 <TIM_Base_SetConfig+0x114>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d00f      	beq.n	800cfd4 <TIM_Base_SetConfig+0xf8>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	4a12      	ldr	r2, [pc, #72]	; (800d000 <TIM_Base_SetConfig+0x124>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d00b      	beq.n	800cfd4 <TIM_Base_SetConfig+0xf8>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4a11      	ldr	r2, [pc, #68]	; (800d004 <TIM_Base_SetConfig+0x128>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d007      	beq.n	800cfd4 <TIM_Base_SetConfig+0xf8>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	4a10      	ldr	r2, [pc, #64]	; (800d008 <TIM_Base_SetConfig+0x12c>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d003      	beq.n	800cfd4 <TIM_Base_SetConfig+0xf8>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	4a0f      	ldr	r2, [pc, #60]	; (800d00c <TIM_Base_SetConfig+0x130>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d103      	bne.n	800cfdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	691a      	ldr	r2, [r3, #16]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	615a      	str	r2, [r3, #20]
}
 800cfe2:	bf00      	nop
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	40010000 	.word	0x40010000
 800cff4:	40000400 	.word	0x40000400
 800cff8:	40000800 	.word	0x40000800
 800cffc:	40000c00 	.word	0x40000c00
 800d000:	40010400 	.word	0x40010400
 800d004:	40014000 	.word	0x40014000
 800d008:	40014400 	.word	0x40014400
 800d00c:	40014800 	.word	0x40014800

0800d010 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b086      	sub	sp, #24
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d022:	697a      	ldr	r2, [r7, #20]
 800d024:	4b64      	ldr	r3, [pc, #400]	; (800d1b8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800d026:	4013      	ands	r3, r2
 800d028:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	4313      	orrs	r3, r2
 800d032:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d034:	697a      	ldr	r2, [r7, #20]
 800d036:	4b61      	ldr	r3, [pc, #388]	; (800d1bc <TIM_SlaveTimer_SetConfig+0x1ac>)
 800d038:	4013      	ands	r3, r2
 800d03a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	697a      	ldr	r2, [r7, #20]
 800d042:	4313      	orrs	r3, r2
 800d044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	4a5b      	ldr	r2, [pc, #364]	; (800d1c0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800d054:	4293      	cmp	r3, r2
 800d056:	f000 80a7 	beq.w	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d05a:	4a59      	ldr	r2, [pc, #356]	; (800d1c0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	f200 80a5 	bhi.w	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d066:	f000 809f 	beq.w	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d06a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d06e:	f200 809d 	bhi.w	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d072:	4a54      	ldr	r2, [pc, #336]	; (800d1c4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800d074:	4293      	cmp	r3, r2
 800d076:	f000 8097 	beq.w	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d07a:	4a52      	ldr	r2, [pc, #328]	; (800d1c4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	f200 8095 	bhi.w	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d082:	4a51      	ldr	r2, [pc, #324]	; (800d1c8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d084:	4293      	cmp	r3, r2
 800d086:	f000 808f 	beq.w	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d08a:	4a4f      	ldr	r2, [pc, #316]	; (800d1c8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	f200 808d 	bhi.w	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d092:	4a4e      	ldr	r2, [pc, #312]	; (800d1cc <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d094:	4293      	cmp	r3, r2
 800d096:	f000 8087 	beq.w	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d09a:	4a4c      	ldr	r2, [pc, #304]	; (800d1cc <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	f200 8085 	bhi.w	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d0a2:	4a4b      	ldr	r2, [pc, #300]	; (800d1d0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d07f      	beq.n	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d0a8:	4a49      	ldr	r2, [pc, #292]	; (800d1d0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d87e      	bhi.n	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d0ae:	4a49      	ldr	r2, [pc, #292]	; (800d1d4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d079      	beq.n	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d0b4:	4a47      	ldr	r2, [pc, #284]	; (800d1d4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d878      	bhi.n	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d0ba:	4a47      	ldr	r2, [pc, #284]	; (800d1d8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d073      	beq.n	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d0c0:	4a45      	ldr	r2, [pc, #276]	; (800d1d8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d872      	bhi.n	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d0c6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d0ca:	d06d      	beq.n	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d0cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d0d0:	d86c      	bhi.n	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d0d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0d6:	d067      	beq.n	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d0d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0dc:	d866      	bhi.n	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d0de:	2b70      	cmp	r3, #112	; 0x70
 800d0e0:	d01a      	beq.n	800d118 <TIM_SlaveTimer_SetConfig+0x108>
 800d0e2:	2b70      	cmp	r3, #112	; 0x70
 800d0e4:	d862      	bhi.n	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d0e6:	2b60      	cmp	r3, #96	; 0x60
 800d0e8:	d054      	beq.n	800d194 <TIM_SlaveTimer_SetConfig+0x184>
 800d0ea:	2b60      	cmp	r3, #96	; 0x60
 800d0ec:	d85e      	bhi.n	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d0ee:	2b50      	cmp	r3, #80	; 0x50
 800d0f0:	d046      	beq.n	800d180 <TIM_SlaveTimer_SetConfig+0x170>
 800d0f2:	2b50      	cmp	r3, #80	; 0x50
 800d0f4:	d85a      	bhi.n	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d0f6:	2b40      	cmp	r3, #64	; 0x40
 800d0f8:	d019      	beq.n	800d12e <TIM_SlaveTimer_SetConfig+0x11e>
 800d0fa:	2b40      	cmp	r3, #64	; 0x40
 800d0fc:	d856      	bhi.n	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d0fe:	2b30      	cmp	r3, #48	; 0x30
 800d100:	d052      	beq.n	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d102:	2b30      	cmp	r3, #48	; 0x30
 800d104:	d852      	bhi.n	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d106:	2b20      	cmp	r3, #32
 800d108:	d04e      	beq.n	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d10a:	2b20      	cmp	r3, #32
 800d10c:	d84e      	bhi.n	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d04a      	beq.n	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
 800d112:	2b10      	cmp	r3, #16
 800d114:	d048      	beq.n	800d1a8 <TIM_SlaveTimer_SetConfig+0x198>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800d116:	e049      	b.n	800d1ac <TIM_SlaveTimer_SetConfig+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6818      	ldr	r0, [r3, #0]
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	68d9      	ldr	r1, [r3, #12]
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	689a      	ldr	r2, [r3, #8]
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	691b      	ldr	r3, [r3, #16]
 800d128:	f000 fa00 	bl	800d52c <TIM_ETR_SetConfig>
      break;
 800d12c:	e03f      	b.n	800d1ae <TIM_SlaveTimer_SetConfig+0x19e>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b05      	cmp	r3, #5
 800d134:	d101      	bne.n	800d13a <TIM_SlaveTimer_SetConfig+0x12a>
        return HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	e03a      	b.n	800d1b0 <TIM_SlaveTimer_SetConfig+0x1a0>
      tmpccer = htim->Instance->CCER;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	6a1b      	ldr	r3, [r3, #32]
 800d140:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	6a1a      	ldr	r2, [r3, #32]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f022 0201 	bic.w	r2, r2, #1
 800d150:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	699b      	ldr	r3, [r3, #24]
 800d158:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d160:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	011b      	lsls	r3, r3, #4
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	693a      	ldr	r2, [r7, #16]
 800d17c:	621a      	str	r2, [r3, #32]
      break;
 800d17e:	e016      	b.n	800d1ae <TIM_SlaveTimer_SetConfig+0x19e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6818      	ldr	r0, [r3, #0]
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	6899      	ldr	r1, [r3, #8]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	461a      	mov	r2, r3
 800d18e:	f000 f899 	bl	800d2c4 <TIM_TI1_ConfigInputStage>
      break;
 800d192:	e00c      	b.n	800d1ae <TIM_SlaveTimer_SetConfig+0x19e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6818      	ldr	r0, [r3, #0]
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	6899      	ldr	r1, [r3, #8]
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	f000 f8fb 	bl	800d39c <TIM_TI2_ConfigInputStage>
      break;
 800d1a6:	e002      	b.n	800d1ae <TIM_SlaveTimer_SetConfig+0x19e>
        break;
 800d1a8:	bf00      	nop
 800d1aa:	e000      	b.n	800d1ae <TIM_SlaveTimer_SetConfig+0x19e>
      break;
 800d1ac:	bf00      	nop
  }
  return HAL_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	ffcfff8f 	.word	0xffcfff8f
 800d1bc:	fffefff8 	.word	0xfffefff8
 800d1c0:	00200010 	.word	0x00200010
 800d1c4:	00100070 	.word	0x00100070
 800d1c8:	00100060 	.word	0x00100060
 800d1cc:	00100050 	.word	0x00100050
 800d1d0:	00100040 	.word	0x00100040
 800d1d4:	00100030 	.word	0x00100030
 800d1d8:	00100020 	.word	0x00100020

0800d1dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b087      	sub	sp, #28
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
 800d1e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6a1b      	ldr	r3, [r3, #32]
 800d1ee:	f023 0201 	bic.w	r2, r3, #1
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	699b      	ldr	r3, [r3, #24]
 800d1fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6a1b      	ldr	r3, [r3, #32]
 800d200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	4a28      	ldr	r2, [pc, #160]	; (800d2a8 <TIM_TI1_SetConfig+0xcc>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d01b      	beq.n	800d242 <TIM_TI1_SetConfig+0x66>
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d210:	d017      	beq.n	800d242 <TIM_TI1_SetConfig+0x66>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	4a25      	ldr	r2, [pc, #148]	; (800d2ac <TIM_TI1_SetConfig+0xd0>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d013      	beq.n	800d242 <TIM_TI1_SetConfig+0x66>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	4a24      	ldr	r2, [pc, #144]	; (800d2b0 <TIM_TI1_SetConfig+0xd4>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d00f      	beq.n	800d242 <TIM_TI1_SetConfig+0x66>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	4a23      	ldr	r2, [pc, #140]	; (800d2b4 <TIM_TI1_SetConfig+0xd8>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d00b      	beq.n	800d242 <TIM_TI1_SetConfig+0x66>
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	4a22      	ldr	r2, [pc, #136]	; (800d2b8 <TIM_TI1_SetConfig+0xdc>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d007      	beq.n	800d242 <TIM_TI1_SetConfig+0x66>
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	4a21      	ldr	r2, [pc, #132]	; (800d2bc <TIM_TI1_SetConfig+0xe0>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d003      	beq.n	800d242 <TIM_TI1_SetConfig+0x66>
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	4a20      	ldr	r2, [pc, #128]	; (800d2c0 <TIM_TI1_SetConfig+0xe4>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d101      	bne.n	800d246 <TIM_TI1_SetConfig+0x6a>
 800d242:	2301      	movs	r3, #1
 800d244:	e000      	b.n	800d248 <TIM_TI1_SetConfig+0x6c>
 800d246:	2300      	movs	r3, #0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d008      	beq.n	800d25e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	f023 0303 	bic.w	r3, r3, #3
 800d252:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d254:	697a      	ldr	r2, [r7, #20]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	4313      	orrs	r3, r2
 800d25a:	617b      	str	r3, [r7, #20]
 800d25c:	e003      	b.n	800d266 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	f043 0301 	orr.w	r3, r3, #1
 800d264:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d26c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	011b      	lsls	r3, r3, #4
 800d272:	b2db      	uxtb	r3, r3
 800d274:	697a      	ldr	r2, [r7, #20]
 800d276:	4313      	orrs	r3, r2
 800d278:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f023 030a 	bic.w	r3, r3, #10
 800d280:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	f003 030a 	and.w	r3, r3, #10
 800d288:	693a      	ldr	r2, [r7, #16]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	693a      	ldr	r2, [r7, #16]
 800d298:	621a      	str	r2, [r3, #32]
}
 800d29a:	bf00      	nop
 800d29c:	371c      	adds	r7, #28
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr
 800d2a6:	bf00      	nop
 800d2a8:	40010000 	.word	0x40010000
 800d2ac:	40000400 	.word	0x40000400
 800d2b0:	40000800 	.word	0x40000800
 800d2b4:	40000c00 	.word	0x40000c00
 800d2b8:	40010400 	.word	0x40010400
 800d2bc:	40001800 	.word	0x40001800
 800d2c0:	40014000 	.word	0x40014000

0800d2c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b087      	sub	sp, #28
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	6a1b      	ldr	r3, [r3, #32]
 800d2d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6a1b      	ldr	r3, [r3, #32]
 800d2da:	f023 0201 	bic.w	r2, r3, #1
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	699b      	ldr	r3, [r3, #24]
 800d2e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d2ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	011b      	lsls	r3, r3, #4
 800d2f4:	693a      	ldr	r2, [r7, #16]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	f023 030a 	bic.w	r3, r3, #10
 800d300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d302:	697a      	ldr	r2, [r7, #20]
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	4313      	orrs	r3, r2
 800d308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	697a      	ldr	r2, [r7, #20]
 800d314:	621a      	str	r2, [r3, #32]
}
 800d316:	bf00      	nop
 800d318:	371c      	adds	r7, #28
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr

0800d322 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d322:	b480      	push	{r7}
 800d324:	b087      	sub	sp, #28
 800d326:	af00      	add	r7, sp, #0
 800d328:	60f8      	str	r0, [r7, #12]
 800d32a:	60b9      	str	r1, [r7, #8]
 800d32c:	607a      	str	r2, [r7, #4]
 800d32e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6a1b      	ldr	r3, [r3, #32]
 800d334:	f023 0210 	bic.w	r2, r3, #16
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	699b      	ldr	r3, [r3, #24]
 800d340:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6a1b      	ldr	r3, [r3, #32]
 800d346:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d34e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	021b      	lsls	r3, r3, #8
 800d354:	697a      	ldr	r2, [r7, #20]
 800d356:	4313      	orrs	r3, r2
 800d358:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d360:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	031b      	lsls	r3, r3, #12
 800d366:	b29b      	uxth	r3, r3
 800d368:	697a      	ldr	r2, [r7, #20]
 800d36a:	4313      	orrs	r3, r2
 800d36c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d374:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	011b      	lsls	r3, r3, #4
 800d37a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d37e:	693a      	ldr	r2, [r7, #16]
 800d380:	4313      	orrs	r3, r2
 800d382:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	697a      	ldr	r2, [r7, #20]
 800d388:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	621a      	str	r2, [r3, #32]
}
 800d390:	bf00      	nop
 800d392:	371c      	adds	r7, #28
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b087      	sub	sp, #28
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6a1b      	ldr	r3, [r3, #32]
 800d3ac:	f023 0210 	bic.w	r2, r3, #16
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	699b      	ldr	r3, [r3, #24]
 800d3b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	6a1b      	ldr	r3, [r3, #32]
 800d3be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d3c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	031b      	lsls	r3, r3, #12
 800d3cc:	697a      	ldr	r2, [r7, #20]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d3d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	011b      	lsls	r3, r3, #4
 800d3de:	693a      	ldr	r2, [r7, #16]
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	693a      	ldr	r2, [r7, #16]
 800d3ee:	621a      	str	r2, [r3, #32]
}
 800d3f0:	bf00      	nop
 800d3f2:	371c      	adds	r7, #28
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b087      	sub	sp, #28
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	6a1b      	ldr	r3, [r3, #32]
 800d40e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	69db      	ldr	r3, [r3, #28]
 800d41a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6a1b      	ldr	r3, [r3, #32]
 800d420:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f023 0303 	bic.w	r3, r3, #3
 800d428:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d42a:	697a      	ldr	r2, [r7, #20]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4313      	orrs	r3, r2
 800d430:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d438:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	011b      	lsls	r3, r3, #4
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	697a      	ldr	r2, [r7, #20]
 800d442:	4313      	orrs	r3, r2
 800d444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d44c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	021b      	lsls	r3, r3, #8
 800d452:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d456:	693a      	ldr	r2, [r7, #16]
 800d458:	4313      	orrs	r3, r2
 800d45a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	697a      	ldr	r2, [r7, #20]
 800d460:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	693a      	ldr	r2, [r7, #16]
 800d466:	621a      	str	r2, [r3, #32]
}
 800d468:	bf00      	nop
 800d46a:	371c      	adds	r7, #28
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d474:	b480      	push	{r7}
 800d476:	b087      	sub	sp, #28
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	607a      	str	r2, [r7, #4]
 800d480:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	6a1b      	ldr	r3, [r3, #32]
 800d486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	69db      	ldr	r3, [r3, #28]
 800d492:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6a1b      	ldr	r3, [r3, #32]
 800d498:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	021b      	lsls	r3, r3, #8
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d4b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	031b      	lsls	r3, r3, #12
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d4c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	031b      	lsls	r3, r3, #12
 800d4cc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d4d0:	693a      	ldr	r2, [r7, #16]
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	697a      	ldr	r2, [r7, #20]
 800d4da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	693a      	ldr	r2, [r7, #16]
 800d4e0:	621a      	str	r2, [r3, #32]
}
 800d4e2:	bf00      	nop
 800d4e4:	371c      	adds	r7, #28
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
	...

0800d4f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b085      	sub	sp, #20
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d500:	68fa      	ldr	r2, [r7, #12]
 800d502:	4b09      	ldr	r3, [pc, #36]	; (800d528 <TIM_ITRx_SetConfig+0x38>)
 800d504:	4013      	ands	r3, r2
 800d506:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d508:	683a      	ldr	r2, [r7, #0]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	4313      	orrs	r3, r2
 800d50e:	f043 0307 	orr.w	r3, r3, #7
 800d512:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	68fa      	ldr	r2, [r7, #12]
 800d518:	609a      	str	r2, [r3, #8]
}
 800d51a:	bf00      	nop
 800d51c:	3714      	adds	r7, #20
 800d51e:	46bd      	mov	sp, r7
 800d520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	ffcfff8f 	.word	0xffcfff8f

0800d52c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b087      	sub	sp, #28
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	021a      	lsls	r2, r3, #8
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	431a      	orrs	r2, r3
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	4313      	orrs	r3, r2
 800d554:	697a      	ldr	r2, [r7, #20]
 800d556:	4313      	orrs	r3, r2
 800d558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	697a      	ldr	r2, [r7, #20]
 800d55e:	609a      	str	r2, [r3, #8]
}
 800d560:	bf00      	nop
 800d562:	371c      	adds	r7, #28
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d101      	bne.n	800d584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d580:	2302      	movs	r3, #2
 800d582:	e068      	b.n	800d656 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2202      	movs	r2, #2
 800d590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a2e      	ldr	r2, [pc, #184]	; (800d664 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d004      	beq.n	800d5b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a2d      	ldr	r2, [pc, #180]	; (800d668 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d108      	bne.n	800d5ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d5be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	68fa      	ldr	r2, [r7, #12]
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	68fa      	ldr	r2, [r7, #12]
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	68fa      	ldr	r2, [r7, #12]
 800d5e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a1e      	ldr	r2, [pc, #120]	; (800d664 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d01d      	beq.n	800d62a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5f6:	d018      	beq.n	800d62a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a1b      	ldr	r2, [pc, #108]	; (800d66c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d013      	beq.n	800d62a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a1a      	ldr	r2, [pc, #104]	; (800d670 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d00e      	beq.n	800d62a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a18      	ldr	r2, [pc, #96]	; (800d674 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d009      	beq.n	800d62a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a13      	ldr	r2, [pc, #76]	; (800d668 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d004      	beq.n	800d62a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a14      	ldr	r2, [pc, #80]	; (800d678 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d10c      	bne.n	800d644 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	4313      	orrs	r3, r2
 800d63a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2201      	movs	r2, #1
 800d648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3714      	adds	r7, #20
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	40010000 	.word	0x40010000
 800d668:	40010400 	.word	0x40010400
 800d66c:	40000400 	.word	0x40000400
 800d670:	40000800 	.word	0x40000800
 800d674:	40000c00 	.word	0x40000c00
 800d678:	40001800 	.word	0x40001800

0800d67c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6ac:	bf00      	nop
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d101      	bne.n	800d6ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e042      	b.n	800d750 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d106      	bne.n	800d6e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7f5 f933 	bl	8002948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2224      	movs	r2, #36	; 0x24
 800d6e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f022 0201 	bic.w	r2, r2, #1
 800d6f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fb06 	bl	800dd0c <UART_SetConfig>
 800d700:	4603      	mov	r3, r0
 800d702:	2b01      	cmp	r3, #1
 800d704:	d101      	bne.n	800d70a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d706:	2301      	movs	r3, #1
 800d708:	e022      	b.n	800d750 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d002      	beq.n	800d718 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f001 f864 	bl	800e7e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	685a      	ldr	r2, [r3, #4]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	689a      	ldr	r2, [r3, #8]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f042 0201 	orr.w	r2, r2, #1
 800d746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f001 f8eb 	bl	800e924 <UART_CheckIdleState>
 800d74e:	4603      	mov	r3, r0
}
 800d750:	4618      	mov	r0, r3
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b088      	sub	sp, #32
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	69db      	ldr	r3, [r3, #28]
 800d766:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d778:	69fa      	ldr	r2, [r7, #28]
 800d77a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d77e:	4013      	ands	r3, r2
 800d780:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d118      	bne.n	800d7ba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	f003 0320 	and.w	r3, r3, #32
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d013      	beq.n	800d7ba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	f003 0320 	and.w	r3, r3, #32
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d104      	bne.n	800d7a6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d009      	beq.n	800d7ba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f000 8282 	beq.w	800dcb4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	4798      	blx	r3
      }
      return;
 800d7b8:	e27c      	b.n	800dcb4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	f000 80ef 	beq.w	800d9a0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d7c2:	697a      	ldr	r2, [r7, #20]
 800d7c4:	4b73      	ldr	r3, [pc, #460]	; (800d994 <HAL_UART_IRQHandler+0x23c>)
 800d7c6:	4013      	ands	r3, r2
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d105      	bne.n	800d7d8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d7cc:	69ba      	ldr	r2, [r7, #24]
 800d7ce:	4b72      	ldr	r3, [pc, #456]	; (800d998 <HAL_UART_IRQHandler+0x240>)
 800d7d0:	4013      	ands	r3, r2
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f000 80e4 	beq.w	800d9a0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	f003 0301 	and.w	r3, r3, #1
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d010      	beq.n	800d804 <HAL_UART_IRQHandler+0xac>
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00b      	beq.n	800d804 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7fa:	f043 0201 	orr.w	r2, r3, #1
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	f003 0302 	and.w	r3, r3, #2
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d010      	beq.n	800d830 <HAL_UART_IRQHandler+0xd8>
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	f003 0301 	and.w	r3, r3, #1
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00b      	beq.n	800d830 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2202      	movs	r2, #2
 800d81e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d826:	f043 0204 	orr.w	r2, r3, #4
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	f003 0304 	and.w	r3, r3, #4
 800d836:	2b00      	cmp	r3, #0
 800d838:	d010      	beq.n	800d85c <HAL_UART_IRQHandler+0x104>
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	f003 0301 	and.w	r3, r3, #1
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00b      	beq.n	800d85c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2204      	movs	r2, #4
 800d84a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d852:	f043 0202 	orr.w	r2, r3, #2
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	f003 0308 	and.w	r3, r3, #8
 800d862:	2b00      	cmp	r3, #0
 800d864:	d015      	beq.n	800d892 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	f003 0320 	and.w	r3, r3, #32
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d104      	bne.n	800d87a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d870:	697a      	ldr	r2, [r7, #20]
 800d872:	4b48      	ldr	r3, [pc, #288]	; (800d994 <HAL_UART_IRQHandler+0x23c>)
 800d874:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00b      	beq.n	800d892 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2208      	movs	r2, #8
 800d880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d888:	f043 0208 	orr.w	r2, r3, #8
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d011      	beq.n	800d8c0 <HAL_UART_IRQHandler+0x168>
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00c      	beq.n	800d8c0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8b6:	f043 0220 	orr.w	r2, r3, #32
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	f000 81f6 	beq.w	800dcb8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	f003 0320 	and.w	r3, r3, #32
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d011      	beq.n	800d8fa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	f003 0320 	and.w	r3, r3, #32
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d104      	bne.n	800d8ea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d007      	beq.n	800d8fa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d900:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d90c:	2b40      	cmp	r3, #64	; 0x40
 800d90e:	d004      	beq.n	800d91a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d916:	2b00      	cmp	r3, #0
 800d918:	d031      	beq.n	800d97e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f001 f8ce 	bl	800eabc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d92a:	2b40      	cmp	r3, #64	; 0x40
 800d92c:	d123      	bne.n	800d976 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	689a      	ldr	r2, [r3, #8]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d93c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d942:	2b00      	cmp	r3, #0
 800d944:	d013      	beq.n	800d96e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d94a:	4a14      	ldr	r2, [pc, #80]	; (800d99c <HAL_UART_IRQHandler+0x244>)
 800d94c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d952:	4618      	mov	r0, r3
 800d954:	f7f7 ff1a 	bl	800578c <HAL_DMA_Abort_IT>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d017      	beq.n	800d98e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d968:	4610      	mov	r0, r2
 800d96a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d96c:	e00f      	b.n	800d98e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f000 f9b6 	bl	800dce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d974:	e00b      	b.n	800d98e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f9b2 	bl	800dce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d97c:	e007      	b.n	800d98e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 f9ae 	bl	800dce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d98c:	e194      	b.n	800dcb8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d98e:	bf00      	nop
    return;
 800d990:	e192      	b.n	800dcb8 <HAL_UART_IRQHandler+0x560>
 800d992:	bf00      	nop
 800d994:	10000001 	.word	0x10000001
 800d998:	04000120 	.word	0x04000120
 800d99c:	0800eb21 	.word	0x0800eb21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	f040 810f 	bne.w	800dbc8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	f003 0310 	and.w	r3, r3, #16
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f000 8109 	beq.w	800dbc8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	f003 0310 	and.w	r3, r3, #16
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f000 8103 	beq.w	800dbc8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2210      	movs	r2, #16
 800d9c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	689b      	ldr	r3, [r3, #8]
 800d9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9d4:	2b40      	cmp	r3, #64	; 0x40
 800d9d6:	f040 80bb 	bne.w	800db50 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a8f      	ldr	r2, [pc, #572]	; (800dc20 <HAL_UART_IRQHandler+0x4c8>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d059      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a8d      	ldr	r2, [pc, #564]	; (800dc24 <HAL_UART_IRQHandler+0x4cc>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d053      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4a8b      	ldr	r2, [pc, #556]	; (800dc28 <HAL_UART_IRQHandler+0x4d0>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d04d      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a89      	ldr	r2, [pc, #548]	; (800dc2c <HAL_UART_IRQHandler+0x4d4>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d047      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a87      	ldr	r2, [pc, #540]	; (800dc30 <HAL_UART_IRQHandler+0x4d8>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d041      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a85      	ldr	r2, [pc, #532]	; (800dc34 <HAL_UART_IRQHandler+0x4dc>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d03b      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a83      	ldr	r2, [pc, #524]	; (800dc38 <HAL_UART_IRQHandler+0x4e0>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d035      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a81      	ldr	r2, [pc, #516]	; (800dc3c <HAL_UART_IRQHandler+0x4e4>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d02f      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a7f      	ldr	r2, [pc, #508]	; (800dc40 <HAL_UART_IRQHandler+0x4e8>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d029      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a7d      	ldr	r2, [pc, #500]	; (800dc44 <HAL_UART_IRQHandler+0x4ec>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d023      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a7b      	ldr	r2, [pc, #492]	; (800dc48 <HAL_UART_IRQHandler+0x4f0>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d01d      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a79      	ldr	r2, [pc, #484]	; (800dc4c <HAL_UART_IRQHandler+0x4f4>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d017      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a77      	ldr	r2, [pc, #476]	; (800dc50 <HAL_UART_IRQHandler+0x4f8>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d011      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a75      	ldr	r2, [pc, #468]	; (800dc54 <HAL_UART_IRQHandler+0x4fc>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d00b      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a73      	ldr	r2, [pc, #460]	; (800dc58 <HAL_UART_IRQHandler+0x500>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d005      	beq.n	800da9a <HAL_UART_IRQHandler+0x342>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a71      	ldr	r2, [pc, #452]	; (800dc5c <HAL_UART_IRQHandler+0x504>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d105      	bne.n	800daa6 <HAL_UART_IRQHandler+0x34e>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	e004      	b.n	800dab0 <HAL_UART_IRQHandler+0x358>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	b29b      	uxth	r3, r3
 800dab0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800dab2:	893b      	ldrh	r3, [r7, #8]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	f000 8101 	beq.w	800dcbc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dac0:	893a      	ldrh	r2, [r7, #8]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	f080 80fa 	bcs.w	800dcbc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	893a      	ldrh	r2, [r7, #8]
 800dacc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dad4:	69db      	ldr	r3, [r3, #28]
 800dad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dada:	d02b      	beq.n	800db34 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800daea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	689a      	ldr	r2, [r3, #8]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f022 0201 	bic.w	r2, r2, #1
 800dafa:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	689a      	ldr	r2, [r3, #8]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db0a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2220      	movs	r2, #32
 800db10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f022 0210 	bic.w	r2, r2, #16
 800db28:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db2e:	4618      	mov	r0, r3
 800db30:	f7f7 fb0e 	bl	8005150 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db40:	b29b      	uxth	r3, r3
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	b29b      	uxth	r3, r3
 800db46:	4619      	mov	r1, r3
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f8d3 	bl	800dcf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db4e:	e0b5      	b.n	800dcbc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	1ad3      	subs	r3, r2, r3
 800db60:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db68:	b29b      	uxth	r3, r3
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f000 80a8 	beq.w	800dcc0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800db70:	897b      	ldrh	r3, [r7, #10]
 800db72:	2b00      	cmp	r3, #0
 800db74:	f000 80a4 	beq.w	800dcc0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800db86:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6899      	ldr	r1, [r3, #8]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	4b33      	ldr	r3, [pc, #204]	; (800dc60 <HAL_UART_IRQHandler+0x508>)
 800db94:	400b      	ands	r3, r1
 800db96:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2220      	movs	r2, #32
 800db9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f022 0210 	bic.w	r2, r2, #16
 800dbba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dbbc:	897b      	ldrh	r3, [r7, #10]
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 f897 	bl	800dcf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dbc6:	e07b      	b.n	800dcc0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00d      	beq.n	800dbee <HAL_UART_IRQHandler+0x496>
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d008      	beq.n	800dbee <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dbe4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 ffca 	bl	800eb80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbec:	e06b      	b.n	800dcc6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d035      	beq.n	800dc64 <HAL_UART_IRQHandler+0x50c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d104      	bne.n	800dc0c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d02b      	beq.n	800dc64 <HAL_UART_IRQHandler+0x50c>
  {
    if (huart->TxISR != NULL)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d057      	beq.n	800dcc4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	4798      	blx	r3
    }
    return;
 800dc1c:	e052      	b.n	800dcc4 <HAL_UART_IRQHandler+0x56c>
 800dc1e:	bf00      	nop
 800dc20:	40020010 	.word	0x40020010
 800dc24:	40020028 	.word	0x40020028
 800dc28:	40020040 	.word	0x40020040
 800dc2c:	40020058 	.word	0x40020058
 800dc30:	40020070 	.word	0x40020070
 800dc34:	40020088 	.word	0x40020088
 800dc38:	400200a0 	.word	0x400200a0
 800dc3c:	400200b8 	.word	0x400200b8
 800dc40:	40020410 	.word	0x40020410
 800dc44:	40020428 	.word	0x40020428
 800dc48:	40020440 	.word	0x40020440
 800dc4c:	40020458 	.word	0x40020458
 800dc50:	40020470 	.word	0x40020470
 800dc54:	40020488 	.word	0x40020488
 800dc58:	400204a0 	.word	0x400204a0
 800dc5c:	400204b8 	.word	0x400204b8
 800dc60:	effffffe 	.word	0xeffffffe
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d008      	beq.n	800dc80 <HAL_UART_IRQHandler+0x528>
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d003      	beq.n	800dc80 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 ff67 	bl	800eb4c <UART_EndTransmit_IT>
    return;
 800dc7e:	e022      	b.n	800dcc6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d008      	beq.n	800dc9c <HAL_UART_IRQHandler+0x544>
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d003      	beq.n	800dc9c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 ff87 	bl	800eba8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc9a:	e014      	b.n	800dcc6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00f      	beq.n	800dcc6 <HAL_UART_IRQHandler+0x56e>
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	da0c      	bge.n	800dcc6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 ff71 	bl	800eb94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dcb2:	e008      	b.n	800dcc6 <HAL_UART_IRQHandler+0x56e>
      return;
 800dcb4:	bf00      	nop
 800dcb6:	e006      	b.n	800dcc6 <HAL_UART_IRQHandler+0x56e>
    return;
 800dcb8:	bf00      	nop
 800dcba:	e004      	b.n	800dcc6 <HAL_UART_IRQHandler+0x56e>
      return;
 800dcbc:	bf00      	nop
 800dcbe:	e002      	b.n	800dcc6 <HAL_UART_IRQHandler+0x56e>
      return;
 800dcc0:	bf00      	nop
 800dcc2:	e000      	b.n	800dcc6 <HAL_UART_IRQHandler+0x56e>
    return;
 800dcc4:	bf00      	nop
  }
}
 800dcc6:	3720      	adds	r7, #32
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dcd4:	bf00      	nop
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr

0800dce0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dce8:	bf00      	nop
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dd00:	bf00      	nop
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd10:	b092      	sub	sp, #72	; 0x48
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dd16:	2300      	movs	r3, #0
 800dd18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	689a      	ldr	r2, [r3, #8]
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	691b      	ldr	r3, [r3, #16]
 800dd24:	431a      	orrs	r2, r3
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	695b      	ldr	r3, [r3, #20]
 800dd2a:	431a      	orrs	r2, r3
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	69db      	ldr	r3, [r3, #28]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	4bbe      	ldr	r3, [pc, #760]	; (800e034 <UART_SetConfig+0x328>)
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	697a      	ldr	r2, [r7, #20]
 800dd40:	6812      	ldr	r2, [r2, #0]
 800dd42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd44:	430b      	orrs	r3, r1
 800dd46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	68da      	ldr	r2, [r3, #12]
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	430a      	orrs	r2, r1
 800dd5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	699b      	ldr	r3, [r3, #24]
 800dd62:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4ab3      	ldr	r2, [pc, #716]	; (800e038 <UART_SetConfig+0x32c>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d004      	beq.n	800dd78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	6a1b      	ldr	r3, [r3, #32]
 800dd72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd74:	4313      	orrs	r3, r2
 800dd76:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	689a      	ldr	r2, [r3, #8]
 800dd7e:	4baf      	ldr	r3, [pc, #700]	; (800e03c <UART_SetConfig+0x330>)
 800dd80:	4013      	ands	r3, r2
 800dd82:	697a      	ldr	r2, [r7, #20]
 800dd84:	6812      	ldr	r2, [r2, #0]
 800dd86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd88:	430b      	orrs	r3, r1
 800dd8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd92:	f023 010f 	bic.w	r1, r3, #15
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	430a      	orrs	r2, r1
 800dda0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4aa6      	ldr	r2, [pc, #664]	; (800e040 <UART_SetConfig+0x334>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d177      	bne.n	800de9c <UART_SetConfig+0x190>
 800ddac:	4ba5      	ldr	r3, [pc, #660]	; (800e044 <UART_SetConfig+0x338>)
 800ddae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ddb4:	2b28      	cmp	r3, #40	; 0x28
 800ddb6:	d86d      	bhi.n	800de94 <UART_SetConfig+0x188>
 800ddb8:	a201      	add	r2, pc, #4	; (adr r2, 800ddc0 <UART_SetConfig+0xb4>)
 800ddba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddbe:	bf00      	nop
 800ddc0:	0800de65 	.word	0x0800de65
 800ddc4:	0800de95 	.word	0x0800de95
 800ddc8:	0800de95 	.word	0x0800de95
 800ddcc:	0800de95 	.word	0x0800de95
 800ddd0:	0800de95 	.word	0x0800de95
 800ddd4:	0800de95 	.word	0x0800de95
 800ddd8:	0800de95 	.word	0x0800de95
 800dddc:	0800de95 	.word	0x0800de95
 800dde0:	0800de6d 	.word	0x0800de6d
 800dde4:	0800de95 	.word	0x0800de95
 800dde8:	0800de95 	.word	0x0800de95
 800ddec:	0800de95 	.word	0x0800de95
 800ddf0:	0800de95 	.word	0x0800de95
 800ddf4:	0800de95 	.word	0x0800de95
 800ddf8:	0800de95 	.word	0x0800de95
 800ddfc:	0800de95 	.word	0x0800de95
 800de00:	0800de75 	.word	0x0800de75
 800de04:	0800de95 	.word	0x0800de95
 800de08:	0800de95 	.word	0x0800de95
 800de0c:	0800de95 	.word	0x0800de95
 800de10:	0800de95 	.word	0x0800de95
 800de14:	0800de95 	.word	0x0800de95
 800de18:	0800de95 	.word	0x0800de95
 800de1c:	0800de95 	.word	0x0800de95
 800de20:	0800de7d 	.word	0x0800de7d
 800de24:	0800de95 	.word	0x0800de95
 800de28:	0800de95 	.word	0x0800de95
 800de2c:	0800de95 	.word	0x0800de95
 800de30:	0800de95 	.word	0x0800de95
 800de34:	0800de95 	.word	0x0800de95
 800de38:	0800de95 	.word	0x0800de95
 800de3c:	0800de95 	.word	0x0800de95
 800de40:	0800de85 	.word	0x0800de85
 800de44:	0800de95 	.word	0x0800de95
 800de48:	0800de95 	.word	0x0800de95
 800de4c:	0800de95 	.word	0x0800de95
 800de50:	0800de95 	.word	0x0800de95
 800de54:	0800de95 	.word	0x0800de95
 800de58:	0800de95 	.word	0x0800de95
 800de5c:	0800de95 	.word	0x0800de95
 800de60:	0800de8d 	.word	0x0800de8d
 800de64:	2301      	movs	r3, #1
 800de66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6a:	e222      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800de6c:	2304      	movs	r3, #4
 800de6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de72:	e21e      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800de74:	2308      	movs	r3, #8
 800de76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de7a:	e21a      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800de7c:	2310      	movs	r3, #16
 800de7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de82:	e216      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800de84:	2320      	movs	r3, #32
 800de86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de8a:	e212      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800de8c:	2340      	movs	r3, #64	; 0x40
 800de8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de92:	e20e      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800de94:	2380      	movs	r3, #128	; 0x80
 800de96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de9a:	e20a      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a69      	ldr	r2, [pc, #420]	; (800e048 <UART_SetConfig+0x33c>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d130      	bne.n	800df08 <UART_SetConfig+0x1fc>
 800dea6:	4b67      	ldr	r3, [pc, #412]	; (800e044 <UART_SetConfig+0x338>)
 800dea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deaa:	f003 0307 	and.w	r3, r3, #7
 800deae:	2b05      	cmp	r3, #5
 800deb0:	d826      	bhi.n	800df00 <UART_SetConfig+0x1f4>
 800deb2:	a201      	add	r2, pc, #4	; (adr r2, 800deb8 <UART_SetConfig+0x1ac>)
 800deb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb8:	0800ded1 	.word	0x0800ded1
 800debc:	0800ded9 	.word	0x0800ded9
 800dec0:	0800dee1 	.word	0x0800dee1
 800dec4:	0800dee9 	.word	0x0800dee9
 800dec8:	0800def1 	.word	0x0800def1
 800decc:	0800def9 	.word	0x0800def9
 800ded0:	2300      	movs	r3, #0
 800ded2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded6:	e1ec      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800ded8:	2304      	movs	r3, #4
 800deda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dede:	e1e8      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800dee0:	2308      	movs	r3, #8
 800dee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dee6:	e1e4      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800dee8:	2310      	movs	r3, #16
 800deea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deee:	e1e0      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800def0:	2320      	movs	r3, #32
 800def2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800def6:	e1dc      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800def8:	2340      	movs	r3, #64	; 0x40
 800defa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800defe:	e1d8      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800df00:	2380      	movs	r3, #128	; 0x80
 800df02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df06:	e1d4      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a4f      	ldr	r2, [pc, #316]	; (800e04c <UART_SetConfig+0x340>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d130      	bne.n	800df74 <UART_SetConfig+0x268>
 800df12:	4b4c      	ldr	r3, [pc, #304]	; (800e044 <UART_SetConfig+0x338>)
 800df14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df16:	f003 0307 	and.w	r3, r3, #7
 800df1a:	2b05      	cmp	r3, #5
 800df1c:	d826      	bhi.n	800df6c <UART_SetConfig+0x260>
 800df1e:	a201      	add	r2, pc, #4	; (adr r2, 800df24 <UART_SetConfig+0x218>)
 800df20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df24:	0800df3d 	.word	0x0800df3d
 800df28:	0800df45 	.word	0x0800df45
 800df2c:	0800df4d 	.word	0x0800df4d
 800df30:	0800df55 	.word	0x0800df55
 800df34:	0800df5d 	.word	0x0800df5d
 800df38:	0800df65 	.word	0x0800df65
 800df3c:	2300      	movs	r3, #0
 800df3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df42:	e1b6      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800df44:	2304      	movs	r3, #4
 800df46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df4a:	e1b2      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800df4c:	2308      	movs	r3, #8
 800df4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df52:	e1ae      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800df54:	2310      	movs	r3, #16
 800df56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df5a:	e1aa      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800df5c:	2320      	movs	r3, #32
 800df5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df62:	e1a6      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800df64:	2340      	movs	r3, #64	; 0x40
 800df66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df6a:	e1a2      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800df6c:	2380      	movs	r3, #128	; 0x80
 800df6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df72:	e19e      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a35      	ldr	r2, [pc, #212]	; (800e050 <UART_SetConfig+0x344>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d130      	bne.n	800dfe0 <UART_SetConfig+0x2d4>
 800df7e:	4b31      	ldr	r3, [pc, #196]	; (800e044 <UART_SetConfig+0x338>)
 800df80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df82:	f003 0307 	and.w	r3, r3, #7
 800df86:	2b05      	cmp	r3, #5
 800df88:	d826      	bhi.n	800dfd8 <UART_SetConfig+0x2cc>
 800df8a:	a201      	add	r2, pc, #4	; (adr r2, 800df90 <UART_SetConfig+0x284>)
 800df8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df90:	0800dfa9 	.word	0x0800dfa9
 800df94:	0800dfb1 	.word	0x0800dfb1
 800df98:	0800dfb9 	.word	0x0800dfb9
 800df9c:	0800dfc1 	.word	0x0800dfc1
 800dfa0:	0800dfc9 	.word	0x0800dfc9
 800dfa4:	0800dfd1 	.word	0x0800dfd1
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfae:	e180      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800dfb0:	2304      	movs	r3, #4
 800dfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb6:	e17c      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800dfb8:	2308      	movs	r3, #8
 800dfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfbe:	e178      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800dfc0:	2310      	movs	r3, #16
 800dfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfc6:	e174      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800dfc8:	2320      	movs	r3, #32
 800dfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfce:	e170      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800dfd0:	2340      	movs	r3, #64	; 0x40
 800dfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfd6:	e16c      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800dfd8:	2380      	movs	r3, #128	; 0x80
 800dfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfde:	e168      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a1b      	ldr	r2, [pc, #108]	; (800e054 <UART_SetConfig+0x348>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d142      	bne.n	800e070 <UART_SetConfig+0x364>
 800dfea:	4b16      	ldr	r3, [pc, #88]	; (800e044 <UART_SetConfig+0x338>)
 800dfec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfee:	f003 0307 	and.w	r3, r3, #7
 800dff2:	2b05      	cmp	r3, #5
 800dff4:	d838      	bhi.n	800e068 <UART_SetConfig+0x35c>
 800dff6:	a201      	add	r2, pc, #4	; (adr r2, 800dffc <UART_SetConfig+0x2f0>)
 800dff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dffc:	0800e015 	.word	0x0800e015
 800e000:	0800e01d 	.word	0x0800e01d
 800e004:	0800e025 	.word	0x0800e025
 800e008:	0800e02d 	.word	0x0800e02d
 800e00c:	0800e059 	.word	0x0800e059
 800e010:	0800e061 	.word	0x0800e061
 800e014:	2300      	movs	r3, #0
 800e016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e01a:	e14a      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e01c:	2304      	movs	r3, #4
 800e01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e022:	e146      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e024:	2308      	movs	r3, #8
 800e026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e02a:	e142      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e02c:	2310      	movs	r3, #16
 800e02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e032:	e13e      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e034:	cfff69f3 	.word	0xcfff69f3
 800e038:	58000c00 	.word	0x58000c00
 800e03c:	11fff4ff 	.word	0x11fff4ff
 800e040:	40011000 	.word	0x40011000
 800e044:	58024400 	.word	0x58024400
 800e048:	40004400 	.word	0x40004400
 800e04c:	40004800 	.word	0x40004800
 800e050:	40004c00 	.word	0x40004c00
 800e054:	40005000 	.word	0x40005000
 800e058:	2320      	movs	r3, #32
 800e05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05e:	e128      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e060:	2340      	movs	r3, #64	; 0x40
 800e062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e066:	e124      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e068:	2380      	movs	r3, #128	; 0x80
 800e06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06e:	e120      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4acb      	ldr	r2, [pc, #812]	; (800e3a4 <UART_SetConfig+0x698>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d176      	bne.n	800e168 <UART_SetConfig+0x45c>
 800e07a:	4bcb      	ldr	r3, [pc, #812]	; (800e3a8 <UART_SetConfig+0x69c>)
 800e07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e07e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e082:	2b28      	cmp	r3, #40	; 0x28
 800e084:	d86c      	bhi.n	800e160 <UART_SetConfig+0x454>
 800e086:	a201      	add	r2, pc, #4	; (adr r2, 800e08c <UART_SetConfig+0x380>)
 800e088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e08c:	0800e131 	.word	0x0800e131
 800e090:	0800e161 	.word	0x0800e161
 800e094:	0800e161 	.word	0x0800e161
 800e098:	0800e161 	.word	0x0800e161
 800e09c:	0800e161 	.word	0x0800e161
 800e0a0:	0800e161 	.word	0x0800e161
 800e0a4:	0800e161 	.word	0x0800e161
 800e0a8:	0800e161 	.word	0x0800e161
 800e0ac:	0800e139 	.word	0x0800e139
 800e0b0:	0800e161 	.word	0x0800e161
 800e0b4:	0800e161 	.word	0x0800e161
 800e0b8:	0800e161 	.word	0x0800e161
 800e0bc:	0800e161 	.word	0x0800e161
 800e0c0:	0800e161 	.word	0x0800e161
 800e0c4:	0800e161 	.word	0x0800e161
 800e0c8:	0800e161 	.word	0x0800e161
 800e0cc:	0800e141 	.word	0x0800e141
 800e0d0:	0800e161 	.word	0x0800e161
 800e0d4:	0800e161 	.word	0x0800e161
 800e0d8:	0800e161 	.word	0x0800e161
 800e0dc:	0800e161 	.word	0x0800e161
 800e0e0:	0800e161 	.word	0x0800e161
 800e0e4:	0800e161 	.word	0x0800e161
 800e0e8:	0800e161 	.word	0x0800e161
 800e0ec:	0800e149 	.word	0x0800e149
 800e0f0:	0800e161 	.word	0x0800e161
 800e0f4:	0800e161 	.word	0x0800e161
 800e0f8:	0800e161 	.word	0x0800e161
 800e0fc:	0800e161 	.word	0x0800e161
 800e100:	0800e161 	.word	0x0800e161
 800e104:	0800e161 	.word	0x0800e161
 800e108:	0800e161 	.word	0x0800e161
 800e10c:	0800e151 	.word	0x0800e151
 800e110:	0800e161 	.word	0x0800e161
 800e114:	0800e161 	.word	0x0800e161
 800e118:	0800e161 	.word	0x0800e161
 800e11c:	0800e161 	.word	0x0800e161
 800e120:	0800e161 	.word	0x0800e161
 800e124:	0800e161 	.word	0x0800e161
 800e128:	0800e161 	.word	0x0800e161
 800e12c:	0800e159 	.word	0x0800e159
 800e130:	2301      	movs	r3, #1
 800e132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e136:	e0bc      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e138:	2304      	movs	r3, #4
 800e13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e13e:	e0b8      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e140:	2308      	movs	r3, #8
 800e142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e146:	e0b4      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e148:	2310      	movs	r3, #16
 800e14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e14e:	e0b0      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e150:	2320      	movs	r3, #32
 800e152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e156:	e0ac      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e158:	2340      	movs	r3, #64	; 0x40
 800e15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15e:	e0a8      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e160:	2380      	movs	r3, #128	; 0x80
 800e162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e166:	e0a4      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a8f      	ldr	r2, [pc, #572]	; (800e3ac <UART_SetConfig+0x6a0>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d130      	bne.n	800e1d4 <UART_SetConfig+0x4c8>
 800e172:	4b8d      	ldr	r3, [pc, #564]	; (800e3a8 <UART_SetConfig+0x69c>)
 800e174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e176:	f003 0307 	and.w	r3, r3, #7
 800e17a:	2b05      	cmp	r3, #5
 800e17c:	d826      	bhi.n	800e1cc <UART_SetConfig+0x4c0>
 800e17e:	a201      	add	r2, pc, #4	; (adr r2, 800e184 <UART_SetConfig+0x478>)
 800e180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e184:	0800e19d 	.word	0x0800e19d
 800e188:	0800e1a5 	.word	0x0800e1a5
 800e18c:	0800e1ad 	.word	0x0800e1ad
 800e190:	0800e1b5 	.word	0x0800e1b5
 800e194:	0800e1bd 	.word	0x0800e1bd
 800e198:	0800e1c5 	.word	0x0800e1c5
 800e19c:	2300      	movs	r3, #0
 800e19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a2:	e086      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e1a4:	2304      	movs	r3, #4
 800e1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1aa:	e082      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e1ac:	2308      	movs	r3, #8
 800e1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1b2:	e07e      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e1b4:	2310      	movs	r3, #16
 800e1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ba:	e07a      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e1bc:	2320      	movs	r3, #32
 800e1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1c2:	e076      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e1c4:	2340      	movs	r3, #64	; 0x40
 800e1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ca:	e072      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e1cc:	2380      	movs	r3, #128	; 0x80
 800e1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d2:	e06e      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a75      	ldr	r2, [pc, #468]	; (800e3b0 <UART_SetConfig+0x6a4>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d130      	bne.n	800e240 <UART_SetConfig+0x534>
 800e1de:	4b72      	ldr	r3, [pc, #456]	; (800e3a8 <UART_SetConfig+0x69c>)
 800e1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1e2:	f003 0307 	and.w	r3, r3, #7
 800e1e6:	2b05      	cmp	r3, #5
 800e1e8:	d826      	bhi.n	800e238 <UART_SetConfig+0x52c>
 800e1ea:	a201      	add	r2, pc, #4	; (adr r2, 800e1f0 <UART_SetConfig+0x4e4>)
 800e1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f0:	0800e209 	.word	0x0800e209
 800e1f4:	0800e211 	.word	0x0800e211
 800e1f8:	0800e219 	.word	0x0800e219
 800e1fc:	0800e221 	.word	0x0800e221
 800e200:	0800e229 	.word	0x0800e229
 800e204:	0800e231 	.word	0x0800e231
 800e208:	2300      	movs	r3, #0
 800e20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20e:	e050      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e210:	2304      	movs	r3, #4
 800e212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e216:	e04c      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e218:	2308      	movs	r3, #8
 800e21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e21e:	e048      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e220:	2310      	movs	r3, #16
 800e222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e226:	e044      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e228:	2320      	movs	r3, #32
 800e22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e22e:	e040      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e230:	2340      	movs	r3, #64	; 0x40
 800e232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e236:	e03c      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e238:	2380      	movs	r3, #128	; 0x80
 800e23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23e:	e038      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a5b      	ldr	r2, [pc, #364]	; (800e3b4 <UART_SetConfig+0x6a8>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d130      	bne.n	800e2ac <UART_SetConfig+0x5a0>
 800e24a:	4b57      	ldr	r3, [pc, #348]	; (800e3a8 <UART_SetConfig+0x69c>)
 800e24c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e24e:	f003 0307 	and.w	r3, r3, #7
 800e252:	2b05      	cmp	r3, #5
 800e254:	d826      	bhi.n	800e2a4 <UART_SetConfig+0x598>
 800e256:	a201      	add	r2, pc, #4	; (adr r2, 800e25c <UART_SetConfig+0x550>)
 800e258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25c:	0800e275 	.word	0x0800e275
 800e260:	0800e27d 	.word	0x0800e27d
 800e264:	0800e285 	.word	0x0800e285
 800e268:	0800e28d 	.word	0x0800e28d
 800e26c:	0800e295 	.word	0x0800e295
 800e270:	0800e29d 	.word	0x0800e29d
 800e274:	2302      	movs	r3, #2
 800e276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27a:	e01a      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e27c:	2304      	movs	r3, #4
 800e27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e282:	e016      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e284:	2308      	movs	r3, #8
 800e286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e28a:	e012      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e28c:	2310      	movs	r3, #16
 800e28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e292:	e00e      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e294:	2320      	movs	r3, #32
 800e296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e29a:	e00a      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e29c:	2340      	movs	r3, #64	; 0x40
 800e29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2a2:	e006      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e2a4:	2380      	movs	r3, #128	; 0x80
 800e2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2aa:	e002      	b.n	800e2b2 <UART_SetConfig+0x5a6>
 800e2ac:	2380      	movs	r3, #128	; 0x80
 800e2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4a3f      	ldr	r2, [pc, #252]	; (800e3b4 <UART_SetConfig+0x6a8>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	f040 80f8 	bne.w	800e4ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e2be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e2c2:	2b20      	cmp	r3, #32
 800e2c4:	dc46      	bgt.n	800e354 <UART_SetConfig+0x648>
 800e2c6:	2b02      	cmp	r3, #2
 800e2c8:	f2c0 8082 	blt.w	800e3d0 <UART_SetConfig+0x6c4>
 800e2cc:	3b02      	subs	r3, #2
 800e2ce:	2b1e      	cmp	r3, #30
 800e2d0:	d87e      	bhi.n	800e3d0 <UART_SetConfig+0x6c4>
 800e2d2:	a201      	add	r2, pc, #4	; (adr r2, 800e2d8 <UART_SetConfig+0x5cc>)
 800e2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d8:	0800e35b 	.word	0x0800e35b
 800e2dc:	0800e3d1 	.word	0x0800e3d1
 800e2e0:	0800e363 	.word	0x0800e363
 800e2e4:	0800e3d1 	.word	0x0800e3d1
 800e2e8:	0800e3d1 	.word	0x0800e3d1
 800e2ec:	0800e3d1 	.word	0x0800e3d1
 800e2f0:	0800e373 	.word	0x0800e373
 800e2f4:	0800e3d1 	.word	0x0800e3d1
 800e2f8:	0800e3d1 	.word	0x0800e3d1
 800e2fc:	0800e3d1 	.word	0x0800e3d1
 800e300:	0800e3d1 	.word	0x0800e3d1
 800e304:	0800e3d1 	.word	0x0800e3d1
 800e308:	0800e3d1 	.word	0x0800e3d1
 800e30c:	0800e3d1 	.word	0x0800e3d1
 800e310:	0800e383 	.word	0x0800e383
 800e314:	0800e3d1 	.word	0x0800e3d1
 800e318:	0800e3d1 	.word	0x0800e3d1
 800e31c:	0800e3d1 	.word	0x0800e3d1
 800e320:	0800e3d1 	.word	0x0800e3d1
 800e324:	0800e3d1 	.word	0x0800e3d1
 800e328:	0800e3d1 	.word	0x0800e3d1
 800e32c:	0800e3d1 	.word	0x0800e3d1
 800e330:	0800e3d1 	.word	0x0800e3d1
 800e334:	0800e3d1 	.word	0x0800e3d1
 800e338:	0800e3d1 	.word	0x0800e3d1
 800e33c:	0800e3d1 	.word	0x0800e3d1
 800e340:	0800e3d1 	.word	0x0800e3d1
 800e344:	0800e3d1 	.word	0x0800e3d1
 800e348:	0800e3d1 	.word	0x0800e3d1
 800e34c:	0800e3d1 	.word	0x0800e3d1
 800e350:	0800e3c3 	.word	0x0800e3c3
 800e354:	2b40      	cmp	r3, #64	; 0x40
 800e356:	d037      	beq.n	800e3c8 <UART_SetConfig+0x6bc>
 800e358:	e03a      	b.n	800e3d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e35a:	f7fd fa35 	bl	800b7c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e35e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e360:	e03c      	b.n	800e3dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e366:	4618      	mov	r0, r3
 800e368:	f7fd fa44 	bl	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e370:	e034      	b.n	800e3dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e372:	f107 0318 	add.w	r3, r7, #24
 800e376:	4618      	mov	r0, r3
 800e378:	f7fd fb90 	bl	800ba9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e380:	e02c      	b.n	800e3dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e382:	4b09      	ldr	r3, [pc, #36]	; (800e3a8 <UART_SetConfig+0x69c>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f003 0320 	and.w	r3, r3, #32
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d016      	beq.n	800e3bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e38e:	4b06      	ldr	r3, [pc, #24]	; (800e3a8 <UART_SetConfig+0x69c>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	08db      	lsrs	r3, r3, #3
 800e394:	f003 0303 	and.w	r3, r3, #3
 800e398:	4a07      	ldr	r2, [pc, #28]	; (800e3b8 <UART_SetConfig+0x6ac>)
 800e39a:	fa22 f303 	lsr.w	r3, r2, r3
 800e39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3a0:	e01c      	b.n	800e3dc <UART_SetConfig+0x6d0>
 800e3a2:	bf00      	nop
 800e3a4:	40011400 	.word	0x40011400
 800e3a8:	58024400 	.word	0x58024400
 800e3ac:	40007800 	.word	0x40007800
 800e3b0:	40007c00 	.word	0x40007c00
 800e3b4:	58000c00 	.word	0x58000c00
 800e3b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e3bc:	4b9e      	ldr	r3, [pc, #632]	; (800e638 <UART_SetConfig+0x92c>)
 800e3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3c0:	e00c      	b.n	800e3dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3c2:	4b9e      	ldr	r3, [pc, #632]	; (800e63c <UART_SetConfig+0x930>)
 800e3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3c6:	e009      	b.n	800e3dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3ce:	e005      	b.n	800e3dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e3da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	f000 81e0 	beq.w	800e7a4 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e8:	4a95      	ldr	r2, [pc, #596]	; (800e640 <UART_SetConfig+0x934>)
 800e3ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	685a      	ldr	r2, [r3, #4]
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	005b      	lsls	r3, r3, #1
 800e400:	4413      	add	r3, r2
 800e402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e404:	429a      	cmp	r2, r3
 800e406:	d305      	bcc.n	800e414 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e40e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e410:	429a      	cmp	r2, r3
 800e412:	d903      	bls.n	800e41c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e414:	2301      	movs	r3, #1
 800e416:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e41a:	e1c3      	b.n	800e7a4 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e41e:	2200      	movs	r2, #0
 800e420:	60bb      	str	r3, [r7, #8]
 800e422:	60fa      	str	r2, [r7, #12]
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e428:	4a85      	ldr	r2, [pc, #532]	; (800e640 <UART_SetConfig+0x934>)
 800e42a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	2200      	movs	r2, #0
 800e432:	603b      	str	r3, [r7, #0]
 800e434:	607a      	str	r2, [r7, #4]
 800e436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e43a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e43e:	f7f1 ff4f 	bl	80002e0 <__aeabi_uldivmod>
 800e442:	4602      	mov	r2, r0
 800e444:	460b      	mov	r3, r1
 800e446:	4610      	mov	r0, r2
 800e448:	4619      	mov	r1, r3
 800e44a:	f04f 0200 	mov.w	r2, #0
 800e44e:	f04f 0300 	mov.w	r3, #0
 800e452:	020b      	lsls	r3, r1, #8
 800e454:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e458:	0202      	lsls	r2, r0, #8
 800e45a:	6979      	ldr	r1, [r7, #20]
 800e45c:	6849      	ldr	r1, [r1, #4]
 800e45e:	0849      	lsrs	r1, r1, #1
 800e460:	2000      	movs	r0, #0
 800e462:	460c      	mov	r4, r1
 800e464:	4605      	mov	r5, r0
 800e466:	eb12 0804 	adds.w	r8, r2, r4
 800e46a:	eb43 0905 	adc.w	r9, r3, r5
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	469a      	mov	sl, r3
 800e476:	4693      	mov	fp, r2
 800e478:	4652      	mov	r2, sl
 800e47a:	465b      	mov	r3, fp
 800e47c:	4640      	mov	r0, r8
 800e47e:	4649      	mov	r1, r9
 800e480:	f7f1 ff2e 	bl	80002e0 <__aeabi_uldivmod>
 800e484:	4602      	mov	r2, r0
 800e486:	460b      	mov	r3, r1
 800e488:	4613      	mov	r3, r2
 800e48a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e492:	d308      	bcc.n	800e4a6 <UART_SetConfig+0x79a>
 800e494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e49a:	d204      	bcs.n	800e4a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4a2:	60da      	str	r2, [r3, #12]
 800e4a4:	e17e      	b.n	800e7a4 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e4ac:	e17a      	b.n	800e7a4 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	69db      	ldr	r3, [r3, #28]
 800e4b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4b6:	f040 80c7 	bne.w	800e648 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 800e4ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4be:	2b20      	cmp	r3, #32
 800e4c0:	dc48      	bgt.n	800e554 <UART_SetConfig+0x848>
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	db7b      	blt.n	800e5be <UART_SetConfig+0x8b2>
 800e4c6:	2b20      	cmp	r3, #32
 800e4c8:	d879      	bhi.n	800e5be <UART_SetConfig+0x8b2>
 800e4ca:	a201      	add	r2, pc, #4	; (adr r2, 800e4d0 <UART_SetConfig+0x7c4>)
 800e4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d0:	0800e55b 	.word	0x0800e55b
 800e4d4:	0800e563 	.word	0x0800e563
 800e4d8:	0800e5bf 	.word	0x0800e5bf
 800e4dc:	0800e5bf 	.word	0x0800e5bf
 800e4e0:	0800e56b 	.word	0x0800e56b
 800e4e4:	0800e5bf 	.word	0x0800e5bf
 800e4e8:	0800e5bf 	.word	0x0800e5bf
 800e4ec:	0800e5bf 	.word	0x0800e5bf
 800e4f0:	0800e57b 	.word	0x0800e57b
 800e4f4:	0800e5bf 	.word	0x0800e5bf
 800e4f8:	0800e5bf 	.word	0x0800e5bf
 800e4fc:	0800e5bf 	.word	0x0800e5bf
 800e500:	0800e5bf 	.word	0x0800e5bf
 800e504:	0800e5bf 	.word	0x0800e5bf
 800e508:	0800e5bf 	.word	0x0800e5bf
 800e50c:	0800e5bf 	.word	0x0800e5bf
 800e510:	0800e58b 	.word	0x0800e58b
 800e514:	0800e5bf 	.word	0x0800e5bf
 800e518:	0800e5bf 	.word	0x0800e5bf
 800e51c:	0800e5bf 	.word	0x0800e5bf
 800e520:	0800e5bf 	.word	0x0800e5bf
 800e524:	0800e5bf 	.word	0x0800e5bf
 800e528:	0800e5bf 	.word	0x0800e5bf
 800e52c:	0800e5bf 	.word	0x0800e5bf
 800e530:	0800e5bf 	.word	0x0800e5bf
 800e534:	0800e5bf 	.word	0x0800e5bf
 800e538:	0800e5bf 	.word	0x0800e5bf
 800e53c:	0800e5bf 	.word	0x0800e5bf
 800e540:	0800e5bf 	.word	0x0800e5bf
 800e544:	0800e5bf 	.word	0x0800e5bf
 800e548:	0800e5bf 	.word	0x0800e5bf
 800e54c:	0800e5bf 	.word	0x0800e5bf
 800e550:	0800e5b1 	.word	0x0800e5b1
 800e554:	2b40      	cmp	r3, #64	; 0x40
 800e556:	d02e      	beq.n	800e5b6 <UART_SetConfig+0x8aa>
 800e558:	e031      	b.n	800e5be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e55a:	f7fb fcaf 	bl	8009ebc <HAL_RCC_GetPCLK1Freq>
 800e55e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e560:	e033      	b.n	800e5ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e562:	f7fb fcc1 	bl	8009ee8 <HAL_RCC_GetPCLK2Freq>
 800e566:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e568:	e02f      	b.n	800e5ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e56a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fd f940 	bl	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e578:	e027      	b.n	800e5ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e57a:	f107 0318 	add.w	r3, r7, #24
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fd fa8c 	bl	800ba9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e588:	e01f      	b.n	800e5ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e58a:	4b2e      	ldr	r3, [pc, #184]	; (800e644 <UART_SetConfig+0x938>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 0320 	and.w	r3, r3, #32
 800e592:	2b00      	cmp	r3, #0
 800e594:	d009      	beq.n	800e5aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e596:	4b2b      	ldr	r3, [pc, #172]	; (800e644 <UART_SetConfig+0x938>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	08db      	lsrs	r3, r3, #3
 800e59c:	f003 0303 	and.w	r3, r3, #3
 800e5a0:	4a25      	ldr	r2, [pc, #148]	; (800e638 <UART_SetConfig+0x92c>)
 800e5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800e5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5a8:	e00f      	b.n	800e5ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e5aa:	4b23      	ldr	r3, [pc, #140]	; (800e638 <UART_SetConfig+0x92c>)
 800e5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5ae:	e00c      	b.n	800e5ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e5b0:	4b22      	ldr	r3, [pc, #136]	; (800e63c <UART_SetConfig+0x930>)
 800e5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5b4:	e009      	b.n	800e5ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5bc:	e005      	b.n	800e5ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e5ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	f000 80e9 	beq.w	800e7a4 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d6:	4a1a      	ldr	r2, [pc, #104]	; (800e640 <UART_SetConfig+0x934>)
 800e5d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5dc:	461a      	mov	r2, r3
 800e5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5e4:	005a      	lsls	r2, r3, #1
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	085b      	lsrs	r3, r3, #1
 800e5ec:	441a      	add	r2, r3
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fc:	2b0f      	cmp	r3, #15
 800e5fe:	d916      	bls.n	800e62e <UART_SetConfig+0x922>
 800e600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e606:	d212      	bcs.n	800e62e <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	f023 030f 	bic.w	r3, r3, #15
 800e610:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e614:	085b      	lsrs	r3, r3, #1
 800e616:	b29b      	uxth	r3, r3
 800e618:	f003 0307 	and.w	r3, r3, #7
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e620:	4313      	orrs	r3, r2
 800e622:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e62a:	60da      	str	r2, [r3, #12]
 800e62c:	e0ba      	b.n	800e7a4 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800e62e:	2301      	movs	r3, #1
 800e630:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e634:	e0b6      	b.n	800e7a4 <UART_SetConfig+0xa98>
 800e636:	bf00      	nop
 800e638:	03d09000 	.word	0x03d09000
 800e63c:	003d0900 	.word	0x003d0900
 800e640:	08011a3c 	.word	0x08011a3c
 800e644:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e648:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e64c:	2b20      	cmp	r3, #32
 800e64e:	dc49      	bgt.n	800e6e4 <UART_SetConfig+0x9d8>
 800e650:	2b00      	cmp	r3, #0
 800e652:	db7c      	blt.n	800e74e <UART_SetConfig+0xa42>
 800e654:	2b20      	cmp	r3, #32
 800e656:	d87a      	bhi.n	800e74e <UART_SetConfig+0xa42>
 800e658:	a201      	add	r2, pc, #4	; (adr r2, 800e660 <UART_SetConfig+0x954>)
 800e65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e65e:	bf00      	nop
 800e660:	0800e6eb 	.word	0x0800e6eb
 800e664:	0800e6f3 	.word	0x0800e6f3
 800e668:	0800e74f 	.word	0x0800e74f
 800e66c:	0800e74f 	.word	0x0800e74f
 800e670:	0800e6fb 	.word	0x0800e6fb
 800e674:	0800e74f 	.word	0x0800e74f
 800e678:	0800e74f 	.word	0x0800e74f
 800e67c:	0800e74f 	.word	0x0800e74f
 800e680:	0800e70b 	.word	0x0800e70b
 800e684:	0800e74f 	.word	0x0800e74f
 800e688:	0800e74f 	.word	0x0800e74f
 800e68c:	0800e74f 	.word	0x0800e74f
 800e690:	0800e74f 	.word	0x0800e74f
 800e694:	0800e74f 	.word	0x0800e74f
 800e698:	0800e74f 	.word	0x0800e74f
 800e69c:	0800e74f 	.word	0x0800e74f
 800e6a0:	0800e71b 	.word	0x0800e71b
 800e6a4:	0800e74f 	.word	0x0800e74f
 800e6a8:	0800e74f 	.word	0x0800e74f
 800e6ac:	0800e74f 	.word	0x0800e74f
 800e6b0:	0800e74f 	.word	0x0800e74f
 800e6b4:	0800e74f 	.word	0x0800e74f
 800e6b8:	0800e74f 	.word	0x0800e74f
 800e6bc:	0800e74f 	.word	0x0800e74f
 800e6c0:	0800e74f 	.word	0x0800e74f
 800e6c4:	0800e74f 	.word	0x0800e74f
 800e6c8:	0800e74f 	.word	0x0800e74f
 800e6cc:	0800e74f 	.word	0x0800e74f
 800e6d0:	0800e74f 	.word	0x0800e74f
 800e6d4:	0800e74f 	.word	0x0800e74f
 800e6d8:	0800e74f 	.word	0x0800e74f
 800e6dc:	0800e74f 	.word	0x0800e74f
 800e6e0:	0800e741 	.word	0x0800e741
 800e6e4:	2b40      	cmp	r3, #64	; 0x40
 800e6e6:	d02e      	beq.n	800e746 <UART_SetConfig+0xa3a>
 800e6e8:	e031      	b.n	800e74e <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6ea:	f7fb fbe7 	bl	8009ebc <HAL_RCC_GetPCLK1Freq>
 800e6ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6f0:	e033      	b.n	800e75a <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6f2:	f7fb fbf9 	bl	8009ee8 <HAL_RCC_GetPCLK2Freq>
 800e6f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6f8:	e02f      	b.n	800e75a <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7fd f878 	bl	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e708:	e027      	b.n	800e75a <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e70a:	f107 0318 	add.w	r3, r7, #24
 800e70e:	4618      	mov	r0, r3
 800e710:	f7fd f9c4 	bl	800ba9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e718:	e01f      	b.n	800e75a <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e71a:	4b2d      	ldr	r3, [pc, #180]	; (800e7d0 <UART_SetConfig+0xac4>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f003 0320 	and.w	r3, r3, #32
 800e722:	2b00      	cmp	r3, #0
 800e724:	d009      	beq.n	800e73a <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e726:	4b2a      	ldr	r3, [pc, #168]	; (800e7d0 <UART_SetConfig+0xac4>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	08db      	lsrs	r3, r3, #3
 800e72c:	f003 0303 	and.w	r3, r3, #3
 800e730:	4a28      	ldr	r2, [pc, #160]	; (800e7d4 <UART_SetConfig+0xac8>)
 800e732:	fa22 f303 	lsr.w	r3, r2, r3
 800e736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e738:	e00f      	b.n	800e75a <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800e73a:	4b26      	ldr	r3, [pc, #152]	; (800e7d4 <UART_SetConfig+0xac8>)
 800e73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e73e:	e00c      	b.n	800e75a <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e740:	4b25      	ldr	r3, [pc, #148]	; (800e7d8 <UART_SetConfig+0xacc>)
 800e742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e744:	e009      	b.n	800e75a <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e74c:	e005      	b.n	800e75a <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800e74e:	2300      	movs	r3, #0
 800e750:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e752:	2301      	movs	r3, #1
 800e754:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e758:	bf00      	nop
    }

    if (pclk != 0U)
 800e75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d021      	beq.n	800e7a4 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e764:	4a1d      	ldr	r2, [pc, #116]	; (800e7dc <UART_SetConfig+0xad0>)
 800e766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e76a:	461a      	mov	r2, r3
 800e76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e76e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	085b      	lsrs	r3, r3, #1
 800e778:	441a      	add	r2, r3
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e782:	b29b      	uxth	r3, r3
 800e784:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e788:	2b0f      	cmp	r3, #15
 800e78a:	d908      	bls.n	800e79e <UART_SetConfig+0xa92>
 800e78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e792:	d204      	bcs.n	800e79e <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e79a:	60da      	str	r2, [r3, #12]
 800e79c:	e002      	b.n	800e7a4 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e7c0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3748      	adds	r7, #72	; 0x48
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e7ce:	bf00      	nop
 800e7d0:	58024400 	.word	0x58024400
 800e7d4:	03d09000 	.word	0x03d09000
 800e7d8:	003d0900 	.word	0x003d0900
 800e7dc:	08011a3c 	.word	0x08011a3c

0800e7e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ec:	f003 0301 	and.w	r3, r3, #1
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d00a      	beq.n	800e80a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	430a      	orrs	r2, r1
 800e808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e80e:	f003 0302 	and.w	r3, r3, #2
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00a      	beq.n	800e82c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	430a      	orrs	r2, r1
 800e82a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e830:	f003 0304 	and.w	r3, r3, #4
 800e834:	2b00      	cmp	r3, #0
 800e836:	d00a      	beq.n	800e84e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	430a      	orrs	r2, r1
 800e84c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e852:	f003 0308 	and.w	r3, r3, #8
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00a      	beq.n	800e870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	430a      	orrs	r2, r1
 800e86e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e874:	f003 0310 	and.w	r3, r3, #16
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d00a      	beq.n	800e892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	430a      	orrs	r2, r1
 800e890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e896:	f003 0320 	and.w	r3, r3, #32
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d00a      	beq.n	800e8b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	430a      	orrs	r2, r1
 800e8b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d01a      	beq.n	800e8f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	430a      	orrs	r2, r1
 800e8d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8de:	d10a      	bne.n	800e8f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	430a      	orrs	r2, r1
 800e8f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d00a      	beq.n	800e918 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	430a      	orrs	r2, r1
 800e916:	605a      	str	r2, [r3, #4]
  }
}
 800e918:	bf00      	nop
 800e91a:	370c      	adds	r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af02      	add	r7, sp, #8
 800e92a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e934:	f7f4 faa2 	bl	8002e7c <HAL_GetTick>
 800e938:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f003 0308 	and.w	r3, r3, #8
 800e944:	2b08      	cmp	r3, #8
 800e946:	d10e      	bne.n	800e966 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e94c:	9300      	str	r3, [sp, #0]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f82f 	bl	800e9ba <UART_WaitOnFlagUntilTimeout>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e962:	2303      	movs	r3, #3
 800e964:	e025      	b.n	800e9b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f003 0304 	and.w	r3, r3, #4
 800e970:	2b04      	cmp	r3, #4
 800e972:	d10e      	bne.n	800e992 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2200      	movs	r2, #0
 800e97e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 f819 	bl	800e9ba <UART_WaitOnFlagUntilTimeout>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d001      	beq.n	800e992 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e98e:	2303      	movs	r3, #3
 800e990:	e00f      	b.n	800e9b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2220      	movs	r2, #32
 800e996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2220      	movs	r2, #32
 800e99e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e9b0:	2300      	movs	r3, #0
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b084      	sub	sp, #16
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	60f8      	str	r0, [r7, #12]
 800e9c2:	60b9      	str	r1, [r7, #8]
 800e9c4:	603b      	str	r3, [r7, #0]
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9ca:	e062      	b.n	800ea92 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d2:	d05e      	beq.n	800ea92 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9d4:	f7f4 fa52 	bl	8002e7c <HAL_GetTick>
 800e9d8:	4602      	mov	r2, r0
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	1ad3      	subs	r3, r2, r3
 800e9de:	69ba      	ldr	r2, [r7, #24]
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d302      	bcc.n	800e9ea <UART_WaitOnFlagUntilTimeout+0x30>
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d11d      	bne.n	800ea26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e9f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	689a      	ldr	r2, [r3, #8]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f022 0201 	bic.w	r2, r2, #1
 800ea08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2220      	movs	r2, #32
 800ea0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2220      	movs	r2, #32
 800ea16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ea22:	2303      	movs	r3, #3
 800ea24:	e045      	b.n	800eab2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f003 0304 	and.w	r3, r3, #4
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d02e      	beq.n	800ea92 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	69db      	ldr	r3, [r3, #28]
 800ea3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea42:	d126      	bne.n	800ea92 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ea5c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	689a      	ldr	r2, [r3, #8]
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f022 0201 	bic.w	r2, r2, #1
 800ea6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2220      	movs	r2, #32
 800ea72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2220      	movs	r2, #32
 800ea7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2220      	movs	r2, #32
 800ea82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ea8e:	2303      	movs	r3, #3
 800ea90:	e00f      	b.n	800eab2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	69da      	ldr	r2, [r3, #28]
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	4013      	ands	r3, r2
 800ea9c:	68ba      	ldr	r2, [r7, #8]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	bf0c      	ite	eq
 800eaa2:	2301      	moveq	r3, #1
 800eaa4:	2300      	movne	r3, #0
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	79fb      	ldrb	r3, [r7, #7]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d08d      	beq.n	800e9cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
	...

0800eabc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b083      	sub	sp, #12
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ead2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	6899      	ldr	r1, [r3, #8]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	4b0f      	ldr	r3, [pc, #60]	; (800eb1c <UART_EndRxTransfer+0x60>)
 800eae0:	400b      	ands	r3, r1
 800eae2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d107      	bne.n	800eafc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f022 0210 	bic.w	r2, r2, #16
 800eafa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2220      	movs	r2, #32
 800eb00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800eb10:	bf00      	nop
 800eb12:	370c      	adds	r7, #12
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr
 800eb1c:	effffffe 	.word	0xeffffffe

0800eb20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2200      	movs	r2, #0
 800eb32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f7ff f8ce 	bl	800dce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb44:	bf00      	nop
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb62:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2220      	movs	r2, #32
 800eb68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7ff f8aa 	bl	800dccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb78:	bf00      	nop
 800eb7a:	3708      	adds	r7, #8
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b083      	sub	sp, #12
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eb88:	bf00      	nop
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eb9c:	bf00      	nop
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d101      	bne.n	800ebd2 <HAL_UARTEx_EnableFifoMode+0x16>
 800ebce:	2302      	movs	r3, #2
 800ebd0:	e02b      	b.n	800ec2a <HAL_UARTEx_EnableFifoMode+0x6e>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2224      	movs	r2, #36	; 0x24
 800ebde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	681a      	ldr	r2, [r3, #0]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f022 0201 	bic.w	r2, r2, #1
 800ebf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ec08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	68fa      	ldr	r2, [r7, #12]
 800ec10:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 f8c2 	bl	800ed9c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2220      	movs	r2, #32
 800ec1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2200      	movs	r2, #0
 800ec24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3710      	adds	r7, #16
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec32:	b480      	push	{r7}
 800ec34:	b085      	sub	sp, #20
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d101      	bne.n	800ec48 <HAL_UARTEx_DisableFifoMode+0x16>
 800ec44:	2302      	movs	r3, #2
 800ec46:	e027      	b.n	800ec98 <HAL_UARTEx_DisableFifoMode+0x66>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2224      	movs	r2, #36	; 0x24
 800ec54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f022 0201 	bic.w	r2, r2, #1
 800ec6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ec76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	68fa      	ldr	r2, [r7, #12]
 800ec84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2220      	movs	r2, #32
 800ec8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2200      	movs	r2, #0
 800ec92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec96:	2300      	movs	r3, #0
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3714      	adds	r7, #20
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d101      	bne.n	800ecbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ecb8:	2302      	movs	r3, #2
 800ecba:	e02d      	b.n	800ed18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2224      	movs	r2, #36	; 0x24
 800ecc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f022 0201 	bic.w	r2, r2, #1
 800ece2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	689b      	ldr	r3, [r3, #8]
 800ecea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	683a      	ldr	r2, [r7, #0]
 800ecf4:	430a      	orrs	r2, r1
 800ecf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 f84f 	bl	800ed9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	68fa      	ldr	r2, [r7, #12]
 800ed04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2220      	movs	r2, #32
 800ed0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d101      	bne.n	800ed38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed34:	2302      	movs	r3, #2
 800ed36:	e02d      	b.n	800ed94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2224      	movs	r2, #36	; 0x24
 800ed44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f022 0201 	bic.w	r2, r2, #1
 800ed5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	683a      	ldr	r2, [r7, #0]
 800ed70:	430a      	orrs	r2, r1
 800ed72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f000 f811 	bl	800ed9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2220      	movs	r2, #32
 800ed86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b085      	sub	sp, #20
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d108      	bne.n	800edbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2201      	movs	r2, #1
 800edb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800edbc:	e031      	b.n	800ee22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800edbe:	2310      	movs	r3, #16
 800edc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800edc2:	2310      	movs	r3, #16
 800edc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	0e5b      	lsrs	r3, r3, #25
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	f003 0307 	and.w	r3, r3, #7
 800edd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	0f5b      	lsrs	r3, r3, #29
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	f003 0307 	and.w	r3, r3, #7
 800ede4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ede6:	7bbb      	ldrb	r3, [r7, #14]
 800ede8:	7b3a      	ldrb	r2, [r7, #12]
 800edea:	4911      	ldr	r1, [pc, #68]	; (800ee30 <UARTEx_SetNbDataToProcess+0x94>)
 800edec:	5c8a      	ldrb	r2, [r1, r2]
 800edee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800edf2:	7b3a      	ldrb	r2, [r7, #12]
 800edf4:	490f      	ldr	r1, [pc, #60]	; (800ee34 <UARTEx_SetNbDataToProcess+0x98>)
 800edf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800edfc:	b29a      	uxth	r2, r3
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee04:	7bfb      	ldrb	r3, [r7, #15]
 800ee06:	7b7a      	ldrb	r2, [r7, #13]
 800ee08:	4909      	ldr	r1, [pc, #36]	; (800ee30 <UARTEx_SetNbDataToProcess+0x94>)
 800ee0a:	5c8a      	ldrb	r2, [r1, r2]
 800ee0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ee10:	7b7a      	ldrb	r2, [r7, #13]
 800ee12:	4908      	ldr	r1, [pc, #32]	; (800ee34 <UARTEx_SetNbDataToProcess+0x98>)
 800ee14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee16:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee1a:	b29a      	uxth	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ee22:	bf00      	nop
 800ee24:	3714      	adds	r7, #20
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop
 800ee30:	08011a54 	.word	0x08011a54
 800ee34:	08011a5c 	.word	0x08011a5c

0800ee38 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d101      	bne.n	800ee4a <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800ee46:	2301      	movs	r3, #1
 800ee48:	e016      	b.n	800ee78 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7f3 ff78 	bl	8002d40 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	68da      	ldr	r2, [r3, #12]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ee5c:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	691a      	ldr	r2, [r3, #16]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	ea42 0103 	orr.w	r1, r2, r3
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	689a      	ldr	r2, [r3, #8]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	430a      	orrs	r2, r1
 800ee74:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800ee76:	2300      	movs	r3, #0
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3708      	adds	r7, #8
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <__NVIC_SetPriority>:
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	4603      	mov	r3, r0
 800ee88:	6039      	str	r1, [r7, #0]
 800ee8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ee8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	db0a      	blt.n	800eeaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	490c      	ldr	r1, [pc, #48]	; (800eecc <__NVIC_SetPriority+0x4c>)
 800ee9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee9e:	0112      	lsls	r2, r2, #4
 800eea0:	b2d2      	uxtb	r2, r2
 800eea2:	440b      	add	r3, r1
 800eea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800eea8:	e00a      	b.n	800eec0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	4908      	ldr	r1, [pc, #32]	; (800eed0 <__NVIC_SetPriority+0x50>)
 800eeb0:	88fb      	ldrh	r3, [r7, #6]
 800eeb2:	f003 030f 	and.w	r3, r3, #15
 800eeb6:	3b04      	subs	r3, #4
 800eeb8:	0112      	lsls	r2, r2, #4
 800eeba:	b2d2      	uxtb	r2, r2
 800eebc:	440b      	add	r3, r1
 800eebe:	761a      	strb	r2, [r3, #24]
}
 800eec0:	bf00      	nop
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr
 800eecc:	e000e100 	.word	0xe000e100
 800eed0:	e000ed00 	.word	0xe000ed00

0800eed4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800eed4:	b580      	push	{r7, lr}
 800eed6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800eed8:	4b05      	ldr	r3, [pc, #20]	; (800eef0 <SysTick_Handler+0x1c>)
 800eeda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800eedc:	f001 fd5e 	bl	801099c <xTaskGetSchedulerState>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	d001      	beq.n	800eeea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800eee6:	f002 fb47 	bl	8011578 <xPortSysTickHandler>
  }
}
 800eeea:	bf00      	nop
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	e000e010 	.word	0xe000e010

0800eef4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800eef4:	b580      	push	{r7, lr}
 800eef6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800eef8:	2100      	movs	r1, #0
 800eefa:	f06f 0004 	mvn.w	r0, #4
 800eefe:	f7ff ffbf 	bl	800ee80 <__NVIC_SetPriority>
#endif
}
 800ef02:	bf00      	nop
 800ef04:	bd80      	pop	{r7, pc}
	...

0800ef08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef0e:	f3ef 8305 	mrs	r3, IPSR
 800ef12:	603b      	str	r3, [r7, #0]
  return(result);
 800ef14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d003      	beq.n	800ef22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ef1a:	f06f 0305 	mvn.w	r3, #5
 800ef1e:	607b      	str	r3, [r7, #4]
 800ef20:	e00c      	b.n	800ef3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ef22:	4b0a      	ldr	r3, [pc, #40]	; (800ef4c <osKernelInitialize+0x44>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d105      	bne.n	800ef36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ef2a:	4b08      	ldr	r3, [pc, #32]	; (800ef4c <osKernelInitialize+0x44>)
 800ef2c:	2201      	movs	r2, #1
 800ef2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ef30:	2300      	movs	r3, #0
 800ef32:	607b      	str	r3, [r7, #4]
 800ef34:	e002      	b.n	800ef3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ef36:	f04f 33ff 	mov.w	r3, #4294967295
 800ef3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ef3c:	687b      	ldr	r3, [r7, #4]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	370c      	adds	r7, #12
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	24000bc0 	.word	0x24000bc0

0800ef50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef56:	f3ef 8305 	mrs	r3, IPSR
 800ef5a:	603b      	str	r3, [r7, #0]
  return(result);
 800ef5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d003      	beq.n	800ef6a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ef62:	f06f 0305 	mvn.w	r3, #5
 800ef66:	607b      	str	r3, [r7, #4]
 800ef68:	e010      	b.n	800ef8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ef6a:	4b0b      	ldr	r3, [pc, #44]	; (800ef98 <osKernelStart+0x48>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d109      	bne.n	800ef86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ef72:	f7ff ffbf 	bl	800eef4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ef76:	4b08      	ldr	r3, [pc, #32]	; (800ef98 <osKernelStart+0x48>)
 800ef78:	2202      	movs	r2, #2
 800ef7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ef7c:	f001 f882 	bl	8010084 <vTaskStartScheduler>
      stat = osOK;
 800ef80:	2300      	movs	r3, #0
 800ef82:	607b      	str	r3, [r7, #4]
 800ef84:	e002      	b.n	800ef8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ef86:	f04f 33ff 	mov.w	r3, #4294967295
 800ef8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ef8c:	687b      	ldr	r3, [r7, #4]
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3708      	adds	r7, #8
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	24000bc0 	.word	0x24000bc0

0800ef9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b08e      	sub	sp, #56	; 0x38
 800efa0:	af04      	add	r7, sp, #16
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800efa8:	2300      	movs	r3, #0
 800efaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efac:	f3ef 8305 	mrs	r3, IPSR
 800efb0:	617b      	str	r3, [r7, #20]
  return(result);
 800efb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d17e      	bne.n	800f0b6 <osThreadNew+0x11a>
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d07b      	beq.n	800f0b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800efbe:	2380      	movs	r3, #128	; 0x80
 800efc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800efc2:	2318      	movs	r3, #24
 800efc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800efc6:	2300      	movs	r3, #0
 800efc8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800efca:	f04f 33ff 	mov.w	r3, #4294967295
 800efce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d045      	beq.n	800f062 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d002      	beq.n	800efe4 <osThreadNew+0x48>
        name = attr->name;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	699b      	ldr	r3, [r3, #24]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d002      	beq.n	800eff2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	699b      	ldr	r3, [r3, #24]
 800eff0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d008      	beq.n	800f00a <osThreadNew+0x6e>
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	2b38      	cmp	r3, #56	; 0x38
 800effc:	d805      	bhi.n	800f00a <osThreadNew+0x6e>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	f003 0301 	and.w	r3, r3, #1
 800f006:	2b00      	cmp	r3, #0
 800f008:	d001      	beq.n	800f00e <osThreadNew+0x72>
        return (NULL);
 800f00a:	2300      	movs	r3, #0
 800f00c:	e054      	b.n	800f0b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	695b      	ldr	r3, [r3, #20]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d003      	beq.n	800f01e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	695b      	ldr	r3, [r3, #20]
 800f01a:	089b      	lsrs	r3, r3, #2
 800f01c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00e      	beq.n	800f044 <osThreadNew+0xa8>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	2bc3      	cmp	r3, #195	; 0xc3
 800f02c:	d90a      	bls.n	800f044 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f032:	2b00      	cmp	r3, #0
 800f034:	d006      	beq.n	800f044 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	695b      	ldr	r3, [r3, #20]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d002      	beq.n	800f044 <osThreadNew+0xa8>
        mem = 1;
 800f03e:	2301      	movs	r3, #1
 800f040:	61bb      	str	r3, [r7, #24]
 800f042:	e010      	b.n	800f066 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	689b      	ldr	r3, [r3, #8]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d10c      	bne.n	800f066 <osThreadNew+0xca>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d108      	bne.n	800f066 <osThreadNew+0xca>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	691b      	ldr	r3, [r3, #16]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d104      	bne.n	800f066 <osThreadNew+0xca>
          mem = 0;
 800f05c:	2300      	movs	r3, #0
 800f05e:	61bb      	str	r3, [r7, #24]
 800f060:	e001      	b.n	800f066 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f062:	2300      	movs	r3, #0
 800f064:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d110      	bne.n	800f08e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f074:	9202      	str	r2, [sp, #8]
 800f076:	9301      	str	r3, [sp, #4]
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	6a3a      	ldr	r2, [r7, #32]
 800f080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f082:	68f8      	ldr	r0, [r7, #12]
 800f084:	f000 fe0c 	bl	800fca0 <xTaskCreateStatic>
 800f088:	4603      	mov	r3, r0
 800f08a:	613b      	str	r3, [r7, #16]
 800f08c:	e013      	b.n	800f0b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d110      	bne.n	800f0b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f094:	6a3b      	ldr	r3, [r7, #32]
 800f096:	b29a      	uxth	r2, r3
 800f098:	f107 0310 	add.w	r3, r7, #16
 800f09c:	9301      	str	r3, [sp, #4]
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	9300      	str	r3, [sp, #0]
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0a6:	68f8      	ldr	r0, [r7, #12]
 800f0a8:	f000 fe57 	bl	800fd5a <xTaskCreate>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d001      	beq.n	800f0b6 <osThreadNew+0x11a>
            hTask = NULL;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f0b6:	693b      	ldr	r3, [r7, #16]
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3728      	adds	r7, #40	; 0x28
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0c8:	f3ef 8305 	mrs	r3, IPSR
 800f0cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800f0ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d003      	beq.n	800f0dc <osDelay+0x1c>
    stat = osErrorISR;
 800f0d4:	f06f 0305 	mvn.w	r3, #5
 800f0d8:	60fb      	str	r3, [r7, #12]
 800f0da:	e007      	b.n	800f0ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d002      	beq.n	800f0ec <osDelay+0x2c>
      vTaskDelay(ticks);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 ff98 	bl	801001c <vTaskDelay>
    }
  }

  return (stat);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3710      	adds	r7, #16
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
	...

0800f0f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f0f8:	b480      	push	{r7}
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	4a07      	ldr	r2, [pc, #28]	; (800f124 <vApplicationGetIdleTaskMemory+0x2c>)
 800f108:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	4a06      	ldr	r2, [pc, #24]	; (800f128 <vApplicationGetIdleTaskMemory+0x30>)
 800f10e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2280      	movs	r2, #128	; 0x80
 800f114:	601a      	str	r2, [r3, #0]
}
 800f116:	bf00      	nop
 800f118:	3714      	adds	r7, #20
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	24000bc4 	.word	0x24000bc4
 800f128:	24000c88 	.word	0x24000c88

0800f12c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f12c:	b480      	push	{r7}
 800f12e:	b085      	sub	sp, #20
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	4a07      	ldr	r2, [pc, #28]	; (800f158 <vApplicationGetTimerTaskMemory+0x2c>)
 800f13c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	4a06      	ldr	r2, [pc, #24]	; (800f15c <vApplicationGetTimerTaskMemory+0x30>)
 800f142:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f14a:	601a      	str	r2, [r3, #0]
}
 800f14c:	bf00      	nop
 800f14e:	3714      	adds	r7, #20
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr
 800f158:	24000e88 	.word	0x24000e88
 800f15c:	24000f4c 	.word	0x24000f4c

0800f160 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f103 0208 	add.w	r2, r3, #8
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f04f 32ff 	mov.w	r2, #4294967295
 800f178:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f103 0208 	add.w	r2, r3, #8
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f103 0208 	add.w	r2, r3, #8
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2200      	movs	r2, #0
 800f192:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f194:	bf00      	nop
 800f196:	370c      	adds	r7, #12
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr

0800f1a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b083      	sub	sp, #12
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f1ae:	bf00      	nop
 800f1b0:	370c      	adds	r7, #12
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr

0800f1ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f1ba:	b480      	push	{r7}
 800f1bc:	b085      	sub	sp, #20
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
 800f1c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	689a      	ldr	r2, [r3, #8]
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	683a      	ldr	r2, [r7, #0]
 800f1de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	683a      	ldr	r2, [r7, #0]
 800f1e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	687a      	ldr	r2, [r7, #4]
 800f1ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	1c5a      	adds	r2, r3, #1
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	601a      	str	r2, [r3, #0]
}
 800f1f6:	bf00      	nop
 800f1f8:	3714      	adds	r7, #20
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr

0800f202 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f202:	b480      	push	{r7}
 800f204:	b085      	sub	sp, #20
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
 800f20a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f218:	d103      	bne.n	800f222 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	691b      	ldr	r3, [r3, #16]
 800f21e:	60fb      	str	r3, [r7, #12]
 800f220:	e00c      	b.n	800f23c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	3308      	adds	r3, #8
 800f226:	60fb      	str	r3, [r7, #12]
 800f228:	e002      	b.n	800f230 <vListInsert+0x2e>
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	60fb      	str	r3, [r7, #12]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	68ba      	ldr	r2, [r7, #8]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d2f6      	bcs.n	800f22a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	685a      	ldr	r2, [r3, #4]
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	683a      	ldr	r2, [r7, #0]
 800f24a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	683a      	ldr	r2, [r7, #0]
 800f256:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	1c5a      	adds	r2, r3, #1
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	601a      	str	r2, [r3, #0]
}
 800f268:	bf00      	nop
 800f26a:	3714      	adds	r7, #20
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	691b      	ldr	r3, [r3, #16]
 800f280:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	6892      	ldr	r2, [r2, #8]
 800f28a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	687a      	ldr	r2, [r7, #4]
 800f292:	6852      	ldr	r2, [r2, #4]
 800f294:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d103      	bne.n	800f2a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	689a      	ldr	r2, [r3, #8]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	1e5a      	subs	r2, r3, #1
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3714      	adds	r7, #20
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d10a      	bne.n	800f2f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e0:	f383 8811 	msr	BASEPRI, r3
 800f2e4:	f3bf 8f6f 	isb	sy
 800f2e8:	f3bf 8f4f 	dsb	sy
 800f2ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f2ee:	bf00      	nop
 800f2f0:	e7fe      	b.n	800f2f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f2f2:	f002 f8af 	bl	8011454 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2fe:	68f9      	ldr	r1, [r7, #12]
 800f300:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f302:	fb01 f303 	mul.w	r3, r1, r3
 800f306:	441a      	add	r2, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2200      	movs	r2, #0
 800f310:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f322:	3b01      	subs	r3, #1
 800f324:	68f9      	ldr	r1, [r7, #12]
 800f326:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f328:	fb01 f303 	mul.w	r3, r1, r3
 800f32c:	441a      	add	r2, r3
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	22ff      	movs	r2, #255	; 0xff
 800f336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	22ff      	movs	r2, #255	; 0xff
 800f33e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d114      	bne.n	800f372 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d01a      	beq.n	800f386 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	3310      	adds	r3, #16
 800f354:	4618      	mov	r0, r3
 800f356:	f001 f95d 	bl	8010614 <xTaskRemoveFromEventList>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d012      	beq.n	800f386 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f360:	4b0c      	ldr	r3, [pc, #48]	; (800f394 <xQueueGenericReset+0xcc>)
 800f362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f366:	601a      	str	r2, [r3, #0]
 800f368:	f3bf 8f4f 	dsb	sy
 800f36c:	f3bf 8f6f 	isb	sy
 800f370:	e009      	b.n	800f386 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	3310      	adds	r3, #16
 800f376:	4618      	mov	r0, r3
 800f378:	f7ff fef2 	bl	800f160 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	3324      	adds	r3, #36	; 0x24
 800f380:	4618      	mov	r0, r3
 800f382:	f7ff feed 	bl	800f160 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f386:	f002 f895 	bl	80114b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f38a:	2301      	movs	r3, #1
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3710      	adds	r7, #16
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	e000ed04 	.word	0xe000ed04

0800f398 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b08e      	sub	sp, #56	; 0x38
 800f39c:	af02      	add	r7, sp, #8
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	607a      	str	r2, [r7, #4]
 800f3a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d10a      	bne.n	800f3c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b0:	f383 8811 	msr	BASEPRI, r3
 800f3b4:	f3bf 8f6f 	isb	sy
 800f3b8:	f3bf 8f4f 	dsb	sy
 800f3bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f3be:	bf00      	nop
 800f3c0:	e7fe      	b.n	800f3c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d10a      	bne.n	800f3de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3cc:	f383 8811 	msr	BASEPRI, r3
 800f3d0:	f3bf 8f6f 	isb	sy
 800f3d4:	f3bf 8f4f 	dsb	sy
 800f3d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f3da:	bf00      	nop
 800f3dc:	e7fe      	b.n	800f3dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d002      	beq.n	800f3ea <xQueueGenericCreateStatic+0x52>
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d001      	beq.n	800f3ee <xQueueGenericCreateStatic+0x56>
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	e000      	b.n	800f3f0 <xQueueGenericCreateStatic+0x58>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d10a      	bne.n	800f40a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f8:	f383 8811 	msr	BASEPRI, r3
 800f3fc:	f3bf 8f6f 	isb	sy
 800f400:	f3bf 8f4f 	dsb	sy
 800f404:	623b      	str	r3, [r7, #32]
}
 800f406:	bf00      	nop
 800f408:	e7fe      	b.n	800f408 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d102      	bne.n	800f416 <xQueueGenericCreateStatic+0x7e>
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d101      	bne.n	800f41a <xQueueGenericCreateStatic+0x82>
 800f416:	2301      	movs	r3, #1
 800f418:	e000      	b.n	800f41c <xQueueGenericCreateStatic+0x84>
 800f41a:	2300      	movs	r3, #0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d10a      	bne.n	800f436 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f424:	f383 8811 	msr	BASEPRI, r3
 800f428:	f3bf 8f6f 	isb	sy
 800f42c:	f3bf 8f4f 	dsb	sy
 800f430:	61fb      	str	r3, [r7, #28]
}
 800f432:	bf00      	nop
 800f434:	e7fe      	b.n	800f434 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f436:	2350      	movs	r3, #80	; 0x50
 800f438:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	2b50      	cmp	r3, #80	; 0x50
 800f43e:	d00a      	beq.n	800f456 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f444:	f383 8811 	msr	BASEPRI, r3
 800f448:	f3bf 8f6f 	isb	sy
 800f44c:	f3bf 8f4f 	dsb	sy
 800f450:	61bb      	str	r3, [r7, #24]
}
 800f452:	bf00      	nop
 800f454:	e7fe      	b.n	800f454 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f456:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d00d      	beq.n	800f47e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f464:	2201      	movs	r2, #1
 800f466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f46a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	4613      	mov	r3, r2
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	68b9      	ldr	r1, [r7, #8]
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f000 f805 	bl	800f488 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f480:	4618      	mov	r0, r3
 800f482:	3730      	adds	r7, #48	; 0x30
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b084      	sub	sp, #16
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	60b9      	str	r1, [r7, #8]
 800f492:	607a      	str	r2, [r7, #4]
 800f494:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d103      	bne.n	800f4a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f49c:	69bb      	ldr	r3, [r7, #24]
 800f49e:	69ba      	ldr	r2, [r7, #24]
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	e002      	b.n	800f4aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	687a      	ldr	r2, [r7, #4]
 800f4a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f4b6:	2101      	movs	r1, #1
 800f4b8:	69b8      	ldr	r0, [r7, #24]
 800f4ba:	f7ff ff05 	bl	800f2c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	78fa      	ldrb	r2, [r7, #3]
 800f4c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f4c6:	bf00      	nop
 800f4c8:	3710      	adds	r7, #16
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
	...

0800f4d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b08e      	sub	sp, #56	; 0x38
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
 800f4dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d10a      	bne.n	800f502 <xQueueGenericSend+0x32>
	__asm volatile
 800f4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f0:	f383 8811 	msr	BASEPRI, r3
 800f4f4:	f3bf 8f6f 	isb	sy
 800f4f8:	f3bf 8f4f 	dsb	sy
 800f4fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f4fe:	bf00      	nop
 800f500:	e7fe      	b.n	800f500 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d103      	bne.n	800f510 <xQueueGenericSend+0x40>
 800f508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d101      	bne.n	800f514 <xQueueGenericSend+0x44>
 800f510:	2301      	movs	r3, #1
 800f512:	e000      	b.n	800f516 <xQueueGenericSend+0x46>
 800f514:	2300      	movs	r3, #0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d10a      	bne.n	800f530 <xQueueGenericSend+0x60>
	__asm volatile
 800f51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f52c:	bf00      	nop
 800f52e:	e7fe      	b.n	800f52e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	2b02      	cmp	r3, #2
 800f534:	d103      	bne.n	800f53e <xQueueGenericSend+0x6e>
 800f536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d101      	bne.n	800f542 <xQueueGenericSend+0x72>
 800f53e:	2301      	movs	r3, #1
 800f540:	e000      	b.n	800f544 <xQueueGenericSend+0x74>
 800f542:	2300      	movs	r3, #0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d10a      	bne.n	800f55e <xQueueGenericSend+0x8e>
	__asm volatile
 800f548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54c:	f383 8811 	msr	BASEPRI, r3
 800f550:	f3bf 8f6f 	isb	sy
 800f554:	f3bf 8f4f 	dsb	sy
 800f558:	623b      	str	r3, [r7, #32]
}
 800f55a:	bf00      	nop
 800f55c:	e7fe      	b.n	800f55c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f55e:	f001 fa1d 	bl	801099c <xTaskGetSchedulerState>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d102      	bne.n	800f56e <xQueueGenericSend+0x9e>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d101      	bne.n	800f572 <xQueueGenericSend+0xa2>
 800f56e:	2301      	movs	r3, #1
 800f570:	e000      	b.n	800f574 <xQueueGenericSend+0xa4>
 800f572:	2300      	movs	r3, #0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d10a      	bne.n	800f58e <xQueueGenericSend+0xbe>
	__asm volatile
 800f578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f57c:	f383 8811 	msr	BASEPRI, r3
 800f580:	f3bf 8f6f 	isb	sy
 800f584:	f3bf 8f4f 	dsb	sy
 800f588:	61fb      	str	r3, [r7, #28]
}
 800f58a:	bf00      	nop
 800f58c:	e7fe      	b.n	800f58c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f58e:	f001 ff61 	bl	8011454 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d302      	bcc.n	800f5a4 <xQueueGenericSend+0xd4>
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	2b02      	cmp	r3, #2
 800f5a2:	d129      	bne.n	800f5f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f5a4:	683a      	ldr	r2, [r7, #0]
 800f5a6:	68b9      	ldr	r1, [r7, #8]
 800f5a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5aa:	f000 fa0b 	bl	800f9c4 <prvCopyDataToQueue>
 800f5ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d010      	beq.n	800f5da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ba:	3324      	adds	r3, #36	; 0x24
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f001 f829 	bl	8010614 <xTaskRemoveFromEventList>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d013      	beq.n	800f5f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f5c8:	4b3f      	ldr	r3, [pc, #252]	; (800f6c8 <xQueueGenericSend+0x1f8>)
 800f5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ce:	601a      	str	r2, [r3, #0]
 800f5d0:	f3bf 8f4f 	dsb	sy
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	e00a      	b.n	800f5f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d007      	beq.n	800f5f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f5e0:	4b39      	ldr	r3, [pc, #228]	; (800f6c8 <xQueueGenericSend+0x1f8>)
 800f5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5e6:	601a      	str	r2, [r3, #0]
 800f5e8:	f3bf 8f4f 	dsb	sy
 800f5ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f5f0:	f001 ff60 	bl	80114b4 <vPortExitCritical>
				return pdPASS;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	e063      	b.n	800f6c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d103      	bne.n	800f606 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f5fe:	f001 ff59 	bl	80114b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f602:	2300      	movs	r3, #0
 800f604:	e05c      	b.n	800f6c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d106      	bne.n	800f61a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f60c:	f107 0314 	add.w	r3, r7, #20
 800f610:	4618      	mov	r0, r3
 800f612:	f001 f863 	bl	80106dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f616:	2301      	movs	r3, #1
 800f618:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f61a:	f001 ff4b 	bl	80114b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f61e:	f000 fda3 	bl	8010168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f622:	f001 ff17 	bl	8011454 <vPortEnterCritical>
 800f626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f62c:	b25b      	sxtb	r3, r3
 800f62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f632:	d103      	bne.n	800f63c <xQueueGenericSend+0x16c>
 800f634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f636:	2200      	movs	r2, #0
 800f638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f642:	b25b      	sxtb	r3, r3
 800f644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f648:	d103      	bne.n	800f652 <xQueueGenericSend+0x182>
 800f64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64c:	2200      	movs	r2, #0
 800f64e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f652:	f001 ff2f 	bl	80114b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f656:	1d3a      	adds	r2, r7, #4
 800f658:	f107 0314 	add.w	r3, r7, #20
 800f65c:	4611      	mov	r1, r2
 800f65e:	4618      	mov	r0, r3
 800f660:	f001 f852 	bl	8010708 <xTaskCheckForTimeOut>
 800f664:	4603      	mov	r3, r0
 800f666:	2b00      	cmp	r3, #0
 800f668:	d124      	bne.n	800f6b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f66a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f66c:	f000 faa2 	bl	800fbb4 <prvIsQueueFull>
 800f670:	4603      	mov	r3, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d018      	beq.n	800f6a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f678:	3310      	adds	r3, #16
 800f67a:	687a      	ldr	r2, [r7, #4]
 800f67c:	4611      	mov	r1, r2
 800f67e:	4618      	mov	r0, r3
 800f680:	f000 ff78 	bl	8010574 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f686:	f000 fa2d 	bl	800fae4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f68a:	f000 fd7b 	bl	8010184 <xTaskResumeAll>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	f47f af7c 	bne.w	800f58e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f696:	4b0c      	ldr	r3, [pc, #48]	; (800f6c8 <xQueueGenericSend+0x1f8>)
 800f698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f69c:	601a      	str	r2, [r3, #0]
 800f69e:	f3bf 8f4f 	dsb	sy
 800f6a2:	f3bf 8f6f 	isb	sy
 800f6a6:	e772      	b.n	800f58e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f6a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6aa:	f000 fa1b 	bl	800fae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f6ae:	f000 fd69 	bl	8010184 <xTaskResumeAll>
 800f6b2:	e76c      	b.n	800f58e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f6b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6b6:	f000 fa15 	bl	800fae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f6ba:	f000 fd63 	bl	8010184 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f6be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3738      	adds	r7, #56	; 0x38
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	e000ed04 	.word	0xe000ed04

0800f6cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b090      	sub	sp, #64	; 0x40
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	607a      	str	r2, [r7, #4]
 800f6d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d10a      	bne.n	800f6fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e8:	f383 8811 	msr	BASEPRI, r3
 800f6ec:	f3bf 8f6f 	isb	sy
 800f6f0:	f3bf 8f4f 	dsb	sy
 800f6f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f6f6:	bf00      	nop
 800f6f8:	e7fe      	b.n	800f6f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d103      	bne.n	800f708 <xQueueGenericSendFromISR+0x3c>
 800f700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f704:	2b00      	cmp	r3, #0
 800f706:	d101      	bne.n	800f70c <xQueueGenericSendFromISR+0x40>
 800f708:	2301      	movs	r3, #1
 800f70a:	e000      	b.n	800f70e <xQueueGenericSendFromISR+0x42>
 800f70c:	2300      	movs	r3, #0
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d10a      	bne.n	800f728 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f724:	bf00      	nop
 800f726:	e7fe      	b.n	800f726 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	2b02      	cmp	r3, #2
 800f72c:	d103      	bne.n	800f736 <xQueueGenericSendFromISR+0x6a>
 800f72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f732:	2b01      	cmp	r3, #1
 800f734:	d101      	bne.n	800f73a <xQueueGenericSendFromISR+0x6e>
 800f736:	2301      	movs	r3, #1
 800f738:	e000      	b.n	800f73c <xQueueGenericSendFromISR+0x70>
 800f73a:	2300      	movs	r3, #0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d10a      	bne.n	800f756 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f744:	f383 8811 	msr	BASEPRI, r3
 800f748:	f3bf 8f6f 	isb	sy
 800f74c:	f3bf 8f4f 	dsb	sy
 800f750:	623b      	str	r3, [r7, #32]
}
 800f752:	bf00      	nop
 800f754:	e7fe      	b.n	800f754 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f756:	f001 ff5f 	bl	8011618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f75a:	f3ef 8211 	mrs	r2, BASEPRI
 800f75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f762:	f383 8811 	msr	BASEPRI, r3
 800f766:	f3bf 8f6f 	isb	sy
 800f76a:	f3bf 8f4f 	dsb	sy
 800f76e:	61fa      	str	r2, [r7, #28]
 800f770:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f772:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f774:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f77c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f77e:	429a      	cmp	r2, r3
 800f780:	d302      	bcc.n	800f788 <xQueueGenericSendFromISR+0xbc>
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	2b02      	cmp	r3, #2
 800f786:	d12f      	bne.n	800f7e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f796:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f798:	683a      	ldr	r2, [r7, #0]
 800f79a:	68b9      	ldr	r1, [r7, #8]
 800f79c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f79e:	f000 f911 	bl	800f9c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f7a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7aa:	d112      	bne.n	800f7d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d016      	beq.n	800f7e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b6:	3324      	adds	r3, #36	; 0x24
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f000 ff2b 	bl	8010614 <xTaskRemoveFromEventList>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d00e      	beq.n	800f7e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d00b      	beq.n	800f7e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	601a      	str	r2, [r3, #0]
 800f7d0:	e007      	b.n	800f7e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f7d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	b25a      	sxtb	r2, r3
 800f7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f7e6:	e001      	b.n	800f7ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f7f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3740      	adds	r7, #64	; 0x40
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
	...

0800f804 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b08c      	sub	sp, #48	; 0x30
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f810:	2300      	movs	r3, #0
 800f812:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d10a      	bne.n	800f834 <xQueueReceive+0x30>
	__asm volatile
 800f81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f822:	f383 8811 	msr	BASEPRI, r3
 800f826:	f3bf 8f6f 	isb	sy
 800f82a:	f3bf 8f4f 	dsb	sy
 800f82e:	623b      	str	r3, [r7, #32]
}
 800f830:	bf00      	nop
 800f832:	e7fe      	b.n	800f832 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d103      	bne.n	800f842 <xQueueReceive+0x3e>
 800f83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d101      	bne.n	800f846 <xQueueReceive+0x42>
 800f842:	2301      	movs	r3, #1
 800f844:	e000      	b.n	800f848 <xQueueReceive+0x44>
 800f846:	2300      	movs	r3, #0
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d10a      	bne.n	800f862 <xQueueReceive+0x5e>
	__asm volatile
 800f84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f850:	f383 8811 	msr	BASEPRI, r3
 800f854:	f3bf 8f6f 	isb	sy
 800f858:	f3bf 8f4f 	dsb	sy
 800f85c:	61fb      	str	r3, [r7, #28]
}
 800f85e:	bf00      	nop
 800f860:	e7fe      	b.n	800f860 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f862:	f001 f89b 	bl	801099c <xTaskGetSchedulerState>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d102      	bne.n	800f872 <xQueueReceive+0x6e>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d101      	bne.n	800f876 <xQueueReceive+0x72>
 800f872:	2301      	movs	r3, #1
 800f874:	e000      	b.n	800f878 <xQueueReceive+0x74>
 800f876:	2300      	movs	r3, #0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d10a      	bne.n	800f892 <xQueueReceive+0x8e>
	__asm volatile
 800f87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f880:	f383 8811 	msr	BASEPRI, r3
 800f884:	f3bf 8f6f 	isb	sy
 800f888:	f3bf 8f4f 	dsb	sy
 800f88c:	61bb      	str	r3, [r7, #24]
}
 800f88e:	bf00      	nop
 800f890:	e7fe      	b.n	800f890 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f892:	f001 fddf 	bl	8011454 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f89a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d01f      	beq.n	800f8e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f8a2:	68b9      	ldr	r1, [r7, #8]
 800f8a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8a6:	f000 f8f7 	bl	800fa98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ac:	1e5a      	subs	r2, r3, #1
 800f8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b4:	691b      	ldr	r3, [r3, #16]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d00f      	beq.n	800f8da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8bc:	3310      	adds	r3, #16
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 fea8 	bl	8010614 <xTaskRemoveFromEventList>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d007      	beq.n	800f8da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f8ca:	4b3d      	ldr	r3, [pc, #244]	; (800f9c0 <xQueueReceive+0x1bc>)
 800f8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8d0:	601a      	str	r2, [r3, #0]
 800f8d2:	f3bf 8f4f 	dsb	sy
 800f8d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f8da:	f001 fdeb 	bl	80114b4 <vPortExitCritical>
				return pdPASS;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	e069      	b.n	800f9b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d103      	bne.n	800f8f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f8e8:	f001 fde4 	bl	80114b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	e062      	b.n	800f9b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d106      	bne.n	800f904 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f8f6:	f107 0310 	add.w	r3, r7, #16
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f000 feee 	bl	80106dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f900:	2301      	movs	r3, #1
 800f902:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f904:	f001 fdd6 	bl	80114b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f908:	f000 fc2e 	bl	8010168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f90c:	f001 fda2 	bl	8011454 <vPortEnterCritical>
 800f910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f916:	b25b      	sxtb	r3, r3
 800f918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f91c:	d103      	bne.n	800f926 <xQueueReceive+0x122>
 800f91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f920:	2200      	movs	r2, #0
 800f922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f92c:	b25b      	sxtb	r3, r3
 800f92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f932:	d103      	bne.n	800f93c <xQueueReceive+0x138>
 800f934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f936:	2200      	movs	r2, #0
 800f938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f93c:	f001 fdba 	bl	80114b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f940:	1d3a      	adds	r2, r7, #4
 800f942:	f107 0310 	add.w	r3, r7, #16
 800f946:	4611      	mov	r1, r2
 800f948:	4618      	mov	r0, r3
 800f94a:	f000 fedd 	bl	8010708 <xTaskCheckForTimeOut>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d123      	bne.n	800f99c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f956:	f000 f917 	bl	800fb88 <prvIsQueueEmpty>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d017      	beq.n	800f990 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f962:	3324      	adds	r3, #36	; 0x24
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	4611      	mov	r1, r2
 800f968:	4618      	mov	r0, r3
 800f96a:	f000 fe03 	bl	8010574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f96e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f970:	f000 f8b8 	bl	800fae4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f974:	f000 fc06 	bl	8010184 <xTaskResumeAll>
 800f978:	4603      	mov	r3, r0
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d189      	bne.n	800f892 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f97e:	4b10      	ldr	r3, [pc, #64]	; (800f9c0 <xQueueReceive+0x1bc>)
 800f980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	f3bf 8f4f 	dsb	sy
 800f98a:	f3bf 8f6f 	isb	sy
 800f98e:	e780      	b.n	800f892 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f992:	f000 f8a7 	bl	800fae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f996:	f000 fbf5 	bl	8010184 <xTaskResumeAll>
 800f99a:	e77a      	b.n	800f892 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f99c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f99e:	f000 f8a1 	bl	800fae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9a2:	f000 fbef 	bl	8010184 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9a8:	f000 f8ee 	bl	800fb88 <prvIsQueueEmpty>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f43f af6f 	beq.w	800f892 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f9b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3730      	adds	r7, #48	; 0x30
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	e000ed04 	.word	0xe000ed04

0800f9c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b086      	sub	sp, #24
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d10d      	bne.n	800f9fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d14d      	bne.n	800fa86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f000 fff2 	bl	80109d8 <xTaskPriorityDisinherit>
 800f9f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	609a      	str	r2, [r3, #8]
 800f9fc:	e043      	b.n	800fa86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d119      	bne.n	800fa38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6858      	ldr	r0, [r3, #4]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	68b9      	ldr	r1, [r7, #8]
 800fa10:	f001 fec6 	bl	80117a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	685a      	ldr	r2, [r3, #4]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa1c:	441a      	add	r2, r3
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	685a      	ldr	r2, [r3, #4]
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	689b      	ldr	r3, [r3, #8]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d32b      	bcc.n	800fa86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	605a      	str	r2, [r3, #4]
 800fa36:	e026      	b.n	800fa86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	68d8      	ldr	r0, [r3, #12]
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa40:	461a      	mov	r2, r3
 800fa42:	68b9      	ldr	r1, [r7, #8]
 800fa44:	f001 feac 	bl	80117a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	68da      	ldr	r2, [r3, #12]
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa50:	425b      	negs	r3, r3
 800fa52:	441a      	add	r2, r3
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	68da      	ldr	r2, [r3, #12]
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d207      	bcs.n	800fa74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	689a      	ldr	r2, [r3, #8]
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa6c:	425b      	negs	r3, r3
 800fa6e:	441a      	add	r2, r3
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2b02      	cmp	r3, #2
 800fa78:	d105      	bne.n	800fa86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d002      	beq.n	800fa86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	3b01      	subs	r3, #1
 800fa84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	1c5a      	adds	r2, r3, #1
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fa8e:	697b      	ldr	r3, [r7, #20]
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3718      	adds	r7, #24
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d018      	beq.n	800fadc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	68da      	ldr	r2, [r3, #12]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fab2:	441a      	add	r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	68da      	ldr	r2, [r3, #12]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	689b      	ldr	r3, [r3, #8]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d303      	bcc.n	800facc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	68d9      	ldr	r1, [r3, #12]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fad4:	461a      	mov	r2, r3
 800fad6:	6838      	ldr	r0, [r7, #0]
 800fad8:	f001 fe62 	bl	80117a0 <memcpy>
	}
}
 800fadc:	bf00      	nop
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800faec:	f001 fcb2 	bl	8011454 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800faf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800faf8:	e011      	b.n	800fb1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d012      	beq.n	800fb28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	3324      	adds	r3, #36	; 0x24
 800fb06:	4618      	mov	r0, r3
 800fb08:	f000 fd84 	bl	8010614 <xTaskRemoveFromEventList>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d001      	beq.n	800fb16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fb12:	f000 fe5b 	bl	80107cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fb16:	7bfb      	ldrb	r3, [r7, #15]
 800fb18:	3b01      	subs	r3, #1
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	dce9      	bgt.n	800fafa <prvUnlockQueue+0x16>
 800fb26:	e000      	b.n	800fb2a <prvUnlockQueue+0x46>
					break;
 800fb28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	22ff      	movs	r2, #255	; 0xff
 800fb2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fb32:	f001 fcbf 	bl	80114b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fb36:	f001 fc8d 	bl	8011454 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb42:	e011      	b.n	800fb68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	691b      	ldr	r3, [r3, #16]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d012      	beq.n	800fb72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	3310      	adds	r3, #16
 800fb50:	4618      	mov	r0, r3
 800fb52:	f000 fd5f 	bl	8010614 <xTaskRemoveFromEventList>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fb5c:	f000 fe36 	bl	80107cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fb60:	7bbb      	ldrb	r3, [r7, #14]
 800fb62:	3b01      	subs	r3, #1
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	dce9      	bgt.n	800fb44 <prvUnlockQueue+0x60>
 800fb70:	e000      	b.n	800fb74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fb72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	22ff      	movs	r2, #255	; 0xff
 800fb78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fb7c:	f001 fc9a 	bl	80114b4 <vPortExitCritical>
}
 800fb80:	bf00      	nop
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fb90:	f001 fc60 	bl	8011454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d102      	bne.n	800fba2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	60fb      	str	r3, [r7, #12]
 800fba0:	e001      	b.n	800fba6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fba2:	2300      	movs	r3, #0
 800fba4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fba6:	f001 fc85 	bl	80114b4 <vPortExitCritical>

	return xReturn;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3710      	adds	r7, #16
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fbbc:	f001 fc4a 	bl	8011454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d102      	bne.n	800fbd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fbcc:	2301      	movs	r3, #1
 800fbce:	60fb      	str	r3, [r7, #12]
 800fbd0:	e001      	b.n	800fbd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fbd6:	f001 fc6d 	bl	80114b4 <vPortExitCritical>

	return xReturn;
 800fbda:	68fb      	ldr	r3, [r7, #12]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3710      	adds	r7, #16
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b085      	sub	sp, #20
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fbee:	2300      	movs	r3, #0
 800fbf0:	60fb      	str	r3, [r7, #12]
 800fbf2:	e014      	b.n	800fc1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fbf4:	4a0f      	ldr	r2, [pc, #60]	; (800fc34 <vQueueAddToRegistry+0x50>)
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d10b      	bne.n	800fc18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fc00:	490c      	ldr	r1, [pc, #48]	; (800fc34 <vQueueAddToRegistry+0x50>)
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	683a      	ldr	r2, [r7, #0]
 800fc06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fc0a:	4a0a      	ldr	r2, [pc, #40]	; (800fc34 <vQueueAddToRegistry+0x50>)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	00db      	lsls	r3, r3, #3
 800fc10:	4413      	add	r3, r2
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fc16:	e006      	b.n	800fc26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	60fb      	str	r3, [r7, #12]
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2b07      	cmp	r3, #7
 800fc22:	d9e7      	bls.n	800fbf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fc24:	bf00      	nop
 800fc26:	bf00      	nop
 800fc28:	3714      	adds	r7, #20
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr
 800fc32:	bf00      	nop
 800fc34:	2400134c 	.word	0x2400134c

0800fc38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b086      	sub	sp, #24
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fc48:	f001 fc04 	bl	8011454 <vPortEnterCritical>
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc52:	b25b      	sxtb	r3, r3
 800fc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc58:	d103      	bne.n	800fc62 <vQueueWaitForMessageRestricted+0x2a>
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc68:	b25b      	sxtb	r3, r3
 800fc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc6e:	d103      	bne.n	800fc78 <vQueueWaitForMessageRestricted+0x40>
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	2200      	movs	r2, #0
 800fc74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc78:	f001 fc1c 	bl	80114b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d106      	bne.n	800fc92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	3324      	adds	r3, #36	; 0x24
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	68b9      	ldr	r1, [r7, #8]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f000 fc95 	bl	80105bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fc92:	6978      	ldr	r0, [r7, #20]
 800fc94:	f7ff ff26 	bl	800fae4 <prvUnlockQueue>
	}
 800fc98:	bf00      	nop
 800fc9a:	3718      	adds	r7, #24
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b08e      	sub	sp, #56	; 0x38
 800fca4:	af04      	add	r7, sp, #16
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
 800fcac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d10a      	bne.n	800fcca <xTaskCreateStatic+0x2a>
	__asm volatile
 800fcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb8:	f383 8811 	msr	BASEPRI, r3
 800fcbc:	f3bf 8f6f 	isb	sy
 800fcc0:	f3bf 8f4f 	dsb	sy
 800fcc4:	623b      	str	r3, [r7, #32]
}
 800fcc6:	bf00      	nop
 800fcc8:	e7fe      	b.n	800fcc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d10a      	bne.n	800fce6 <xTaskCreateStatic+0x46>
	__asm volatile
 800fcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd4:	f383 8811 	msr	BASEPRI, r3
 800fcd8:	f3bf 8f6f 	isb	sy
 800fcdc:	f3bf 8f4f 	dsb	sy
 800fce0:	61fb      	str	r3, [r7, #28]
}
 800fce2:	bf00      	nop
 800fce4:	e7fe      	b.n	800fce4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fce6:	23c4      	movs	r3, #196	; 0xc4
 800fce8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	2bc4      	cmp	r3, #196	; 0xc4
 800fcee:	d00a      	beq.n	800fd06 <xTaskCreateStatic+0x66>
	__asm volatile
 800fcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf4:	f383 8811 	msr	BASEPRI, r3
 800fcf8:	f3bf 8f6f 	isb	sy
 800fcfc:	f3bf 8f4f 	dsb	sy
 800fd00:	61bb      	str	r3, [r7, #24]
}
 800fd02:	bf00      	nop
 800fd04:	e7fe      	b.n	800fd04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fd06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d01e      	beq.n	800fd4c <xTaskCreateStatic+0xac>
 800fd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d01b      	beq.n	800fd4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd20:	2202      	movs	r2, #2
 800fd22:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fd26:	2300      	movs	r3, #0
 800fd28:	9303      	str	r3, [sp, #12]
 800fd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2c:	9302      	str	r3, [sp, #8]
 800fd2e:	f107 0314 	add.w	r3, r7, #20
 800fd32:	9301      	str	r3, [sp, #4]
 800fd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	68b9      	ldr	r1, [r7, #8]
 800fd3e:	68f8      	ldr	r0, [r7, #12]
 800fd40:	f000 f850 	bl	800fde4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fd44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd46:	f000 f8f9 	bl	800ff3c <prvAddNewTaskToReadyList>
 800fd4a:	e001      	b.n	800fd50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fd50:	697b      	ldr	r3, [r7, #20]
	}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3728      	adds	r7, #40	; 0x28
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b08c      	sub	sp, #48	; 0x30
 800fd5e:	af04      	add	r7, sp, #16
 800fd60:	60f8      	str	r0, [r7, #12]
 800fd62:	60b9      	str	r1, [r7, #8]
 800fd64:	603b      	str	r3, [r7, #0]
 800fd66:	4613      	mov	r3, r2
 800fd68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fd6a:	88fb      	ldrh	r3, [r7, #6]
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f001 fc92 	bl	8011698 <pvPortMalloc>
 800fd74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00e      	beq.n	800fd9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fd7c:	20c4      	movs	r0, #196	; 0xc4
 800fd7e:	f001 fc8b 	bl	8011698 <pvPortMalloc>
 800fd82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d003      	beq.n	800fd92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	697a      	ldr	r2, [r7, #20]
 800fd8e:	631a      	str	r2, [r3, #48]	; 0x30
 800fd90:	e005      	b.n	800fd9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fd92:	6978      	ldr	r0, [r7, #20]
 800fd94:	f001 fcc6 	bl	8011724 <vPortFree>
 800fd98:	e001      	b.n	800fd9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fd9e:	69fb      	ldr	r3, [r7, #28]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d017      	beq.n	800fdd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	2200      	movs	r2, #0
 800fda8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fdac:	88fa      	ldrh	r2, [r7, #6]
 800fdae:	2300      	movs	r3, #0
 800fdb0:	9303      	str	r3, [sp, #12]
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	9302      	str	r3, [sp, #8]
 800fdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb8:	9301      	str	r3, [sp, #4]
 800fdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	68b9      	ldr	r1, [r7, #8]
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	f000 f80e 	bl	800fde4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fdc8:	69f8      	ldr	r0, [r7, #28]
 800fdca:	f000 f8b7 	bl	800ff3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fdce:	2301      	movs	r3, #1
 800fdd0:	61bb      	str	r3, [r7, #24]
 800fdd2:	e002      	b.n	800fdda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fdd4:	f04f 33ff 	mov.w	r3, #4294967295
 800fdd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fdda:	69bb      	ldr	r3, [r7, #24]
	}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3720      	adds	r7, #32
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b088      	sub	sp, #32
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	607a      	str	r2, [r7, #4]
 800fdf0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	009b      	lsls	r3, r3, #2
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	21a5      	movs	r1, #165	; 0xa5
 800fdfe:	f001 fcdd 	bl	80117bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fe02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe06:	6879      	ldr	r1, [r7, #4]
 800fe08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fe0c:	440b      	add	r3, r1
 800fe0e:	009b      	lsls	r3, r3, #2
 800fe10:	4413      	add	r3, r2
 800fe12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fe14:	69bb      	ldr	r3, [r7, #24]
 800fe16:	f023 0307 	bic.w	r3, r3, #7
 800fe1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fe1c:	69bb      	ldr	r3, [r7, #24]
 800fe1e:	f003 0307 	and.w	r3, r3, #7
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d00a      	beq.n	800fe3c <prvInitialiseNewTask+0x58>
	__asm volatile
 800fe26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2a:	f383 8811 	msr	BASEPRI, r3
 800fe2e:	f3bf 8f6f 	isb	sy
 800fe32:	f3bf 8f4f 	dsb	sy
 800fe36:	617b      	str	r3, [r7, #20]
}
 800fe38:	bf00      	nop
 800fe3a:	e7fe      	b.n	800fe3a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800fe3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3e:	69ba      	ldr	r2, [r7, #24]
 800fe40:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d01f      	beq.n	800fe88 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe48:	2300      	movs	r3, #0
 800fe4a:	61fb      	str	r3, [r7, #28]
 800fe4c:	e012      	b.n	800fe74 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fe4e:	68ba      	ldr	r2, [r7, #8]
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	4413      	add	r3, r2
 800fe54:	7819      	ldrb	r1, [r3, #0]
 800fe56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	4413      	add	r3, r2
 800fe5c:	3334      	adds	r3, #52	; 0x34
 800fe5e:	460a      	mov	r2, r1
 800fe60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fe62:	68ba      	ldr	r2, [r7, #8]
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	4413      	add	r3, r2
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d006      	beq.n	800fe7c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe6e:	69fb      	ldr	r3, [r7, #28]
 800fe70:	3301      	adds	r3, #1
 800fe72:	61fb      	str	r3, [r7, #28]
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	2b0f      	cmp	r3, #15
 800fe78:	d9e9      	bls.n	800fe4e <prvInitialiseNewTask+0x6a>
 800fe7a:	e000      	b.n	800fe7e <prvInitialiseNewTask+0x9a>
			{
				break;
 800fe7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fe7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe80:	2200      	movs	r2, #0
 800fe82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fe86:	e003      	b.n	800fe90 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fe88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fe90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe92:	2b37      	cmp	r3, #55	; 0x37
 800fe94:	d901      	bls.n	800fe9a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fe96:	2337      	movs	r3, #55	; 0x37
 800fe98:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fe9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe9e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fea4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800fea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea8:	2200      	movs	r2, #0
 800feaa:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800feac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feae:	3304      	adds	r3, #4
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7ff f975 	bl	800f1a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800feb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb8:	3318      	adds	r3, #24
 800feba:	4618      	mov	r0, r3
 800febc:	f7ff f970 	bl	800f1a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fec4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fece:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fed4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800fed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed8:	2200      	movs	r2, #0
 800feda:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fede:	2200      	movs	r2, #0
 800fee0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee6:	2200      	movs	r2, #0
 800fee8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800feec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feee:	335c      	adds	r3, #92	; 0x5c
 800fef0:	2260      	movs	r2, #96	; 0x60
 800fef2:	2100      	movs	r1, #0
 800fef4:	4618      	mov	r0, r3
 800fef6:	f001 fc61 	bl	80117bc <memset>
 800fefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefc:	4a0c      	ldr	r2, [pc, #48]	; (800ff30 <prvInitialiseNewTask+0x14c>)
 800fefe:	661a      	str	r2, [r3, #96]	; 0x60
 800ff00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff02:	4a0c      	ldr	r2, [pc, #48]	; (800ff34 <prvInitialiseNewTask+0x150>)
 800ff04:	665a      	str	r2, [r3, #100]	; 0x64
 800ff06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff08:	4a0b      	ldr	r2, [pc, #44]	; (800ff38 <prvInitialiseNewTask+0x154>)
 800ff0a:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ff0c:	683a      	ldr	r2, [r7, #0]
 800ff0e:	68f9      	ldr	r1, [r7, #12]
 800ff10:	69b8      	ldr	r0, [r7, #24]
 800ff12:	f001 f971 	bl	80111f8 <pxPortInitialiseStack>
 800ff16:	4602      	mov	r2, r0
 800ff18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ff1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d002      	beq.n	800ff28 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ff22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff28:	bf00      	nop
 800ff2a:	3720      	adds	r7, #32
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	08011a84 	.word	0x08011a84
 800ff34:	08011aa4 	.word	0x08011aa4
 800ff38:	08011a64 	.word	0x08011a64

0800ff3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ff44:	f001 fa86 	bl	8011454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ff48:	4b2d      	ldr	r3, [pc, #180]	; (8010000 <prvAddNewTaskToReadyList+0xc4>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	4a2c      	ldr	r2, [pc, #176]	; (8010000 <prvAddNewTaskToReadyList+0xc4>)
 800ff50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ff52:	4b2c      	ldr	r3, [pc, #176]	; (8010004 <prvAddNewTaskToReadyList+0xc8>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d109      	bne.n	800ff6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ff5a:	4a2a      	ldr	r2, [pc, #168]	; (8010004 <prvAddNewTaskToReadyList+0xc8>)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ff60:	4b27      	ldr	r3, [pc, #156]	; (8010000 <prvAddNewTaskToReadyList+0xc4>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d110      	bne.n	800ff8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ff68:	f000 fc56 	bl	8010818 <prvInitialiseTaskLists>
 800ff6c:	e00d      	b.n	800ff8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ff6e:	4b26      	ldr	r3, [pc, #152]	; (8010008 <prvAddNewTaskToReadyList+0xcc>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d109      	bne.n	800ff8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ff76:	4b23      	ldr	r3, [pc, #140]	; (8010004 <prvAddNewTaskToReadyList+0xc8>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d802      	bhi.n	800ff8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ff84:	4a1f      	ldr	r2, [pc, #124]	; (8010004 <prvAddNewTaskToReadyList+0xc8>)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ff8a:	4b20      	ldr	r3, [pc, #128]	; (801000c <prvAddNewTaskToReadyList+0xd0>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	3301      	adds	r3, #1
 800ff90:	4a1e      	ldr	r2, [pc, #120]	; (801000c <prvAddNewTaskToReadyList+0xd0>)
 800ff92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ff94:	4b1d      	ldr	r3, [pc, #116]	; (801000c <prvAddNewTaskToReadyList+0xd0>)
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa0:	4b1b      	ldr	r3, [pc, #108]	; (8010010 <prvAddNewTaskToReadyList+0xd4>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d903      	bls.n	800ffb0 <prvAddNewTaskToReadyList+0x74>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffac:	4a18      	ldr	r2, [pc, #96]	; (8010010 <prvAddNewTaskToReadyList+0xd4>)
 800ffae:	6013      	str	r3, [r2, #0]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	4413      	add	r3, r2
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	4a15      	ldr	r2, [pc, #84]	; (8010014 <prvAddNewTaskToReadyList+0xd8>)
 800ffbe:	441a      	add	r2, r3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	3304      	adds	r3, #4
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	4610      	mov	r0, r2
 800ffc8:	f7ff f8f7 	bl	800f1ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ffcc:	f001 fa72 	bl	80114b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ffd0:	4b0d      	ldr	r3, [pc, #52]	; (8010008 <prvAddNewTaskToReadyList+0xcc>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d00e      	beq.n	800fff6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ffd8:	4b0a      	ldr	r3, [pc, #40]	; (8010004 <prvAddNewTaskToReadyList+0xc8>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d207      	bcs.n	800fff6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ffe6:	4b0c      	ldr	r3, [pc, #48]	; (8010018 <prvAddNewTaskToReadyList+0xdc>)
 800ffe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffec:	601a      	str	r2, [r3, #0]
 800ffee:	f3bf 8f4f 	dsb	sy
 800fff2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fff6:	bf00      	nop
 800fff8:	3708      	adds	r7, #8
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	24001860 	.word	0x24001860
 8010004:	2400138c 	.word	0x2400138c
 8010008:	2400186c 	.word	0x2400186c
 801000c:	2400187c 	.word	0x2400187c
 8010010:	24001868 	.word	0x24001868
 8010014:	24001390 	.word	0x24001390
 8010018:	e000ed04 	.word	0xe000ed04

0801001c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010024:	2300      	movs	r3, #0
 8010026:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d017      	beq.n	801005e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801002e:	4b13      	ldr	r3, [pc, #76]	; (801007c <vTaskDelay+0x60>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d00a      	beq.n	801004c <vTaskDelay+0x30>
	__asm volatile
 8010036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003a:	f383 8811 	msr	BASEPRI, r3
 801003e:	f3bf 8f6f 	isb	sy
 8010042:	f3bf 8f4f 	dsb	sy
 8010046:	60bb      	str	r3, [r7, #8]
}
 8010048:	bf00      	nop
 801004a:	e7fe      	b.n	801004a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801004c:	f000 f88c 	bl	8010168 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010050:	2100      	movs	r1, #0
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 fd2e 	bl	8010ab4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010058:	f000 f894 	bl	8010184 <xTaskResumeAll>
 801005c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d107      	bne.n	8010074 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010064:	4b06      	ldr	r3, [pc, #24]	; (8010080 <vTaskDelay+0x64>)
 8010066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801006a:	601a      	str	r2, [r3, #0]
 801006c:	f3bf 8f4f 	dsb	sy
 8010070:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010074:	bf00      	nop
 8010076:	3710      	adds	r7, #16
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	24001888 	.word	0x24001888
 8010080:	e000ed04 	.word	0xe000ed04

08010084 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b08a      	sub	sp, #40	; 0x28
 8010088:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801008a:	2300      	movs	r3, #0
 801008c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801008e:	2300      	movs	r3, #0
 8010090:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010092:	463a      	mov	r2, r7
 8010094:	1d39      	adds	r1, r7, #4
 8010096:	f107 0308 	add.w	r3, r7, #8
 801009a:	4618      	mov	r0, r3
 801009c:	f7ff f82c 	bl	800f0f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80100a0:	6839      	ldr	r1, [r7, #0]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	68ba      	ldr	r2, [r7, #8]
 80100a6:	9202      	str	r2, [sp, #8]
 80100a8:	9301      	str	r3, [sp, #4]
 80100aa:	2300      	movs	r3, #0
 80100ac:	9300      	str	r3, [sp, #0]
 80100ae:	2300      	movs	r3, #0
 80100b0:	460a      	mov	r2, r1
 80100b2:	4925      	ldr	r1, [pc, #148]	; (8010148 <vTaskStartScheduler+0xc4>)
 80100b4:	4825      	ldr	r0, [pc, #148]	; (801014c <vTaskStartScheduler+0xc8>)
 80100b6:	f7ff fdf3 	bl	800fca0 <xTaskCreateStatic>
 80100ba:	4603      	mov	r3, r0
 80100bc:	4a24      	ldr	r2, [pc, #144]	; (8010150 <vTaskStartScheduler+0xcc>)
 80100be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80100c0:	4b23      	ldr	r3, [pc, #140]	; (8010150 <vTaskStartScheduler+0xcc>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d002      	beq.n	80100ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80100c8:	2301      	movs	r3, #1
 80100ca:	617b      	str	r3, [r7, #20]
 80100cc:	e001      	b.n	80100d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80100ce:	2300      	movs	r3, #0
 80100d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d102      	bne.n	80100de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80100d8:	f000 fd40 	bl	8010b5c <xTimerCreateTimerTask>
 80100dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d11d      	bne.n	8010120 <vTaskStartScheduler+0x9c>
	__asm volatile
 80100e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e8:	f383 8811 	msr	BASEPRI, r3
 80100ec:	f3bf 8f6f 	isb	sy
 80100f0:	f3bf 8f4f 	dsb	sy
 80100f4:	613b      	str	r3, [r7, #16]
}
 80100f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80100f8:	4b16      	ldr	r3, [pc, #88]	; (8010154 <vTaskStartScheduler+0xd0>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	335c      	adds	r3, #92	; 0x5c
 80100fe:	4a16      	ldr	r2, [pc, #88]	; (8010158 <vTaskStartScheduler+0xd4>)
 8010100:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010102:	4b16      	ldr	r3, [pc, #88]	; (801015c <vTaskStartScheduler+0xd8>)
 8010104:	f04f 32ff 	mov.w	r2, #4294967295
 8010108:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801010a:	4b15      	ldr	r3, [pc, #84]	; (8010160 <vTaskStartScheduler+0xdc>)
 801010c:	2201      	movs	r2, #1
 801010e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010110:	4b14      	ldr	r3, [pc, #80]	; (8010164 <vTaskStartScheduler+0xe0>)
 8010112:	2200      	movs	r2, #0
 8010114:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8010116:	f7f0 fee1 	bl	8000edc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801011a:	f001 f8f9 	bl	8011310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801011e:	e00e      	b.n	801013e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010126:	d10a      	bne.n	801013e <vTaskStartScheduler+0xba>
	__asm volatile
 8010128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801012c:	f383 8811 	msr	BASEPRI, r3
 8010130:	f3bf 8f6f 	isb	sy
 8010134:	f3bf 8f4f 	dsb	sy
 8010138:	60fb      	str	r3, [r7, #12]
}
 801013a:	bf00      	nop
 801013c:	e7fe      	b.n	801013c <vTaskStartScheduler+0xb8>
}
 801013e:	bf00      	nop
 8010140:	3718      	adds	r7, #24
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
 8010146:	bf00      	nop
 8010148:	080119c0 	.word	0x080119c0
 801014c:	080107e5 	.word	0x080107e5
 8010150:	24001884 	.word	0x24001884
 8010154:	2400138c 	.word	0x2400138c
 8010158:	24000014 	.word	0x24000014
 801015c:	24001880 	.word	0x24001880
 8010160:	2400186c 	.word	0x2400186c
 8010164:	24001864 	.word	0x24001864

08010168 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010168:	b480      	push	{r7}
 801016a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801016c:	4b04      	ldr	r3, [pc, #16]	; (8010180 <vTaskSuspendAll+0x18>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	3301      	adds	r3, #1
 8010172:	4a03      	ldr	r2, [pc, #12]	; (8010180 <vTaskSuspendAll+0x18>)
 8010174:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010176:	bf00      	nop
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr
 8010180:	24001888 	.word	0x24001888

08010184 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b084      	sub	sp, #16
 8010188:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801018a:	2300      	movs	r3, #0
 801018c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801018e:	2300      	movs	r3, #0
 8010190:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010192:	4b42      	ldr	r3, [pc, #264]	; (801029c <xTaskResumeAll+0x118>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d10a      	bne.n	80101b0 <xTaskResumeAll+0x2c>
	__asm volatile
 801019a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801019e:	f383 8811 	msr	BASEPRI, r3
 80101a2:	f3bf 8f6f 	isb	sy
 80101a6:	f3bf 8f4f 	dsb	sy
 80101aa:	603b      	str	r3, [r7, #0]
}
 80101ac:	bf00      	nop
 80101ae:	e7fe      	b.n	80101ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80101b0:	f001 f950 	bl	8011454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80101b4:	4b39      	ldr	r3, [pc, #228]	; (801029c <xTaskResumeAll+0x118>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	3b01      	subs	r3, #1
 80101ba:	4a38      	ldr	r2, [pc, #224]	; (801029c <xTaskResumeAll+0x118>)
 80101bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101be:	4b37      	ldr	r3, [pc, #220]	; (801029c <xTaskResumeAll+0x118>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d162      	bne.n	801028c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80101c6:	4b36      	ldr	r3, [pc, #216]	; (80102a0 <xTaskResumeAll+0x11c>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d05e      	beq.n	801028c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80101ce:	e02f      	b.n	8010230 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101d0:	4b34      	ldr	r3, [pc, #208]	; (80102a4 <xTaskResumeAll+0x120>)
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	3318      	adds	r3, #24
 80101dc:	4618      	mov	r0, r3
 80101de:	f7ff f849 	bl	800f274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	3304      	adds	r3, #4
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7ff f844 	bl	800f274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101f0:	4b2d      	ldr	r3, [pc, #180]	; (80102a8 <xTaskResumeAll+0x124>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d903      	bls.n	8010200 <xTaskResumeAll+0x7c>
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101fc:	4a2a      	ldr	r2, [pc, #168]	; (80102a8 <xTaskResumeAll+0x124>)
 80101fe:	6013      	str	r3, [r2, #0]
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010204:	4613      	mov	r3, r2
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	4413      	add	r3, r2
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	4a27      	ldr	r2, [pc, #156]	; (80102ac <xTaskResumeAll+0x128>)
 801020e:	441a      	add	r2, r3
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	3304      	adds	r3, #4
 8010214:	4619      	mov	r1, r3
 8010216:	4610      	mov	r0, r2
 8010218:	f7fe ffcf 	bl	800f1ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010220:	4b23      	ldr	r3, [pc, #140]	; (80102b0 <xTaskResumeAll+0x12c>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010226:	429a      	cmp	r2, r3
 8010228:	d302      	bcc.n	8010230 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801022a:	4b22      	ldr	r3, [pc, #136]	; (80102b4 <xTaskResumeAll+0x130>)
 801022c:	2201      	movs	r2, #1
 801022e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010230:	4b1c      	ldr	r3, [pc, #112]	; (80102a4 <xTaskResumeAll+0x120>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d1cb      	bne.n	80101d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d001      	beq.n	8010242 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801023e:	f000 fb8d 	bl	801095c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010242:	4b1d      	ldr	r3, [pc, #116]	; (80102b8 <xTaskResumeAll+0x134>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d010      	beq.n	8010270 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801024e:	f000 f847 	bl	80102e0 <xTaskIncrementTick>
 8010252:	4603      	mov	r3, r0
 8010254:	2b00      	cmp	r3, #0
 8010256:	d002      	beq.n	801025e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010258:	4b16      	ldr	r3, [pc, #88]	; (80102b4 <xTaskResumeAll+0x130>)
 801025a:	2201      	movs	r2, #1
 801025c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	3b01      	subs	r3, #1
 8010262:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d1f1      	bne.n	801024e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801026a:	4b13      	ldr	r3, [pc, #76]	; (80102b8 <xTaskResumeAll+0x134>)
 801026c:	2200      	movs	r2, #0
 801026e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010270:	4b10      	ldr	r3, [pc, #64]	; (80102b4 <xTaskResumeAll+0x130>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d009      	beq.n	801028c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010278:	2301      	movs	r3, #1
 801027a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801027c:	4b0f      	ldr	r3, [pc, #60]	; (80102bc <xTaskResumeAll+0x138>)
 801027e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010282:	601a      	str	r2, [r3, #0]
 8010284:	f3bf 8f4f 	dsb	sy
 8010288:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801028c:	f001 f912 	bl	80114b4 <vPortExitCritical>

	return xAlreadyYielded;
 8010290:	68bb      	ldr	r3, [r7, #8]
}
 8010292:	4618      	mov	r0, r3
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	24001888 	.word	0x24001888
 80102a0:	24001860 	.word	0x24001860
 80102a4:	24001820 	.word	0x24001820
 80102a8:	24001868 	.word	0x24001868
 80102ac:	24001390 	.word	0x24001390
 80102b0:	2400138c 	.word	0x2400138c
 80102b4:	24001874 	.word	0x24001874
 80102b8:	24001870 	.word	0x24001870
 80102bc:	e000ed04 	.word	0xe000ed04

080102c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80102c6:	4b05      	ldr	r3, [pc, #20]	; (80102dc <xTaskGetTickCount+0x1c>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80102cc:	687b      	ldr	r3, [r7, #4]
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	370c      	adds	r7, #12
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop
 80102dc:	24001864 	.word	0x24001864

080102e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b086      	sub	sp, #24
 80102e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80102e6:	2300      	movs	r3, #0
 80102e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102ea:	4b4f      	ldr	r3, [pc, #316]	; (8010428 <xTaskIncrementTick+0x148>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	f040 808f 	bne.w	8010412 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80102f4:	4b4d      	ldr	r3, [pc, #308]	; (801042c <xTaskIncrementTick+0x14c>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	3301      	adds	r3, #1
 80102fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80102fc:	4a4b      	ldr	r2, [pc, #300]	; (801042c <xTaskIncrementTick+0x14c>)
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d120      	bne.n	801034a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010308:	4b49      	ldr	r3, [pc, #292]	; (8010430 <xTaskIncrementTick+0x150>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d00a      	beq.n	8010328 <xTaskIncrementTick+0x48>
	__asm volatile
 8010312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010316:	f383 8811 	msr	BASEPRI, r3
 801031a:	f3bf 8f6f 	isb	sy
 801031e:	f3bf 8f4f 	dsb	sy
 8010322:	603b      	str	r3, [r7, #0]
}
 8010324:	bf00      	nop
 8010326:	e7fe      	b.n	8010326 <xTaskIncrementTick+0x46>
 8010328:	4b41      	ldr	r3, [pc, #260]	; (8010430 <xTaskIncrementTick+0x150>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	60fb      	str	r3, [r7, #12]
 801032e:	4b41      	ldr	r3, [pc, #260]	; (8010434 <xTaskIncrementTick+0x154>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	4a3f      	ldr	r2, [pc, #252]	; (8010430 <xTaskIncrementTick+0x150>)
 8010334:	6013      	str	r3, [r2, #0]
 8010336:	4a3f      	ldr	r2, [pc, #252]	; (8010434 <xTaskIncrementTick+0x154>)
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	6013      	str	r3, [r2, #0]
 801033c:	4b3e      	ldr	r3, [pc, #248]	; (8010438 <xTaskIncrementTick+0x158>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	3301      	adds	r3, #1
 8010342:	4a3d      	ldr	r2, [pc, #244]	; (8010438 <xTaskIncrementTick+0x158>)
 8010344:	6013      	str	r3, [r2, #0]
 8010346:	f000 fb09 	bl	801095c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801034a:	4b3c      	ldr	r3, [pc, #240]	; (801043c <xTaskIncrementTick+0x15c>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	693a      	ldr	r2, [r7, #16]
 8010350:	429a      	cmp	r2, r3
 8010352:	d349      	bcc.n	80103e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010354:	4b36      	ldr	r3, [pc, #216]	; (8010430 <xTaskIncrementTick+0x150>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d104      	bne.n	8010368 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801035e:	4b37      	ldr	r3, [pc, #220]	; (801043c <xTaskIncrementTick+0x15c>)
 8010360:	f04f 32ff 	mov.w	r2, #4294967295
 8010364:	601a      	str	r2, [r3, #0]
					break;
 8010366:	e03f      	b.n	80103e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010368:	4b31      	ldr	r3, [pc, #196]	; (8010430 <xTaskIncrementTick+0x150>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	68db      	ldr	r3, [r3, #12]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010378:	693a      	ldr	r2, [r7, #16]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	429a      	cmp	r2, r3
 801037e:	d203      	bcs.n	8010388 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010380:	4a2e      	ldr	r2, [pc, #184]	; (801043c <xTaskIncrementTick+0x15c>)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010386:	e02f      	b.n	80103e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	3304      	adds	r3, #4
 801038c:	4618      	mov	r0, r3
 801038e:	f7fe ff71 	bl	800f274 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010396:	2b00      	cmp	r3, #0
 8010398:	d004      	beq.n	80103a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	3318      	adds	r3, #24
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fe ff68 	bl	800f274 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a8:	4b25      	ldr	r3, [pc, #148]	; (8010440 <xTaskIncrementTick+0x160>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d903      	bls.n	80103b8 <xTaskIncrementTick+0xd8>
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b4:	4a22      	ldr	r2, [pc, #136]	; (8010440 <xTaskIncrementTick+0x160>)
 80103b6:	6013      	str	r3, [r2, #0]
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103bc:	4613      	mov	r3, r2
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	4413      	add	r3, r2
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	4a1f      	ldr	r2, [pc, #124]	; (8010444 <xTaskIncrementTick+0x164>)
 80103c6:	441a      	add	r2, r3
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	3304      	adds	r3, #4
 80103cc:	4619      	mov	r1, r3
 80103ce:	4610      	mov	r0, r2
 80103d0:	f7fe fef3 	bl	800f1ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103d8:	4b1b      	ldr	r3, [pc, #108]	; (8010448 <xTaskIncrementTick+0x168>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103de:	429a      	cmp	r2, r3
 80103e0:	d3b8      	bcc.n	8010354 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80103e2:	2301      	movs	r3, #1
 80103e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103e6:	e7b5      	b.n	8010354 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80103e8:	4b17      	ldr	r3, [pc, #92]	; (8010448 <xTaskIncrementTick+0x168>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ee:	4915      	ldr	r1, [pc, #84]	; (8010444 <xTaskIncrementTick+0x164>)
 80103f0:	4613      	mov	r3, r2
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	4413      	add	r3, r2
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	440b      	add	r3, r1
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	d901      	bls.n	8010404 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010400:	2301      	movs	r3, #1
 8010402:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010404:	4b11      	ldr	r3, [pc, #68]	; (801044c <xTaskIncrementTick+0x16c>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d007      	beq.n	801041c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801040c:	2301      	movs	r3, #1
 801040e:	617b      	str	r3, [r7, #20]
 8010410:	e004      	b.n	801041c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010412:	4b0f      	ldr	r3, [pc, #60]	; (8010450 <xTaskIncrementTick+0x170>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	3301      	adds	r3, #1
 8010418:	4a0d      	ldr	r2, [pc, #52]	; (8010450 <xTaskIncrementTick+0x170>)
 801041a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801041c:	697b      	ldr	r3, [r7, #20]
}
 801041e:	4618      	mov	r0, r3
 8010420:	3718      	adds	r7, #24
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
 8010426:	bf00      	nop
 8010428:	24001888 	.word	0x24001888
 801042c:	24001864 	.word	0x24001864
 8010430:	24001818 	.word	0x24001818
 8010434:	2400181c 	.word	0x2400181c
 8010438:	24001878 	.word	0x24001878
 801043c:	24001880 	.word	0x24001880
 8010440:	24001868 	.word	0x24001868
 8010444:	24001390 	.word	0x24001390
 8010448:	2400138c 	.word	0x2400138c
 801044c:	24001874 	.word	0x24001874
 8010450:	24001870 	.word	0x24001870

08010454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b084      	sub	sp, #16
 8010458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801045a:	4b3e      	ldr	r3, [pc, #248]	; (8010554 <vTaskSwitchContext+0x100>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d003      	beq.n	801046a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010462:	4b3d      	ldr	r3, [pc, #244]	; (8010558 <vTaskSwitchContext+0x104>)
 8010464:	2201      	movs	r2, #1
 8010466:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010468:	e070      	b.n	801054c <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 801046a:	4b3b      	ldr	r3, [pc, #236]	; (8010558 <vTaskSwitchContext+0x104>)
 801046c:	2200      	movs	r2, #0
 801046e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010470:	f7f0 fd3b 	bl	8000eea <getRunTimeCounterValue>
 8010474:	4603      	mov	r3, r0
 8010476:	4a39      	ldr	r2, [pc, #228]	; (801055c <vTaskSwitchContext+0x108>)
 8010478:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801047a:	4b38      	ldr	r3, [pc, #224]	; (801055c <vTaskSwitchContext+0x108>)
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	4b38      	ldr	r3, [pc, #224]	; (8010560 <vTaskSwitchContext+0x10c>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	429a      	cmp	r2, r3
 8010484:	d909      	bls.n	801049a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010486:	4b37      	ldr	r3, [pc, #220]	; (8010564 <vTaskSwitchContext+0x110>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801048c:	4a33      	ldr	r2, [pc, #204]	; (801055c <vTaskSwitchContext+0x108>)
 801048e:	6810      	ldr	r0, [r2, #0]
 8010490:	4a33      	ldr	r2, [pc, #204]	; (8010560 <vTaskSwitchContext+0x10c>)
 8010492:	6812      	ldr	r2, [r2, #0]
 8010494:	1a82      	subs	r2, r0, r2
 8010496:	440a      	add	r2, r1
 8010498:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 801049a:	4b30      	ldr	r3, [pc, #192]	; (801055c <vTaskSwitchContext+0x108>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4a30      	ldr	r2, [pc, #192]	; (8010560 <vTaskSwitchContext+0x10c>)
 80104a0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80104a2:	4b30      	ldr	r3, [pc, #192]	; (8010564 <vTaskSwitchContext+0x110>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	4b2e      	ldr	r3, [pc, #184]	; (8010564 <vTaskSwitchContext+0x110>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d808      	bhi.n	80104c4 <vTaskSwitchContext+0x70>
 80104b2:	4b2c      	ldr	r3, [pc, #176]	; (8010564 <vTaskSwitchContext+0x110>)
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	4b2b      	ldr	r3, [pc, #172]	; (8010564 <vTaskSwitchContext+0x110>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	3334      	adds	r3, #52	; 0x34
 80104bc:	4619      	mov	r1, r3
 80104be:	4610      	mov	r0, r2
 80104c0:	f7f0 fd22 	bl	8000f08 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104c4:	4b28      	ldr	r3, [pc, #160]	; (8010568 <vTaskSwitchContext+0x114>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	60fb      	str	r3, [r7, #12]
 80104ca:	e010      	b.n	80104ee <vTaskSwitchContext+0x9a>
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d10a      	bne.n	80104e8 <vTaskSwitchContext+0x94>
	__asm volatile
 80104d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d6:	f383 8811 	msr	BASEPRI, r3
 80104da:	f3bf 8f6f 	isb	sy
 80104de:	f3bf 8f4f 	dsb	sy
 80104e2:	607b      	str	r3, [r7, #4]
}
 80104e4:	bf00      	nop
 80104e6:	e7fe      	b.n	80104e6 <vTaskSwitchContext+0x92>
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	3b01      	subs	r3, #1
 80104ec:	60fb      	str	r3, [r7, #12]
 80104ee:	491f      	ldr	r1, [pc, #124]	; (801056c <vTaskSwitchContext+0x118>)
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	4613      	mov	r3, r2
 80104f4:	009b      	lsls	r3, r3, #2
 80104f6:	4413      	add	r3, r2
 80104f8:	009b      	lsls	r3, r3, #2
 80104fa:	440b      	add	r3, r1
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d0e4      	beq.n	80104cc <vTaskSwitchContext+0x78>
 8010502:	68fa      	ldr	r2, [r7, #12]
 8010504:	4613      	mov	r3, r2
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	4413      	add	r3, r2
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	4a17      	ldr	r2, [pc, #92]	; (801056c <vTaskSwitchContext+0x118>)
 801050e:	4413      	add	r3, r2
 8010510:	60bb      	str	r3, [r7, #8]
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	685a      	ldr	r2, [r3, #4]
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	605a      	str	r2, [r3, #4]
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	685a      	ldr	r2, [r3, #4]
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	3308      	adds	r3, #8
 8010524:	429a      	cmp	r2, r3
 8010526:	d104      	bne.n	8010532 <vTaskSwitchContext+0xde>
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	685b      	ldr	r3, [r3, #4]
 801052c:	685a      	ldr	r2, [r3, #4]
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	605a      	str	r2, [r3, #4]
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	68db      	ldr	r3, [r3, #12]
 8010538:	4a0a      	ldr	r2, [pc, #40]	; (8010564 <vTaskSwitchContext+0x110>)
 801053a:	6013      	str	r3, [r2, #0]
 801053c:	4a0a      	ldr	r2, [pc, #40]	; (8010568 <vTaskSwitchContext+0x114>)
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010542:	4b08      	ldr	r3, [pc, #32]	; (8010564 <vTaskSwitchContext+0x110>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	335c      	adds	r3, #92	; 0x5c
 8010548:	4a09      	ldr	r2, [pc, #36]	; (8010570 <vTaskSwitchContext+0x11c>)
 801054a:	6013      	str	r3, [r2, #0]
}
 801054c:	bf00      	nop
 801054e:	3710      	adds	r7, #16
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}
 8010554:	24001888 	.word	0x24001888
 8010558:	24001874 	.word	0x24001874
 801055c:	24001890 	.word	0x24001890
 8010560:	2400188c 	.word	0x2400188c
 8010564:	2400138c 	.word	0x2400138c
 8010568:	24001868 	.word	0x24001868
 801056c:	24001390 	.word	0x24001390
 8010570:	24000014 	.word	0x24000014

08010574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b084      	sub	sp, #16
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d10a      	bne.n	801059a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010588:	f383 8811 	msr	BASEPRI, r3
 801058c:	f3bf 8f6f 	isb	sy
 8010590:	f3bf 8f4f 	dsb	sy
 8010594:	60fb      	str	r3, [r7, #12]
}
 8010596:	bf00      	nop
 8010598:	e7fe      	b.n	8010598 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801059a:	4b07      	ldr	r3, [pc, #28]	; (80105b8 <vTaskPlaceOnEventList+0x44>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	3318      	adds	r3, #24
 80105a0:	4619      	mov	r1, r3
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f7fe fe2d 	bl	800f202 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80105a8:	2101      	movs	r1, #1
 80105aa:	6838      	ldr	r0, [r7, #0]
 80105ac:	f000 fa82 	bl	8010ab4 <prvAddCurrentTaskToDelayedList>
}
 80105b0:	bf00      	nop
 80105b2:	3710      	adds	r7, #16
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	2400138c 	.word	0x2400138c

080105bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b086      	sub	sp, #24
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d10a      	bne.n	80105e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80105ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d2:	f383 8811 	msr	BASEPRI, r3
 80105d6:	f3bf 8f6f 	isb	sy
 80105da:	f3bf 8f4f 	dsb	sy
 80105de:	617b      	str	r3, [r7, #20]
}
 80105e0:	bf00      	nop
 80105e2:	e7fe      	b.n	80105e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80105e4:	4b0a      	ldr	r3, [pc, #40]	; (8010610 <vTaskPlaceOnEventListRestricted+0x54>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	3318      	adds	r3, #24
 80105ea:	4619      	mov	r1, r3
 80105ec:	68f8      	ldr	r0, [r7, #12]
 80105ee:	f7fe fde4 	bl	800f1ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d002      	beq.n	80105fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80105f8:	f04f 33ff 	mov.w	r3, #4294967295
 80105fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80105fe:	6879      	ldr	r1, [r7, #4]
 8010600:	68b8      	ldr	r0, [r7, #8]
 8010602:	f000 fa57 	bl	8010ab4 <prvAddCurrentTaskToDelayedList>
	}
 8010606:	bf00      	nop
 8010608:	3718      	adds	r7, #24
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	2400138c 	.word	0x2400138c

08010614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	68db      	ldr	r3, [r3, #12]
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d10a      	bne.n	8010640 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801062a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062e:	f383 8811 	msr	BASEPRI, r3
 8010632:	f3bf 8f6f 	isb	sy
 8010636:	f3bf 8f4f 	dsb	sy
 801063a:	60fb      	str	r3, [r7, #12]
}
 801063c:	bf00      	nop
 801063e:	e7fe      	b.n	801063e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	3318      	adds	r3, #24
 8010644:	4618      	mov	r0, r3
 8010646:	f7fe fe15 	bl	800f274 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801064a:	4b1e      	ldr	r3, [pc, #120]	; (80106c4 <xTaskRemoveFromEventList+0xb0>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d11d      	bne.n	801068e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	3304      	adds	r3, #4
 8010656:	4618      	mov	r0, r3
 8010658:	f7fe fe0c 	bl	800f274 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010660:	4b19      	ldr	r3, [pc, #100]	; (80106c8 <xTaskRemoveFromEventList+0xb4>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	429a      	cmp	r2, r3
 8010666:	d903      	bls.n	8010670 <xTaskRemoveFromEventList+0x5c>
 8010668:	693b      	ldr	r3, [r7, #16]
 801066a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801066c:	4a16      	ldr	r2, [pc, #88]	; (80106c8 <xTaskRemoveFromEventList+0xb4>)
 801066e:	6013      	str	r3, [r2, #0]
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010674:	4613      	mov	r3, r2
 8010676:	009b      	lsls	r3, r3, #2
 8010678:	4413      	add	r3, r2
 801067a:	009b      	lsls	r3, r3, #2
 801067c:	4a13      	ldr	r2, [pc, #76]	; (80106cc <xTaskRemoveFromEventList+0xb8>)
 801067e:	441a      	add	r2, r3
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	3304      	adds	r3, #4
 8010684:	4619      	mov	r1, r3
 8010686:	4610      	mov	r0, r2
 8010688:	f7fe fd97 	bl	800f1ba <vListInsertEnd>
 801068c:	e005      	b.n	801069a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	3318      	adds	r3, #24
 8010692:	4619      	mov	r1, r3
 8010694:	480e      	ldr	r0, [pc, #56]	; (80106d0 <xTaskRemoveFromEventList+0xbc>)
 8010696:	f7fe fd90 	bl	800f1ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801069e:	4b0d      	ldr	r3, [pc, #52]	; (80106d4 <xTaskRemoveFromEventList+0xc0>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d905      	bls.n	80106b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80106a8:	2301      	movs	r3, #1
 80106aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80106ac:	4b0a      	ldr	r3, [pc, #40]	; (80106d8 <xTaskRemoveFromEventList+0xc4>)
 80106ae:	2201      	movs	r2, #1
 80106b0:	601a      	str	r2, [r3, #0]
 80106b2:	e001      	b.n	80106b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80106b4:	2300      	movs	r3, #0
 80106b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80106b8:	697b      	ldr	r3, [r7, #20]
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3718      	adds	r7, #24
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
 80106c2:	bf00      	nop
 80106c4:	24001888 	.word	0x24001888
 80106c8:	24001868 	.word	0x24001868
 80106cc:	24001390 	.word	0x24001390
 80106d0:	24001820 	.word	0x24001820
 80106d4:	2400138c 	.word	0x2400138c
 80106d8:	24001874 	.word	0x24001874

080106dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80106dc:	b480      	push	{r7}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80106e4:	4b06      	ldr	r3, [pc, #24]	; (8010700 <vTaskInternalSetTimeOutState+0x24>)
 80106e6:	681a      	ldr	r2, [r3, #0]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80106ec:	4b05      	ldr	r3, [pc, #20]	; (8010704 <vTaskInternalSetTimeOutState+0x28>)
 80106ee:	681a      	ldr	r2, [r3, #0]
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	605a      	str	r2, [r3, #4]
}
 80106f4:	bf00      	nop
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr
 8010700:	24001878 	.word	0x24001878
 8010704:	24001864 	.word	0x24001864

08010708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b088      	sub	sp, #32
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d10a      	bne.n	801072e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071c:	f383 8811 	msr	BASEPRI, r3
 8010720:	f3bf 8f6f 	isb	sy
 8010724:	f3bf 8f4f 	dsb	sy
 8010728:	613b      	str	r3, [r7, #16]
}
 801072a:	bf00      	nop
 801072c:	e7fe      	b.n	801072c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d10a      	bne.n	801074a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010738:	f383 8811 	msr	BASEPRI, r3
 801073c:	f3bf 8f6f 	isb	sy
 8010740:	f3bf 8f4f 	dsb	sy
 8010744:	60fb      	str	r3, [r7, #12]
}
 8010746:	bf00      	nop
 8010748:	e7fe      	b.n	8010748 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801074a:	f000 fe83 	bl	8011454 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801074e:	4b1d      	ldr	r3, [pc, #116]	; (80107c4 <xTaskCheckForTimeOut+0xbc>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	69ba      	ldr	r2, [r7, #24]
 801075a:	1ad3      	subs	r3, r2, r3
 801075c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010766:	d102      	bne.n	801076e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010768:	2300      	movs	r3, #0
 801076a:	61fb      	str	r3, [r7, #28]
 801076c:	e023      	b.n	80107b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	4b15      	ldr	r3, [pc, #84]	; (80107c8 <xTaskCheckForTimeOut+0xc0>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	429a      	cmp	r2, r3
 8010778:	d007      	beq.n	801078a <xTaskCheckForTimeOut+0x82>
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	69ba      	ldr	r2, [r7, #24]
 8010780:	429a      	cmp	r2, r3
 8010782:	d302      	bcc.n	801078a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010784:	2301      	movs	r3, #1
 8010786:	61fb      	str	r3, [r7, #28]
 8010788:	e015      	b.n	80107b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	697a      	ldr	r2, [r7, #20]
 8010790:	429a      	cmp	r2, r3
 8010792:	d20b      	bcs.n	80107ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	681a      	ldr	r2, [r3, #0]
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	1ad2      	subs	r2, r2, r3
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f7ff ff9b 	bl	80106dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80107a6:	2300      	movs	r3, #0
 80107a8:	61fb      	str	r3, [r7, #28]
 80107aa:	e004      	b.n	80107b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	2200      	movs	r2, #0
 80107b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80107b2:	2301      	movs	r3, #1
 80107b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80107b6:	f000 fe7d 	bl	80114b4 <vPortExitCritical>

	return xReturn;
 80107ba:	69fb      	ldr	r3, [r7, #28]
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3720      	adds	r7, #32
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	24001864 	.word	0x24001864
 80107c8:	24001878 	.word	0x24001878

080107cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80107cc:	b480      	push	{r7}
 80107ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80107d0:	4b03      	ldr	r3, [pc, #12]	; (80107e0 <vTaskMissedYield+0x14>)
 80107d2:	2201      	movs	r2, #1
 80107d4:	601a      	str	r2, [r3, #0]
}
 80107d6:	bf00      	nop
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr
 80107e0:	24001874 	.word	0x24001874

080107e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80107ec:	f000 f854 	bl	8010898 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80107f0:	4b07      	ldr	r3, [pc, #28]	; (8010810 <prvIdleTask+0x2c>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d907      	bls.n	8010808 <prvIdleTask+0x24>
			{
				taskYIELD();
 80107f8:	4b06      	ldr	r3, [pc, #24]	; (8010814 <prvIdleTask+0x30>)
 80107fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107fe:	601a      	str	r2, [r3, #0]
 8010800:	f3bf 8f4f 	dsb	sy
 8010804:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8010808:	f7f0 fb77 	bl	8000efa <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801080c:	e7ee      	b.n	80107ec <prvIdleTask+0x8>
 801080e:	bf00      	nop
 8010810:	24001390 	.word	0x24001390
 8010814:	e000ed04 	.word	0xe000ed04

08010818 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801081e:	2300      	movs	r3, #0
 8010820:	607b      	str	r3, [r7, #4]
 8010822:	e00c      	b.n	801083e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	4613      	mov	r3, r2
 8010828:	009b      	lsls	r3, r3, #2
 801082a:	4413      	add	r3, r2
 801082c:	009b      	lsls	r3, r3, #2
 801082e:	4a12      	ldr	r2, [pc, #72]	; (8010878 <prvInitialiseTaskLists+0x60>)
 8010830:	4413      	add	r3, r2
 8010832:	4618      	mov	r0, r3
 8010834:	f7fe fc94 	bl	800f160 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	3301      	adds	r3, #1
 801083c:	607b      	str	r3, [r7, #4]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b37      	cmp	r3, #55	; 0x37
 8010842:	d9ef      	bls.n	8010824 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010844:	480d      	ldr	r0, [pc, #52]	; (801087c <prvInitialiseTaskLists+0x64>)
 8010846:	f7fe fc8b 	bl	800f160 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801084a:	480d      	ldr	r0, [pc, #52]	; (8010880 <prvInitialiseTaskLists+0x68>)
 801084c:	f7fe fc88 	bl	800f160 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010850:	480c      	ldr	r0, [pc, #48]	; (8010884 <prvInitialiseTaskLists+0x6c>)
 8010852:	f7fe fc85 	bl	800f160 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010856:	480c      	ldr	r0, [pc, #48]	; (8010888 <prvInitialiseTaskLists+0x70>)
 8010858:	f7fe fc82 	bl	800f160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801085c:	480b      	ldr	r0, [pc, #44]	; (801088c <prvInitialiseTaskLists+0x74>)
 801085e:	f7fe fc7f 	bl	800f160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010862:	4b0b      	ldr	r3, [pc, #44]	; (8010890 <prvInitialiseTaskLists+0x78>)
 8010864:	4a05      	ldr	r2, [pc, #20]	; (801087c <prvInitialiseTaskLists+0x64>)
 8010866:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010868:	4b0a      	ldr	r3, [pc, #40]	; (8010894 <prvInitialiseTaskLists+0x7c>)
 801086a:	4a05      	ldr	r2, [pc, #20]	; (8010880 <prvInitialiseTaskLists+0x68>)
 801086c:	601a      	str	r2, [r3, #0]
}
 801086e:	bf00      	nop
 8010870:	3708      	adds	r7, #8
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	24001390 	.word	0x24001390
 801087c:	240017f0 	.word	0x240017f0
 8010880:	24001804 	.word	0x24001804
 8010884:	24001820 	.word	0x24001820
 8010888:	24001834 	.word	0x24001834
 801088c:	2400184c 	.word	0x2400184c
 8010890:	24001818 	.word	0x24001818
 8010894:	2400181c 	.word	0x2400181c

08010898 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801089e:	e019      	b.n	80108d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80108a0:	f000 fdd8 	bl	8011454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108a4:	4b10      	ldr	r3, [pc, #64]	; (80108e8 <prvCheckTasksWaitingTermination+0x50>)
 80108a6:	68db      	ldr	r3, [r3, #12]
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	3304      	adds	r3, #4
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7fe fcdf 	bl	800f274 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80108b6:	4b0d      	ldr	r3, [pc, #52]	; (80108ec <prvCheckTasksWaitingTermination+0x54>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	3b01      	subs	r3, #1
 80108bc:	4a0b      	ldr	r2, [pc, #44]	; (80108ec <prvCheckTasksWaitingTermination+0x54>)
 80108be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80108c0:	4b0b      	ldr	r3, [pc, #44]	; (80108f0 <prvCheckTasksWaitingTermination+0x58>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	3b01      	subs	r3, #1
 80108c6:	4a0a      	ldr	r2, [pc, #40]	; (80108f0 <prvCheckTasksWaitingTermination+0x58>)
 80108c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80108ca:	f000 fdf3 	bl	80114b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f000 f810 	bl	80108f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80108d4:	4b06      	ldr	r3, [pc, #24]	; (80108f0 <prvCheckTasksWaitingTermination+0x58>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d1e1      	bne.n	80108a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80108dc:	bf00      	nop
 80108de:	bf00      	nop
 80108e0:	3708      	adds	r7, #8
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	24001834 	.word	0x24001834
 80108ec:	24001860 	.word	0x24001860
 80108f0:	24001848 	.word	0x24001848

080108f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	335c      	adds	r3, #92	; 0x5c
 8010900:	4618      	mov	r0, r3
 8010902:	f000 ff71 	bl	80117e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 801090c:	2b00      	cmp	r3, #0
 801090e:	d108      	bne.n	8010922 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010914:	4618      	mov	r0, r3
 8010916:	f000 ff05 	bl	8011724 <vPortFree>
				vPortFree( pxTCB );
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 ff02 	bl	8011724 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010920:	e018      	b.n	8010954 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8010928:	2b01      	cmp	r3, #1
 801092a:	d103      	bne.n	8010934 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f000 fef9 	bl	8011724 <vPortFree>
	}
 8010932:	e00f      	b.n	8010954 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 801093a:	2b02      	cmp	r3, #2
 801093c:	d00a      	beq.n	8010954 <prvDeleteTCB+0x60>
	__asm volatile
 801093e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010942:	f383 8811 	msr	BASEPRI, r3
 8010946:	f3bf 8f6f 	isb	sy
 801094a:	f3bf 8f4f 	dsb	sy
 801094e:	60fb      	str	r3, [r7, #12]
}
 8010950:	bf00      	nop
 8010952:	e7fe      	b.n	8010952 <prvDeleteTCB+0x5e>
	}
 8010954:	bf00      	nop
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801095c:	b480      	push	{r7}
 801095e:	b083      	sub	sp, #12
 8010960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010962:	4b0c      	ldr	r3, [pc, #48]	; (8010994 <prvResetNextTaskUnblockTime+0x38>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d104      	bne.n	8010976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801096c:	4b0a      	ldr	r3, [pc, #40]	; (8010998 <prvResetNextTaskUnblockTime+0x3c>)
 801096e:	f04f 32ff 	mov.w	r2, #4294967295
 8010972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010974:	e008      	b.n	8010988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010976:	4b07      	ldr	r3, [pc, #28]	; (8010994 <prvResetNextTaskUnblockTime+0x38>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	68db      	ldr	r3, [r3, #12]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	4a04      	ldr	r2, [pc, #16]	; (8010998 <prvResetNextTaskUnblockTime+0x3c>)
 8010986:	6013      	str	r3, [r2, #0]
}
 8010988:	bf00      	nop
 801098a:	370c      	adds	r7, #12
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr
 8010994:	24001818 	.word	0x24001818
 8010998:	24001880 	.word	0x24001880

0801099c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801099c:	b480      	push	{r7}
 801099e:	b083      	sub	sp, #12
 80109a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80109a2:	4b0b      	ldr	r3, [pc, #44]	; (80109d0 <xTaskGetSchedulerState+0x34>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d102      	bne.n	80109b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80109aa:	2301      	movs	r3, #1
 80109ac:	607b      	str	r3, [r7, #4]
 80109ae:	e008      	b.n	80109c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109b0:	4b08      	ldr	r3, [pc, #32]	; (80109d4 <xTaskGetSchedulerState+0x38>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d102      	bne.n	80109be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80109b8:	2302      	movs	r3, #2
 80109ba:	607b      	str	r3, [r7, #4]
 80109bc:	e001      	b.n	80109c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80109be:	2300      	movs	r3, #0
 80109c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80109c2:	687b      	ldr	r3, [r7, #4]
	}
 80109c4:	4618      	mov	r0, r3
 80109c6:	370c      	adds	r7, #12
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr
 80109d0:	2400186c 	.word	0x2400186c
 80109d4:	24001888 	.word	0x24001888

080109d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b086      	sub	sp, #24
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80109e4:	2300      	movs	r3, #0
 80109e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d056      	beq.n	8010a9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80109ee:	4b2e      	ldr	r3, [pc, #184]	; (8010aa8 <xTaskPriorityDisinherit+0xd0>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	693a      	ldr	r2, [r7, #16]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d00a      	beq.n	8010a0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80109f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fc:	f383 8811 	msr	BASEPRI, r3
 8010a00:	f3bf 8f6f 	isb	sy
 8010a04:	f3bf 8f4f 	dsb	sy
 8010a08:	60fb      	str	r3, [r7, #12]
}
 8010a0a:	bf00      	nop
 8010a0c:	e7fe      	b.n	8010a0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d10a      	bne.n	8010a2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1a:	f383 8811 	msr	BASEPRI, r3
 8010a1e:	f3bf 8f6f 	isb	sy
 8010a22:	f3bf 8f4f 	dsb	sy
 8010a26:	60bb      	str	r3, [r7, #8]
}
 8010a28:	bf00      	nop
 8010a2a:	e7fe      	b.n	8010a2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a30:	1e5a      	subs	r2, r3, #1
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d02c      	beq.n	8010a9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d128      	bne.n	8010a9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	3304      	adds	r3, #4
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fe fc10 	bl	800f274 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a6c:	4b0f      	ldr	r3, [pc, #60]	; (8010aac <xTaskPriorityDisinherit+0xd4>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d903      	bls.n	8010a7c <xTaskPriorityDisinherit+0xa4>
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a78:	4a0c      	ldr	r2, [pc, #48]	; (8010aac <xTaskPriorityDisinherit+0xd4>)
 8010a7a:	6013      	str	r3, [r2, #0]
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a80:	4613      	mov	r3, r2
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	4413      	add	r3, r2
 8010a86:	009b      	lsls	r3, r3, #2
 8010a88:	4a09      	ldr	r2, [pc, #36]	; (8010ab0 <xTaskPriorityDisinherit+0xd8>)
 8010a8a:	441a      	add	r2, r3
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	3304      	adds	r3, #4
 8010a90:	4619      	mov	r1, r3
 8010a92:	4610      	mov	r0, r2
 8010a94:	f7fe fb91 	bl	800f1ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010a9c:	697b      	ldr	r3, [r7, #20]
	}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3718      	adds	r7, #24
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	2400138c 	.word	0x2400138c
 8010aac:	24001868 	.word	0x24001868
 8010ab0:	24001390 	.word	0x24001390

08010ab4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010abe:	4b21      	ldr	r3, [pc, #132]	; (8010b44 <prvAddCurrentTaskToDelayedList+0x90>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ac4:	4b20      	ldr	r3, [pc, #128]	; (8010b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	3304      	adds	r3, #4
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fe fbd2 	bl	800f274 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ad6:	d10a      	bne.n	8010aee <prvAddCurrentTaskToDelayedList+0x3a>
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d007      	beq.n	8010aee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ade:	4b1a      	ldr	r3, [pc, #104]	; (8010b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	3304      	adds	r3, #4
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	4819      	ldr	r0, [pc, #100]	; (8010b4c <prvAddCurrentTaskToDelayedList+0x98>)
 8010ae8:	f7fe fb67 	bl	800f1ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010aec:	e026      	b.n	8010b3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010aee:	68fa      	ldr	r2, [r7, #12]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	4413      	add	r3, r2
 8010af4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010af6:	4b14      	ldr	r3, [pc, #80]	; (8010b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	68ba      	ldr	r2, [r7, #8]
 8010afc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010afe:	68ba      	ldr	r2, [r7, #8]
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d209      	bcs.n	8010b1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b06:	4b12      	ldr	r3, [pc, #72]	; (8010b50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	4b0f      	ldr	r3, [pc, #60]	; (8010b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	3304      	adds	r3, #4
 8010b10:	4619      	mov	r1, r3
 8010b12:	4610      	mov	r0, r2
 8010b14:	f7fe fb75 	bl	800f202 <vListInsert>
}
 8010b18:	e010      	b.n	8010b3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b1a:	4b0e      	ldr	r3, [pc, #56]	; (8010b54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	4b0a      	ldr	r3, [pc, #40]	; (8010b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	3304      	adds	r3, #4
 8010b24:	4619      	mov	r1, r3
 8010b26:	4610      	mov	r0, r2
 8010b28:	f7fe fb6b 	bl	800f202 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010b2c:	4b0a      	ldr	r3, [pc, #40]	; (8010b58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	68ba      	ldr	r2, [r7, #8]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d202      	bcs.n	8010b3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010b36:	4a08      	ldr	r2, [pc, #32]	; (8010b58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	6013      	str	r3, [r2, #0]
}
 8010b3c:	bf00      	nop
 8010b3e:	3710      	adds	r7, #16
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	24001864 	.word	0x24001864
 8010b48:	2400138c 	.word	0x2400138c
 8010b4c:	2400184c 	.word	0x2400184c
 8010b50:	2400181c 	.word	0x2400181c
 8010b54:	24001818 	.word	0x24001818
 8010b58:	24001880 	.word	0x24001880

08010b5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b08a      	sub	sp, #40	; 0x28
 8010b60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010b62:	2300      	movs	r3, #0
 8010b64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010b66:	f000 fb07 	bl	8011178 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010b6a:	4b1c      	ldr	r3, [pc, #112]	; (8010bdc <xTimerCreateTimerTask+0x80>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d021      	beq.n	8010bb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010b72:	2300      	movs	r3, #0
 8010b74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010b76:	2300      	movs	r3, #0
 8010b78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010b7a:	1d3a      	adds	r2, r7, #4
 8010b7c:	f107 0108 	add.w	r1, r7, #8
 8010b80:	f107 030c 	add.w	r3, r7, #12
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7fe fad1 	bl	800f12c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010b8a:	6879      	ldr	r1, [r7, #4]
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	68fa      	ldr	r2, [r7, #12]
 8010b90:	9202      	str	r2, [sp, #8]
 8010b92:	9301      	str	r3, [sp, #4]
 8010b94:	2302      	movs	r3, #2
 8010b96:	9300      	str	r3, [sp, #0]
 8010b98:	2300      	movs	r3, #0
 8010b9a:	460a      	mov	r2, r1
 8010b9c:	4910      	ldr	r1, [pc, #64]	; (8010be0 <xTimerCreateTimerTask+0x84>)
 8010b9e:	4811      	ldr	r0, [pc, #68]	; (8010be4 <xTimerCreateTimerTask+0x88>)
 8010ba0:	f7ff f87e 	bl	800fca0 <xTaskCreateStatic>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	4a10      	ldr	r2, [pc, #64]	; (8010be8 <xTimerCreateTimerTask+0x8c>)
 8010ba8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010baa:	4b0f      	ldr	r3, [pc, #60]	; (8010be8 <xTimerCreateTimerTask+0x8c>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d001      	beq.n	8010bb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d10a      	bne.n	8010bd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc0:	f383 8811 	msr	BASEPRI, r3
 8010bc4:	f3bf 8f6f 	isb	sy
 8010bc8:	f3bf 8f4f 	dsb	sy
 8010bcc:	613b      	str	r3, [r7, #16]
}
 8010bce:	bf00      	nop
 8010bd0:	e7fe      	b.n	8010bd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010bd2:	697b      	ldr	r3, [r7, #20]
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3718      	adds	r7, #24
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	240018c4 	.word	0x240018c4
 8010be0:	080119f0 	.word	0x080119f0
 8010be4:	08010d21 	.word	0x08010d21
 8010be8:	240018c8 	.word	0x240018c8

08010bec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b08a      	sub	sp, #40	; 0x28
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	60f8      	str	r0, [r7, #12]
 8010bf4:	60b9      	str	r1, [r7, #8]
 8010bf6:	607a      	str	r2, [r7, #4]
 8010bf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d10a      	bne.n	8010c1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c08:	f383 8811 	msr	BASEPRI, r3
 8010c0c:	f3bf 8f6f 	isb	sy
 8010c10:	f3bf 8f4f 	dsb	sy
 8010c14:	623b      	str	r3, [r7, #32]
}
 8010c16:	bf00      	nop
 8010c18:	e7fe      	b.n	8010c18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010c1a:	4b1a      	ldr	r3, [pc, #104]	; (8010c84 <xTimerGenericCommand+0x98>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d02a      	beq.n	8010c78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	2b05      	cmp	r3, #5
 8010c32:	dc18      	bgt.n	8010c66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010c34:	f7ff feb2 	bl	801099c <xTaskGetSchedulerState>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b02      	cmp	r3, #2
 8010c3c:	d109      	bne.n	8010c52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010c3e:	4b11      	ldr	r3, [pc, #68]	; (8010c84 <xTimerGenericCommand+0x98>)
 8010c40:	6818      	ldr	r0, [r3, #0]
 8010c42:	f107 0110 	add.w	r1, r7, #16
 8010c46:	2300      	movs	r3, #0
 8010c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c4a:	f7fe fc41 	bl	800f4d0 <xQueueGenericSend>
 8010c4e:	6278      	str	r0, [r7, #36]	; 0x24
 8010c50:	e012      	b.n	8010c78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010c52:	4b0c      	ldr	r3, [pc, #48]	; (8010c84 <xTimerGenericCommand+0x98>)
 8010c54:	6818      	ldr	r0, [r3, #0]
 8010c56:	f107 0110 	add.w	r1, r7, #16
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f7fe fc37 	bl	800f4d0 <xQueueGenericSend>
 8010c62:	6278      	str	r0, [r7, #36]	; 0x24
 8010c64:	e008      	b.n	8010c78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010c66:	4b07      	ldr	r3, [pc, #28]	; (8010c84 <xTimerGenericCommand+0x98>)
 8010c68:	6818      	ldr	r0, [r3, #0]
 8010c6a:	f107 0110 	add.w	r1, r7, #16
 8010c6e:	2300      	movs	r3, #0
 8010c70:	683a      	ldr	r2, [r7, #0]
 8010c72:	f7fe fd2b 	bl	800f6cc <xQueueGenericSendFromISR>
 8010c76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3728      	adds	r7, #40	; 0x28
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop
 8010c84:	240018c4 	.word	0x240018c4

08010c88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b088      	sub	sp, #32
 8010c8c:	af02      	add	r7, sp, #8
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c92:	4b22      	ldr	r3, [pc, #136]	; (8010d1c <prvProcessExpiredTimer+0x94>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	68db      	ldr	r3, [r3, #12]
 8010c98:	68db      	ldr	r3, [r3, #12]
 8010c9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	3304      	adds	r3, #4
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7fe fae7 	bl	800f274 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cac:	f003 0304 	and.w	r3, r3, #4
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d022      	beq.n	8010cfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	699a      	ldr	r2, [r3, #24]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	18d1      	adds	r1, r2, r3
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	683a      	ldr	r2, [r7, #0]
 8010cc0:	6978      	ldr	r0, [r7, #20]
 8010cc2:	f000 f8d1 	bl	8010e68 <prvInsertTimerInActiveList>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d01f      	beq.n	8010d0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ccc:	2300      	movs	r3, #0
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	2100      	movs	r1, #0
 8010cd6:	6978      	ldr	r0, [r7, #20]
 8010cd8:	f7ff ff88 	bl	8010bec <xTimerGenericCommand>
 8010cdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d113      	bne.n	8010d0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce8:	f383 8811 	msr	BASEPRI, r3
 8010cec:	f3bf 8f6f 	isb	sy
 8010cf0:	f3bf 8f4f 	dsb	sy
 8010cf4:	60fb      	str	r3, [r7, #12]
}
 8010cf6:	bf00      	nop
 8010cf8:	e7fe      	b.n	8010cf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d00:	f023 0301 	bic.w	r3, r3, #1
 8010d04:	b2da      	uxtb	r2, r3
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	6a1b      	ldr	r3, [r3, #32]
 8010d10:	6978      	ldr	r0, [r7, #20]
 8010d12:	4798      	blx	r3
}
 8010d14:	bf00      	nop
 8010d16:	3718      	adds	r7, #24
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	240018bc 	.word	0x240018bc

08010d20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b084      	sub	sp, #16
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d28:	f107 0308 	add.w	r3, r7, #8
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f000 f857 	bl	8010de0 <prvGetNextExpireTime>
 8010d32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	4619      	mov	r1, r3
 8010d38:	68f8      	ldr	r0, [r7, #12]
 8010d3a:	f000 f803 	bl	8010d44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010d3e:	f000 f8d5 	bl	8010eec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d42:	e7f1      	b.n	8010d28 <prvTimerTask+0x8>

08010d44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010d4e:	f7ff fa0b 	bl	8010168 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d52:	f107 0308 	add.w	r3, r7, #8
 8010d56:	4618      	mov	r0, r3
 8010d58:	f000 f866 	bl	8010e28 <prvSampleTimeNow>
 8010d5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d130      	bne.n	8010dc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d10a      	bne.n	8010d80 <prvProcessTimerOrBlockTask+0x3c>
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d806      	bhi.n	8010d80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010d72:	f7ff fa07 	bl	8010184 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010d76:	68f9      	ldr	r1, [r7, #12]
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f7ff ff85 	bl	8010c88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010d7e:	e024      	b.n	8010dca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d008      	beq.n	8010d98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010d86:	4b13      	ldr	r3, [pc, #76]	; (8010dd4 <prvProcessTimerOrBlockTask+0x90>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d101      	bne.n	8010d94 <prvProcessTimerOrBlockTask+0x50>
 8010d90:	2301      	movs	r3, #1
 8010d92:	e000      	b.n	8010d96 <prvProcessTimerOrBlockTask+0x52>
 8010d94:	2300      	movs	r3, #0
 8010d96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010d98:	4b0f      	ldr	r3, [pc, #60]	; (8010dd8 <prvProcessTimerOrBlockTask+0x94>)
 8010d9a:	6818      	ldr	r0, [r3, #0]
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	1ad3      	subs	r3, r2, r3
 8010da2:	683a      	ldr	r2, [r7, #0]
 8010da4:	4619      	mov	r1, r3
 8010da6:	f7fe ff47 	bl	800fc38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010daa:	f7ff f9eb 	bl	8010184 <xTaskResumeAll>
 8010dae:	4603      	mov	r3, r0
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d10a      	bne.n	8010dca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010db4:	4b09      	ldr	r3, [pc, #36]	; (8010ddc <prvProcessTimerOrBlockTask+0x98>)
 8010db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dba:	601a      	str	r2, [r3, #0]
 8010dbc:	f3bf 8f4f 	dsb	sy
 8010dc0:	f3bf 8f6f 	isb	sy
}
 8010dc4:	e001      	b.n	8010dca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010dc6:	f7ff f9dd 	bl	8010184 <xTaskResumeAll>
}
 8010dca:	bf00      	nop
 8010dcc:	3710      	adds	r7, #16
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	240018c0 	.word	0x240018c0
 8010dd8:	240018c4 	.word	0x240018c4
 8010ddc:	e000ed04 	.word	0xe000ed04

08010de0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010de0:	b480      	push	{r7}
 8010de2:	b085      	sub	sp, #20
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010de8:	4b0e      	ldr	r3, [pc, #56]	; (8010e24 <prvGetNextExpireTime+0x44>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d101      	bne.n	8010df6 <prvGetNextExpireTime+0x16>
 8010df2:	2201      	movs	r2, #1
 8010df4:	e000      	b.n	8010df8 <prvGetNextExpireTime+0x18>
 8010df6:	2200      	movs	r2, #0
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d105      	bne.n	8010e10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e04:	4b07      	ldr	r3, [pc, #28]	; (8010e24 <prvGetNextExpireTime+0x44>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	68db      	ldr	r3, [r3, #12]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	60fb      	str	r3, [r7, #12]
 8010e0e:	e001      	b.n	8010e14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010e10:	2300      	movs	r3, #0
 8010e12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010e14:	68fb      	ldr	r3, [r7, #12]
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3714      	adds	r7, #20
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr
 8010e22:	bf00      	nop
 8010e24:	240018bc 	.word	0x240018bc

08010e28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b084      	sub	sp, #16
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010e30:	f7ff fa46 	bl	80102c0 <xTaskGetTickCount>
 8010e34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010e36:	4b0b      	ldr	r3, [pc, #44]	; (8010e64 <prvSampleTimeNow+0x3c>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	68fa      	ldr	r2, [r7, #12]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d205      	bcs.n	8010e4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010e40:	f000 f936 	bl	80110b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2201      	movs	r2, #1
 8010e48:	601a      	str	r2, [r3, #0]
 8010e4a:	e002      	b.n	8010e52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010e52:	4a04      	ldr	r2, [pc, #16]	; (8010e64 <prvSampleTimeNow+0x3c>)
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010e58:	68fb      	ldr	r3, [r7, #12]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3710      	adds	r7, #16
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	240018cc 	.word	0x240018cc

08010e68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b086      	sub	sp, #24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	60b9      	str	r1, [r7, #8]
 8010e72:	607a      	str	r2, [r7, #4]
 8010e74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010e76:	2300      	movs	r3, #0
 8010e78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	68ba      	ldr	r2, [r7, #8]
 8010e7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	68fa      	ldr	r2, [r7, #12]
 8010e84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010e86:	68ba      	ldr	r2, [r7, #8]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d812      	bhi.n	8010eb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e8e:	687a      	ldr	r2, [r7, #4]
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	1ad2      	subs	r2, r2, r3
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	699b      	ldr	r3, [r3, #24]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d302      	bcc.n	8010ea2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	617b      	str	r3, [r7, #20]
 8010ea0:	e01b      	b.n	8010eda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010ea2:	4b10      	ldr	r3, [pc, #64]	; (8010ee4 <prvInsertTimerInActiveList+0x7c>)
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	3304      	adds	r3, #4
 8010eaa:	4619      	mov	r1, r3
 8010eac:	4610      	mov	r0, r2
 8010eae:	f7fe f9a8 	bl	800f202 <vListInsert>
 8010eb2:	e012      	b.n	8010eda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	429a      	cmp	r2, r3
 8010eba:	d206      	bcs.n	8010eca <prvInsertTimerInActiveList+0x62>
 8010ebc:	68ba      	ldr	r2, [r7, #8]
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d302      	bcc.n	8010eca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	617b      	str	r3, [r7, #20]
 8010ec8:	e007      	b.n	8010eda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010eca:	4b07      	ldr	r3, [pc, #28]	; (8010ee8 <prvInsertTimerInActiveList+0x80>)
 8010ecc:	681a      	ldr	r2, [r3, #0]
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	3304      	adds	r3, #4
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	4610      	mov	r0, r2
 8010ed6:	f7fe f994 	bl	800f202 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010eda:	697b      	ldr	r3, [r7, #20]
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3718      	adds	r7, #24
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	240018c0 	.word	0x240018c0
 8010ee8:	240018bc 	.word	0x240018bc

08010eec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b08e      	sub	sp, #56	; 0x38
 8010ef0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ef2:	e0ca      	b.n	801108a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	da18      	bge.n	8010f2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010efa:	1d3b      	adds	r3, r7, #4
 8010efc:	3304      	adds	r3, #4
 8010efe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d10a      	bne.n	8010f1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f0a:	f383 8811 	msr	BASEPRI, r3
 8010f0e:	f3bf 8f6f 	isb	sy
 8010f12:	f3bf 8f4f 	dsb	sy
 8010f16:	61fb      	str	r3, [r7, #28]
}
 8010f18:	bf00      	nop
 8010f1a:	e7fe      	b.n	8010f1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f22:	6850      	ldr	r0, [r2, #4]
 8010f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f26:	6892      	ldr	r2, [r2, #8]
 8010f28:	4611      	mov	r1, r2
 8010f2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	f2c0 80aa 	blt.w	8011088 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3a:	695b      	ldr	r3, [r3, #20]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d004      	beq.n	8010f4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f42:	3304      	adds	r3, #4
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7fe f995 	bl	800f274 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f4a:	463b      	mov	r3, r7
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7ff ff6b 	bl	8010e28 <prvSampleTimeNow>
 8010f52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2b09      	cmp	r3, #9
 8010f58:	f200 8097 	bhi.w	801108a <prvProcessReceivedCommands+0x19e>
 8010f5c:	a201      	add	r2, pc, #4	; (adr r2, 8010f64 <prvProcessReceivedCommands+0x78>)
 8010f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f62:	bf00      	nop
 8010f64:	08010f8d 	.word	0x08010f8d
 8010f68:	08010f8d 	.word	0x08010f8d
 8010f6c:	08010f8d 	.word	0x08010f8d
 8010f70:	08011001 	.word	0x08011001
 8010f74:	08011015 	.word	0x08011015
 8010f78:	0801105f 	.word	0x0801105f
 8010f7c:	08010f8d 	.word	0x08010f8d
 8010f80:	08010f8d 	.word	0x08010f8d
 8010f84:	08011001 	.word	0x08011001
 8010f88:	08011015 	.word	0x08011015
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f92:	f043 0301 	orr.w	r3, r3, #1
 8010f96:	b2da      	uxtb	r2, r3
 8010f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010f9e:	68ba      	ldr	r2, [r7, #8]
 8010fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa2:	699b      	ldr	r3, [r3, #24]
 8010fa4:	18d1      	adds	r1, r2, r3
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fac:	f7ff ff5c 	bl	8010e68 <prvInsertTimerInActiveList>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d069      	beq.n	801108a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb8:	6a1b      	ldr	r3, [r3, #32]
 8010fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fc4:	f003 0304 	and.w	r3, r3, #4
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d05e      	beq.n	801108a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010fcc:	68ba      	ldr	r2, [r7, #8]
 8010fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd0:	699b      	ldr	r3, [r3, #24]
 8010fd2:	441a      	add	r2, r3
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	9300      	str	r3, [sp, #0]
 8010fd8:	2300      	movs	r3, #0
 8010fda:	2100      	movs	r1, #0
 8010fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fde:	f7ff fe05 	bl	8010bec <xTimerGenericCommand>
 8010fe2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010fe4:	6a3b      	ldr	r3, [r7, #32]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d14f      	bne.n	801108a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fee:	f383 8811 	msr	BASEPRI, r3
 8010ff2:	f3bf 8f6f 	isb	sy
 8010ff6:	f3bf 8f4f 	dsb	sy
 8010ffa:	61bb      	str	r3, [r7, #24]
}
 8010ffc:	bf00      	nop
 8010ffe:	e7fe      	b.n	8010ffe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011006:	f023 0301 	bic.w	r3, r3, #1
 801100a:	b2da      	uxtb	r2, r3
 801100c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801100e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011012:	e03a      	b.n	801108a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801101a:	f043 0301 	orr.w	r3, r3, #1
 801101e:	b2da      	uxtb	r2, r3
 8011020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011026:	68ba      	ldr	r2, [r7, #8]
 8011028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102e:	699b      	ldr	r3, [r3, #24]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d10a      	bne.n	801104a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011038:	f383 8811 	msr	BASEPRI, r3
 801103c:	f3bf 8f6f 	isb	sy
 8011040:	f3bf 8f4f 	dsb	sy
 8011044:	617b      	str	r3, [r7, #20]
}
 8011046:	bf00      	nop
 8011048:	e7fe      	b.n	8011048 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104c:	699a      	ldr	r2, [r3, #24]
 801104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011050:	18d1      	adds	r1, r2, r3
 8011052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011058:	f7ff ff06 	bl	8010e68 <prvInsertTimerInActiveList>
					break;
 801105c:	e015      	b.n	801108a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801105e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011064:	f003 0302 	and.w	r3, r3, #2
 8011068:	2b00      	cmp	r3, #0
 801106a:	d103      	bne.n	8011074 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801106c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801106e:	f000 fb59 	bl	8011724 <vPortFree>
 8011072:	e00a      	b.n	801108a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801107a:	f023 0301 	bic.w	r3, r3, #1
 801107e:	b2da      	uxtb	r2, r3
 8011080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011086:	e000      	b.n	801108a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011088:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801108a:	4b08      	ldr	r3, [pc, #32]	; (80110ac <prvProcessReceivedCommands+0x1c0>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	1d39      	adds	r1, r7, #4
 8011090:	2200      	movs	r2, #0
 8011092:	4618      	mov	r0, r3
 8011094:	f7fe fbb6 	bl	800f804 <xQueueReceive>
 8011098:	4603      	mov	r3, r0
 801109a:	2b00      	cmp	r3, #0
 801109c:	f47f af2a 	bne.w	8010ef4 <prvProcessReceivedCommands+0x8>
	}
}
 80110a0:	bf00      	nop
 80110a2:	bf00      	nop
 80110a4:	3730      	adds	r7, #48	; 0x30
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	240018c4 	.word	0x240018c4

080110b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b088      	sub	sp, #32
 80110b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80110b6:	e048      	b.n	801114a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80110b8:	4b2d      	ldr	r3, [pc, #180]	; (8011170 <prvSwitchTimerLists+0xc0>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	68db      	ldr	r3, [r3, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110c2:	4b2b      	ldr	r3, [pc, #172]	; (8011170 <prvSwitchTimerLists+0xc0>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	68db      	ldr	r3, [r3, #12]
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	3304      	adds	r3, #4
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7fe f8cf 	bl	800f274 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6a1b      	ldr	r3, [r3, #32]
 80110da:	68f8      	ldr	r0, [r7, #12]
 80110dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110e4:	f003 0304 	and.w	r3, r3, #4
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d02e      	beq.n	801114a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	699b      	ldr	r3, [r3, #24]
 80110f0:	693a      	ldr	r2, [r7, #16]
 80110f2:	4413      	add	r3, r2
 80110f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80110f6:	68ba      	ldr	r2, [r7, #8]
 80110f8:	693b      	ldr	r3, [r7, #16]
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d90e      	bls.n	801111c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	68ba      	ldr	r2, [r7, #8]
 8011102:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	68fa      	ldr	r2, [r7, #12]
 8011108:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801110a:	4b19      	ldr	r3, [pc, #100]	; (8011170 <prvSwitchTimerLists+0xc0>)
 801110c:	681a      	ldr	r2, [r3, #0]
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	3304      	adds	r3, #4
 8011112:	4619      	mov	r1, r3
 8011114:	4610      	mov	r0, r2
 8011116:	f7fe f874 	bl	800f202 <vListInsert>
 801111a:	e016      	b.n	801114a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801111c:	2300      	movs	r3, #0
 801111e:	9300      	str	r3, [sp, #0]
 8011120:	2300      	movs	r3, #0
 8011122:	693a      	ldr	r2, [r7, #16]
 8011124:	2100      	movs	r1, #0
 8011126:	68f8      	ldr	r0, [r7, #12]
 8011128:	f7ff fd60 	bl	8010bec <xTimerGenericCommand>
 801112c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d10a      	bne.n	801114a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011138:	f383 8811 	msr	BASEPRI, r3
 801113c:	f3bf 8f6f 	isb	sy
 8011140:	f3bf 8f4f 	dsb	sy
 8011144:	603b      	str	r3, [r7, #0]
}
 8011146:	bf00      	nop
 8011148:	e7fe      	b.n	8011148 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801114a:	4b09      	ldr	r3, [pc, #36]	; (8011170 <prvSwitchTimerLists+0xc0>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d1b1      	bne.n	80110b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011154:	4b06      	ldr	r3, [pc, #24]	; (8011170 <prvSwitchTimerLists+0xc0>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801115a:	4b06      	ldr	r3, [pc, #24]	; (8011174 <prvSwitchTimerLists+0xc4>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	4a04      	ldr	r2, [pc, #16]	; (8011170 <prvSwitchTimerLists+0xc0>)
 8011160:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011162:	4a04      	ldr	r2, [pc, #16]	; (8011174 <prvSwitchTimerLists+0xc4>)
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	6013      	str	r3, [r2, #0]
}
 8011168:	bf00      	nop
 801116a:	3718      	adds	r7, #24
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}
 8011170:	240018bc 	.word	0x240018bc
 8011174:	240018c0 	.word	0x240018c0

08011178 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b082      	sub	sp, #8
 801117c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801117e:	f000 f969 	bl	8011454 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011182:	4b15      	ldr	r3, [pc, #84]	; (80111d8 <prvCheckForValidListAndQueue+0x60>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d120      	bne.n	80111cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801118a:	4814      	ldr	r0, [pc, #80]	; (80111dc <prvCheckForValidListAndQueue+0x64>)
 801118c:	f7fd ffe8 	bl	800f160 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011190:	4813      	ldr	r0, [pc, #76]	; (80111e0 <prvCheckForValidListAndQueue+0x68>)
 8011192:	f7fd ffe5 	bl	800f160 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011196:	4b13      	ldr	r3, [pc, #76]	; (80111e4 <prvCheckForValidListAndQueue+0x6c>)
 8011198:	4a10      	ldr	r2, [pc, #64]	; (80111dc <prvCheckForValidListAndQueue+0x64>)
 801119a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801119c:	4b12      	ldr	r3, [pc, #72]	; (80111e8 <prvCheckForValidListAndQueue+0x70>)
 801119e:	4a10      	ldr	r2, [pc, #64]	; (80111e0 <prvCheckForValidListAndQueue+0x68>)
 80111a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80111a2:	2300      	movs	r3, #0
 80111a4:	9300      	str	r3, [sp, #0]
 80111a6:	4b11      	ldr	r3, [pc, #68]	; (80111ec <prvCheckForValidListAndQueue+0x74>)
 80111a8:	4a11      	ldr	r2, [pc, #68]	; (80111f0 <prvCheckForValidListAndQueue+0x78>)
 80111aa:	2110      	movs	r1, #16
 80111ac:	200a      	movs	r0, #10
 80111ae:	f7fe f8f3 	bl	800f398 <xQueueGenericCreateStatic>
 80111b2:	4603      	mov	r3, r0
 80111b4:	4a08      	ldr	r2, [pc, #32]	; (80111d8 <prvCheckForValidListAndQueue+0x60>)
 80111b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80111b8:	4b07      	ldr	r3, [pc, #28]	; (80111d8 <prvCheckForValidListAndQueue+0x60>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d005      	beq.n	80111cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80111c0:	4b05      	ldr	r3, [pc, #20]	; (80111d8 <prvCheckForValidListAndQueue+0x60>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	490b      	ldr	r1, [pc, #44]	; (80111f4 <prvCheckForValidListAndQueue+0x7c>)
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fe fd0c 	bl	800fbe4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80111cc:	f000 f972 	bl	80114b4 <vPortExitCritical>
}
 80111d0:	bf00      	nop
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	240018c4 	.word	0x240018c4
 80111dc:	24001894 	.word	0x24001894
 80111e0:	240018a8 	.word	0x240018a8
 80111e4:	240018bc 	.word	0x240018bc
 80111e8:	240018c0 	.word	0x240018c0
 80111ec:	24001970 	.word	0x24001970
 80111f0:	240018d0 	.word	0x240018d0
 80111f4:	080119f8 	.word	0x080119f8

080111f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80111f8:	b480      	push	{r7}
 80111fa:	b085      	sub	sp, #20
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	60f8      	str	r0, [r7, #12]
 8011200:	60b9      	str	r1, [r7, #8]
 8011202:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	3b04      	subs	r3, #4
 8011208:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	3b04      	subs	r3, #4
 8011216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	f023 0201 	bic.w	r2, r3, #1
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	3b04      	subs	r3, #4
 8011226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011228:	4a0c      	ldr	r2, [pc, #48]	; (801125c <pxPortInitialiseStack+0x64>)
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	3b14      	subs	r3, #20
 8011232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	3b04      	subs	r3, #4
 801123e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f06f 0202 	mvn.w	r2, #2
 8011246:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	3b20      	subs	r3, #32
 801124c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801124e:	68fb      	ldr	r3, [r7, #12]
}
 8011250:	4618      	mov	r0, r3
 8011252:	3714      	adds	r7, #20
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr
 801125c:	08011261 	.word	0x08011261

08011260 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011260:	b480      	push	{r7}
 8011262:	b085      	sub	sp, #20
 8011264:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011266:	2300      	movs	r3, #0
 8011268:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801126a:	4b12      	ldr	r3, [pc, #72]	; (80112b4 <prvTaskExitError+0x54>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011272:	d00a      	beq.n	801128a <prvTaskExitError+0x2a>
	__asm volatile
 8011274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011278:	f383 8811 	msr	BASEPRI, r3
 801127c:	f3bf 8f6f 	isb	sy
 8011280:	f3bf 8f4f 	dsb	sy
 8011284:	60fb      	str	r3, [r7, #12]
}
 8011286:	bf00      	nop
 8011288:	e7fe      	b.n	8011288 <prvTaskExitError+0x28>
	__asm volatile
 801128a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801128e:	f383 8811 	msr	BASEPRI, r3
 8011292:	f3bf 8f6f 	isb	sy
 8011296:	f3bf 8f4f 	dsb	sy
 801129a:	60bb      	str	r3, [r7, #8]
}
 801129c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801129e:	bf00      	nop
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d0fc      	beq.n	80112a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80112a6:	bf00      	nop
 80112a8:	bf00      	nop
 80112aa:	3714      	adds	r7, #20
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr
 80112b4:	24000010 	.word	0x24000010
	...

080112c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80112c0:	4b07      	ldr	r3, [pc, #28]	; (80112e0 <pxCurrentTCBConst2>)
 80112c2:	6819      	ldr	r1, [r3, #0]
 80112c4:	6808      	ldr	r0, [r1, #0]
 80112c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ca:	f380 8809 	msr	PSP, r0
 80112ce:	f3bf 8f6f 	isb	sy
 80112d2:	f04f 0000 	mov.w	r0, #0
 80112d6:	f380 8811 	msr	BASEPRI, r0
 80112da:	4770      	bx	lr
 80112dc:	f3af 8000 	nop.w

080112e0 <pxCurrentTCBConst2>:
 80112e0:	2400138c 	.word	0x2400138c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80112e4:	bf00      	nop
 80112e6:	bf00      	nop

080112e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80112e8:	4808      	ldr	r0, [pc, #32]	; (801130c <prvPortStartFirstTask+0x24>)
 80112ea:	6800      	ldr	r0, [r0, #0]
 80112ec:	6800      	ldr	r0, [r0, #0]
 80112ee:	f380 8808 	msr	MSP, r0
 80112f2:	f04f 0000 	mov.w	r0, #0
 80112f6:	f380 8814 	msr	CONTROL, r0
 80112fa:	b662      	cpsie	i
 80112fc:	b661      	cpsie	f
 80112fe:	f3bf 8f4f 	dsb	sy
 8011302:	f3bf 8f6f 	isb	sy
 8011306:	df00      	svc	0
 8011308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801130a:	bf00      	nop
 801130c:	e000ed08 	.word	0xe000ed08

08011310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b086      	sub	sp, #24
 8011314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011316:	4b46      	ldr	r3, [pc, #280]	; (8011430 <xPortStartScheduler+0x120>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	4a46      	ldr	r2, [pc, #280]	; (8011434 <xPortStartScheduler+0x124>)
 801131c:	4293      	cmp	r3, r2
 801131e:	d10a      	bne.n	8011336 <xPortStartScheduler+0x26>
	__asm volatile
 8011320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011324:	f383 8811 	msr	BASEPRI, r3
 8011328:	f3bf 8f6f 	isb	sy
 801132c:	f3bf 8f4f 	dsb	sy
 8011330:	613b      	str	r3, [r7, #16]
}
 8011332:	bf00      	nop
 8011334:	e7fe      	b.n	8011334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011336:	4b3e      	ldr	r3, [pc, #248]	; (8011430 <xPortStartScheduler+0x120>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	4a3f      	ldr	r2, [pc, #252]	; (8011438 <xPortStartScheduler+0x128>)
 801133c:	4293      	cmp	r3, r2
 801133e:	d10a      	bne.n	8011356 <xPortStartScheduler+0x46>
	__asm volatile
 8011340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011344:	f383 8811 	msr	BASEPRI, r3
 8011348:	f3bf 8f6f 	isb	sy
 801134c:	f3bf 8f4f 	dsb	sy
 8011350:	60fb      	str	r3, [r7, #12]
}
 8011352:	bf00      	nop
 8011354:	e7fe      	b.n	8011354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011356:	4b39      	ldr	r3, [pc, #228]	; (801143c <xPortStartScheduler+0x12c>)
 8011358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	b2db      	uxtb	r3, r3
 8011360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	22ff      	movs	r2, #255	; 0xff
 8011366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	b2db      	uxtb	r3, r3
 801136e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011370:	78fb      	ldrb	r3, [r7, #3]
 8011372:	b2db      	uxtb	r3, r3
 8011374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011378:	b2da      	uxtb	r2, r3
 801137a:	4b31      	ldr	r3, [pc, #196]	; (8011440 <xPortStartScheduler+0x130>)
 801137c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801137e:	4b31      	ldr	r3, [pc, #196]	; (8011444 <xPortStartScheduler+0x134>)
 8011380:	2207      	movs	r2, #7
 8011382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011384:	e009      	b.n	801139a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011386:	4b2f      	ldr	r3, [pc, #188]	; (8011444 <xPortStartScheduler+0x134>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	3b01      	subs	r3, #1
 801138c:	4a2d      	ldr	r2, [pc, #180]	; (8011444 <xPortStartScheduler+0x134>)
 801138e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011390:	78fb      	ldrb	r3, [r7, #3]
 8011392:	b2db      	uxtb	r3, r3
 8011394:	005b      	lsls	r3, r3, #1
 8011396:	b2db      	uxtb	r3, r3
 8011398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801139a:	78fb      	ldrb	r3, [r7, #3]
 801139c:	b2db      	uxtb	r3, r3
 801139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113a2:	2b80      	cmp	r3, #128	; 0x80
 80113a4:	d0ef      	beq.n	8011386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80113a6:	4b27      	ldr	r3, [pc, #156]	; (8011444 <xPortStartScheduler+0x134>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f1c3 0307 	rsb	r3, r3, #7
 80113ae:	2b04      	cmp	r3, #4
 80113b0:	d00a      	beq.n	80113c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80113b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b6:	f383 8811 	msr	BASEPRI, r3
 80113ba:	f3bf 8f6f 	isb	sy
 80113be:	f3bf 8f4f 	dsb	sy
 80113c2:	60bb      	str	r3, [r7, #8]
}
 80113c4:	bf00      	nop
 80113c6:	e7fe      	b.n	80113c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80113c8:	4b1e      	ldr	r3, [pc, #120]	; (8011444 <xPortStartScheduler+0x134>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	021b      	lsls	r3, r3, #8
 80113ce:	4a1d      	ldr	r2, [pc, #116]	; (8011444 <xPortStartScheduler+0x134>)
 80113d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80113d2:	4b1c      	ldr	r3, [pc, #112]	; (8011444 <xPortStartScheduler+0x134>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80113da:	4a1a      	ldr	r2, [pc, #104]	; (8011444 <xPortStartScheduler+0x134>)
 80113dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	b2da      	uxtb	r2, r3
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80113e6:	4b18      	ldr	r3, [pc, #96]	; (8011448 <xPortStartScheduler+0x138>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	4a17      	ldr	r2, [pc, #92]	; (8011448 <xPortStartScheduler+0x138>)
 80113ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80113f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80113f2:	4b15      	ldr	r3, [pc, #84]	; (8011448 <xPortStartScheduler+0x138>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	4a14      	ldr	r2, [pc, #80]	; (8011448 <xPortStartScheduler+0x138>)
 80113f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80113fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80113fe:	f000 f8dd 	bl	80115bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011402:	4b12      	ldr	r3, [pc, #72]	; (801144c <xPortStartScheduler+0x13c>)
 8011404:	2200      	movs	r2, #0
 8011406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011408:	f000 f8fc 	bl	8011604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801140c:	4b10      	ldr	r3, [pc, #64]	; (8011450 <xPortStartScheduler+0x140>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	4a0f      	ldr	r2, [pc, #60]	; (8011450 <xPortStartScheduler+0x140>)
 8011412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011418:	f7ff ff66 	bl	80112e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801141c:	f7ff f81a 	bl	8010454 <vTaskSwitchContext>
	prvTaskExitError();
 8011420:	f7ff ff1e 	bl	8011260 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011424:	2300      	movs	r3, #0
}
 8011426:	4618      	mov	r0, r3
 8011428:	3718      	adds	r7, #24
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	e000ed00 	.word	0xe000ed00
 8011434:	410fc271 	.word	0x410fc271
 8011438:	410fc270 	.word	0x410fc270
 801143c:	e000e400 	.word	0xe000e400
 8011440:	240019c0 	.word	0x240019c0
 8011444:	240019c4 	.word	0x240019c4
 8011448:	e000ed20 	.word	0xe000ed20
 801144c:	24000010 	.word	0x24000010
 8011450:	e000ef34 	.word	0xe000ef34

08011454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011454:	b480      	push	{r7}
 8011456:	b083      	sub	sp, #12
 8011458:	af00      	add	r7, sp, #0
	__asm volatile
 801145a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801145e:	f383 8811 	msr	BASEPRI, r3
 8011462:	f3bf 8f6f 	isb	sy
 8011466:	f3bf 8f4f 	dsb	sy
 801146a:	607b      	str	r3, [r7, #4]
}
 801146c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801146e:	4b0f      	ldr	r3, [pc, #60]	; (80114ac <vPortEnterCritical+0x58>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	3301      	adds	r3, #1
 8011474:	4a0d      	ldr	r2, [pc, #52]	; (80114ac <vPortEnterCritical+0x58>)
 8011476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011478:	4b0c      	ldr	r3, [pc, #48]	; (80114ac <vPortEnterCritical+0x58>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2b01      	cmp	r3, #1
 801147e:	d10f      	bne.n	80114a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011480:	4b0b      	ldr	r3, [pc, #44]	; (80114b0 <vPortEnterCritical+0x5c>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	b2db      	uxtb	r3, r3
 8011486:	2b00      	cmp	r3, #0
 8011488:	d00a      	beq.n	80114a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801148a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801148e:	f383 8811 	msr	BASEPRI, r3
 8011492:	f3bf 8f6f 	isb	sy
 8011496:	f3bf 8f4f 	dsb	sy
 801149a:	603b      	str	r3, [r7, #0]
}
 801149c:	bf00      	nop
 801149e:	e7fe      	b.n	801149e <vPortEnterCritical+0x4a>
	}
}
 80114a0:	bf00      	nop
 80114a2:	370c      	adds	r7, #12
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr
 80114ac:	24000010 	.word	0x24000010
 80114b0:	e000ed04 	.word	0xe000ed04

080114b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80114b4:	b480      	push	{r7}
 80114b6:	b083      	sub	sp, #12
 80114b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80114ba:	4b12      	ldr	r3, [pc, #72]	; (8011504 <vPortExitCritical+0x50>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d10a      	bne.n	80114d8 <vPortExitCritical+0x24>
	__asm volatile
 80114c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c6:	f383 8811 	msr	BASEPRI, r3
 80114ca:	f3bf 8f6f 	isb	sy
 80114ce:	f3bf 8f4f 	dsb	sy
 80114d2:	607b      	str	r3, [r7, #4]
}
 80114d4:	bf00      	nop
 80114d6:	e7fe      	b.n	80114d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80114d8:	4b0a      	ldr	r3, [pc, #40]	; (8011504 <vPortExitCritical+0x50>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	3b01      	subs	r3, #1
 80114de:	4a09      	ldr	r2, [pc, #36]	; (8011504 <vPortExitCritical+0x50>)
 80114e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80114e2:	4b08      	ldr	r3, [pc, #32]	; (8011504 <vPortExitCritical+0x50>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d105      	bne.n	80114f6 <vPortExitCritical+0x42>
 80114ea:	2300      	movs	r3, #0
 80114ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	f383 8811 	msr	BASEPRI, r3
}
 80114f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80114f6:	bf00      	nop
 80114f8:	370c      	adds	r7, #12
 80114fa:	46bd      	mov	sp, r7
 80114fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011500:	4770      	bx	lr
 8011502:	bf00      	nop
 8011504:	24000010 	.word	0x24000010
	...

08011510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011510:	f3ef 8009 	mrs	r0, PSP
 8011514:	f3bf 8f6f 	isb	sy
 8011518:	4b15      	ldr	r3, [pc, #84]	; (8011570 <pxCurrentTCBConst>)
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	f01e 0f10 	tst.w	lr, #16
 8011520:	bf08      	it	eq
 8011522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152a:	6010      	str	r0, [r2, #0]
 801152c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011534:	f380 8811 	msr	BASEPRI, r0
 8011538:	f3bf 8f4f 	dsb	sy
 801153c:	f3bf 8f6f 	isb	sy
 8011540:	f7fe ff88 	bl	8010454 <vTaskSwitchContext>
 8011544:	f04f 0000 	mov.w	r0, #0
 8011548:	f380 8811 	msr	BASEPRI, r0
 801154c:	bc09      	pop	{r0, r3}
 801154e:	6819      	ldr	r1, [r3, #0]
 8011550:	6808      	ldr	r0, [r1, #0]
 8011552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011556:	f01e 0f10 	tst.w	lr, #16
 801155a:	bf08      	it	eq
 801155c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011560:	f380 8809 	msr	PSP, r0
 8011564:	f3bf 8f6f 	isb	sy
 8011568:	4770      	bx	lr
 801156a:	bf00      	nop
 801156c:	f3af 8000 	nop.w

08011570 <pxCurrentTCBConst>:
 8011570:	2400138c 	.word	0x2400138c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011574:	bf00      	nop
 8011576:	bf00      	nop

08011578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0
	__asm volatile
 801157e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011582:	f383 8811 	msr	BASEPRI, r3
 8011586:	f3bf 8f6f 	isb	sy
 801158a:	f3bf 8f4f 	dsb	sy
 801158e:	607b      	str	r3, [r7, #4]
}
 8011590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011592:	f7fe fea5 	bl	80102e0 <xTaskIncrementTick>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	d003      	beq.n	80115a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801159c:	4b06      	ldr	r3, [pc, #24]	; (80115b8 <xPortSysTickHandler+0x40>)
 801159e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115a2:	601a      	str	r2, [r3, #0]
 80115a4:	2300      	movs	r3, #0
 80115a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	f383 8811 	msr	BASEPRI, r3
}
 80115ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80115b0:	bf00      	nop
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	e000ed04 	.word	0xe000ed04

080115bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80115bc:	b480      	push	{r7}
 80115be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80115c0:	4b0b      	ldr	r3, [pc, #44]	; (80115f0 <vPortSetupTimerInterrupt+0x34>)
 80115c2:	2200      	movs	r2, #0
 80115c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80115c6:	4b0b      	ldr	r3, [pc, #44]	; (80115f4 <vPortSetupTimerInterrupt+0x38>)
 80115c8:	2200      	movs	r2, #0
 80115ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80115cc:	4b0a      	ldr	r3, [pc, #40]	; (80115f8 <vPortSetupTimerInterrupt+0x3c>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	4a0a      	ldr	r2, [pc, #40]	; (80115fc <vPortSetupTimerInterrupt+0x40>)
 80115d2:	fba2 2303 	umull	r2, r3, r2, r3
 80115d6:	099b      	lsrs	r3, r3, #6
 80115d8:	4a09      	ldr	r2, [pc, #36]	; (8011600 <vPortSetupTimerInterrupt+0x44>)
 80115da:	3b01      	subs	r3, #1
 80115dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80115de:	4b04      	ldr	r3, [pc, #16]	; (80115f0 <vPortSetupTimerInterrupt+0x34>)
 80115e0:	2207      	movs	r2, #7
 80115e2:	601a      	str	r2, [r3, #0]
}
 80115e4:	bf00      	nop
 80115e6:	46bd      	mov	sp, r7
 80115e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ec:	4770      	bx	lr
 80115ee:	bf00      	nop
 80115f0:	e000e010 	.word	0xe000e010
 80115f4:	e000e018 	.word	0xe000e018
 80115f8:	24000000 	.word	0x24000000
 80115fc:	10624dd3 	.word	0x10624dd3
 8011600:	e000e014 	.word	0xe000e014

08011604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011614 <vPortEnableVFP+0x10>
 8011608:	6801      	ldr	r1, [r0, #0]
 801160a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801160e:	6001      	str	r1, [r0, #0]
 8011610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011612:	bf00      	nop
 8011614:	e000ed88 	.word	0xe000ed88

08011618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011618:	b480      	push	{r7}
 801161a:	b085      	sub	sp, #20
 801161c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801161e:	f3ef 8305 	mrs	r3, IPSR
 8011622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2b0f      	cmp	r3, #15
 8011628:	d914      	bls.n	8011654 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801162a:	4a17      	ldr	r2, [pc, #92]	; (8011688 <vPortValidateInterruptPriority+0x70>)
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	4413      	add	r3, r2
 8011630:	781b      	ldrb	r3, [r3, #0]
 8011632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011634:	4b15      	ldr	r3, [pc, #84]	; (801168c <vPortValidateInterruptPriority+0x74>)
 8011636:	781b      	ldrb	r3, [r3, #0]
 8011638:	7afa      	ldrb	r2, [r7, #11]
 801163a:	429a      	cmp	r2, r3
 801163c:	d20a      	bcs.n	8011654 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801163e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011642:	f383 8811 	msr	BASEPRI, r3
 8011646:	f3bf 8f6f 	isb	sy
 801164a:	f3bf 8f4f 	dsb	sy
 801164e:	607b      	str	r3, [r7, #4]
}
 8011650:	bf00      	nop
 8011652:	e7fe      	b.n	8011652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011654:	4b0e      	ldr	r3, [pc, #56]	; (8011690 <vPortValidateInterruptPriority+0x78>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801165c:	4b0d      	ldr	r3, [pc, #52]	; (8011694 <vPortValidateInterruptPriority+0x7c>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	429a      	cmp	r2, r3
 8011662:	d90a      	bls.n	801167a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011668:	f383 8811 	msr	BASEPRI, r3
 801166c:	f3bf 8f6f 	isb	sy
 8011670:	f3bf 8f4f 	dsb	sy
 8011674:	603b      	str	r3, [r7, #0]
}
 8011676:	bf00      	nop
 8011678:	e7fe      	b.n	8011678 <vPortValidateInterruptPriority+0x60>
	}
 801167a:	bf00      	nop
 801167c:	3714      	adds	r7, #20
 801167e:	46bd      	mov	sp, r7
 8011680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop
 8011688:	e000e3f0 	.word	0xe000e3f0
 801168c:	240019c0 	.word	0x240019c0
 8011690:	e000ed0c 	.word	0xe000ed0c
 8011694:	240019c4 	.word	0x240019c4

08011698 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b084      	sub	sp, #16
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80116a0:	2300      	movs	r3, #0
 80116a2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f003 0307 	and.w	r3, r3, #7
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d004      	beq.n	80116b8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f023 0307 	bic.w	r3, r3, #7
 80116b4:	3308      	adds	r3, #8
 80116b6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80116b8:	f7fe fd56 	bl	8010168 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80116bc:	4b16      	ldr	r3, [pc, #88]	; (8011718 <pvPortMalloc+0x80>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d105      	bne.n	80116d0 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80116c4:	4b15      	ldr	r3, [pc, #84]	; (801171c <pvPortMalloc+0x84>)
 80116c6:	f023 0307 	bic.w	r3, r3, #7
 80116ca:	461a      	mov	r2, r3
 80116cc:	4b12      	ldr	r3, [pc, #72]	; (8011718 <pvPortMalloc+0x80>)
 80116ce:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80116d0:	4b13      	ldr	r3, [pc, #76]	; (8011720 <pvPortMalloc+0x88>)
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	4413      	add	r3, r2
 80116d8:	f247 72f7 	movw	r2, #30711	; 0x77f7
 80116dc:	4293      	cmp	r3, r2
 80116de:	d813      	bhi.n	8011708 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80116e0:	4b0f      	ldr	r3, [pc, #60]	; (8011720 <pvPortMalloc+0x88>)
 80116e2:	681a      	ldr	r2, [r3, #0]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	441a      	add	r2, r3
 80116e8:	4b0d      	ldr	r3, [pc, #52]	; (8011720 <pvPortMalloc+0x88>)
 80116ea:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d90b      	bls.n	8011708 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80116f0:	4b09      	ldr	r3, [pc, #36]	; (8011718 <pvPortMalloc+0x80>)
 80116f2:	681a      	ldr	r2, [r3, #0]
 80116f4:	4b0a      	ldr	r3, [pc, #40]	; (8011720 <pvPortMalloc+0x88>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	4413      	add	r3, r2
 80116fa:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80116fc:	4b08      	ldr	r3, [pc, #32]	; (8011720 <pvPortMalloc+0x88>)
 80116fe:	681a      	ldr	r2, [r3, #0]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	4413      	add	r3, r2
 8011704:	4a06      	ldr	r2, [pc, #24]	; (8011720 <pvPortMalloc+0x88>)
 8011706:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011708:	f7fe fd3c 	bl	8010184 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 801170c:	68fb      	ldr	r3, [r7, #12]
}
 801170e:	4618      	mov	r0, r3
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
 8011716:	bf00      	nop
 8011718:	240091cc 	.word	0x240091cc
 801171c:	240019d0 	.word	0x240019d0
 8011720:	240091c8 	.word	0x240091c8

08011724 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011724:	b480      	push	{r7}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00a      	beq.n	8011748 <vPortFree+0x24>
	__asm volatile
 8011732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011736:	f383 8811 	msr	BASEPRI, r3
 801173a:	f3bf 8f6f 	isb	sy
 801173e:	f3bf 8f4f 	dsb	sy
 8011742:	60fb      	str	r3, [r7, #12]
}
 8011744:	bf00      	nop
 8011746:	e7fe      	b.n	8011746 <vPortFree+0x22>
}
 8011748:	bf00      	nop
 801174a:	3714      	adds	r7, #20
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr

08011754 <__libc_init_array>:
 8011754:	b570      	push	{r4, r5, r6, lr}
 8011756:	4d0d      	ldr	r5, [pc, #52]	; (801178c <__libc_init_array+0x38>)
 8011758:	4c0d      	ldr	r4, [pc, #52]	; (8011790 <__libc_init_array+0x3c>)
 801175a:	1b64      	subs	r4, r4, r5
 801175c:	10a4      	asrs	r4, r4, #2
 801175e:	2600      	movs	r6, #0
 8011760:	42a6      	cmp	r6, r4
 8011762:	d109      	bne.n	8011778 <__libc_init_array+0x24>
 8011764:	4d0b      	ldr	r5, [pc, #44]	; (8011794 <__libc_init_array+0x40>)
 8011766:	4c0c      	ldr	r4, [pc, #48]	; (8011798 <__libc_init_array+0x44>)
 8011768:	f000 f8f2 	bl	8011950 <_init>
 801176c:	1b64      	subs	r4, r4, r5
 801176e:	10a4      	asrs	r4, r4, #2
 8011770:	2600      	movs	r6, #0
 8011772:	42a6      	cmp	r6, r4
 8011774:	d105      	bne.n	8011782 <__libc_init_array+0x2e>
 8011776:	bd70      	pop	{r4, r5, r6, pc}
 8011778:	f855 3b04 	ldr.w	r3, [r5], #4
 801177c:	4798      	blx	r3
 801177e:	3601      	adds	r6, #1
 8011780:	e7ee      	b.n	8011760 <__libc_init_array+0xc>
 8011782:	f855 3b04 	ldr.w	r3, [r5], #4
 8011786:	4798      	blx	r3
 8011788:	3601      	adds	r6, #1
 801178a:	e7f2      	b.n	8011772 <__libc_init_array+0x1e>
 801178c:	08011acc 	.word	0x08011acc
 8011790:	08011acc 	.word	0x08011acc
 8011794:	08011acc 	.word	0x08011acc
 8011798:	08011ad0 	.word	0x08011ad0

0801179c <__retarget_lock_acquire_recursive>:
 801179c:	4770      	bx	lr

0801179e <__retarget_lock_release_recursive>:
 801179e:	4770      	bx	lr

080117a0 <memcpy>:
 80117a0:	440a      	add	r2, r1
 80117a2:	4291      	cmp	r1, r2
 80117a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80117a8:	d100      	bne.n	80117ac <memcpy+0xc>
 80117aa:	4770      	bx	lr
 80117ac:	b510      	push	{r4, lr}
 80117ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80117b6:	4291      	cmp	r1, r2
 80117b8:	d1f9      	bne.n	80117ae <memcpy+0xe>
 80117ba:	bd10      	pop	{r4, pc}

080117bc <memset>:
 80117bc:	4402      	add	r2, r0
 80117be:	4603      	mov	r3, r0
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d100      	bne.n	80117c6 <memset+0xa>
 80117c4:	4770      	bx	lr
 80117c6:	f803 1b01 	strb.w	r1, [r3], #1
 80117ca:	e7f9      	b.n	80117c0 <memset+0x4>

080117cc <cleanup_glue>:
 80117cc:	b538      	push	{r3, r4, r5, lr}
 80117ce:	460c      	mov	r4, r1
 80117d0:	6809      	ldr	r1, [r1, #0]
 80117d2:	4605      	mov	r5, r0
 80117d4:	b109      	cbz	r1, 80117da <cleanup_glue+0xe>
 80117d6:	f7ff fff9 	bl	80117cc <cleanup_glue>
 80117da:	4621      	mov	r1, r4
 80117dc:	4628      	mov	r0, r5
 80117de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117e2:	f000 b869 	b.w	80118b8 <_free_r>
	...

080117e8 <_reclaim_reent>:
 80117e8:	4b2c      	ldr	r3, [pc, #176]	; (801189c <_reclaim_reent+0xb4>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	4283      	cmp	r3, r0
 80117ee:	b570      	push	{r4, r5, r6, lr}
 80117f0:	4604      	mov	r4, r0
 80117f2:	d051      	beq.n	8011898 <_reclaim_reent+0xb0>
 80117f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80117f6:	b143      	cbz	r3, 801180a <_reclaim_reent+0x22>
 80117f8:	68db      	ldr	r3, [r3, #12]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d14a      	bne.n	8011894 <_reclaim_reent+0xac>
 80117fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011800:	6819      	ldr	r1, [r3, #0]
 8011802:	b111      	cbz	r1, 801180a <_reclaim_reent+0x22>
 8011804:	4620      	mov	r0, r4
 8011806:	f000 f857 	bl	80118b8 <_free_r>
 801180a:	6961      	ldr	r1, [r4, #20]
 801180c:	b111      	cbz	r1, 8011814 <_reclaim_reent+0x2c>
 801180e:	4620      	mov	r0, r4
 8011810:	f000 f852 	bl	80118b8 <_free_r>
 8011814:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011816:	b111      	cbz	r1, 801181e <_reclaim_reent+0x36>
 8011818:	4620      	mov	r0, r4
 801181a:	f000 f84d 	bl	80118b8 <_free_r>
 801181e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011820:	b111      	cbz	r1, 8011828 <_reclaim_reent+0x40>
 8011822:	4620      	mov	r0, r4
 8011824:	f000 f848 	bl	80118b8 <_free_r>
 8011828:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801182a:	b111      	cbz	r1, 8011832 <_reclaim_reent+0x4a>
 801182c:	4620      	mov	r0, r4
 801182e:	f000 f843 	bl	80118b8 <_free_r>
 8011832:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011834:	b111      	cbz	r1, 801183c <_reclaim_reent+0x54>
 8011836:	4620      	mov	r0, r4
 8011838:	f000 f83e 	bl	80118b8 <_free_r>
 801183c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801183e:	b111      	cbz	r1, 8011846 <_reclaim_reent+0x5e>
 8011840:	4620      	mov	r0, r4
 8011842:	f000 f839 	bl	80118b8 <_free_r>
 8011846:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011848:	b111      	cbz	r1, 8011850 <_reclaim_reent+0x68>
 801184a:	4620      	mov	r0, r4
 801184c:	f000 f834 	bl	80118b8 <_free_r>
 8011850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011852:	b111      	cbz	r1, 801185a <_reclaim_reent+0x72>
 8011854:	4620      	mov	r0, r4
 8011856:	f000 f82f 	bl	80118b8 <_free_r>
 801185a:	69a3      	ldr	r3, [r4, #24]
 801185c:	b1e3      	cbz	r3, 8011898 <_reclaim_reent+0xb0>
 801185e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011860:	4620      	mov	r0, r4
 8011862:	4798      	blx	r3
 8011864:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011866:	b1b9      	cbz	r1, 8011898 <_reclaim_reent+0xb0>
 8011868:	4620      	mov	r0, r4
 801186a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801186e:	f7ff bfad 	b.w	80117cc <cleanup_glue>
 8011872:	5949      	ldr	r1, [r1, r5]
 8011874:	b941      	cbnz	r1, 8011888 <_reclaim_reent+0xa0>
 8011876:	3504      	adds	r5, #4
 8011878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801187a:	2d80      	cmp	r5, #128	; 0x80
 801187c:	68d9      	ldr	r1, [r3, #12]
 801187e:	d1f8      	bne.n	8011872 <_reclaim_reent+0x8a>
 8011880:	4620      	mov	r0, r4
 8011882:	f000 f819 	bl	80118b8 <_free_r>
 8011886:	e7ba      	b.n	80117fe <_reclaim_reent+0x16>
 8011888:	680e      	ldr	r6, [r1, #0]
 801188a:	4620      	mov	r0, r4
 801188c:	f000 f814 	bl	80118b8 <_free_r>
 8011890:	4631      	mov	r1, r6
 8011892:	e7ef      	b.n	8011874 <_reclaim_reent+0x8c>
 8011894:	2500      	movs	r5, #0
 8011896:	e7ef      	b.n	8011878 <_reclaim_reent+0x90>
 8011898:	bd70      	pop	{r4, r5, r6, pc}
 801189a:	bf00      	nop
 801189c:	24000014 	.word	0x24000014

080118a0 <__malloc_lock>:
 80118a0:	4801      	ldr	r0, [pc, #4]	; (80118a8 <__malloc_lock+0x8>)
 80118a2:	f7ff bf7b 	b.w	801179c <__retarget_lock_acquire_recursive>
 80118a6:	bf00      	nop
 80118a8:	240091d0 	.word	0x240091d0

080118ac <__malloc_unlock>:
 80118ac:	4801      	ldr	r0, [pc, #4]	; (80118b4 <__malloc_unlock+0x8>)
 80118ae:	f7ff bf76 	b.w	801179e <__retarget_lock_release_recursive>
 80118b2:	bf00      	nop
 80118b4:	240091d0 	.word	0x240091d0

080118b8 <_free_r>:
 80118b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118ba:	2900      	cmp	r1, #0
 80118bc:	d044      	beq.n	8011948 <_free_r+0x90>
 80118be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118c2:	9001      	str	r0, [sp, #4]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	f1a1 0404 	sub.w	r4, r1, #4
 80118ca:	bfb8      	it	lt
 80118cc:	18e4      	addlt	r4, r4, r3
 80118ce:	f7ff ffe7 	bl	80118a0 <__malloc_lock>
 80118d2:	4a1e      	ldr	r2, [pc, #120]	; (801194c <_free_r+0x94>)
 80118d4:	9801      	ldr	r0, [sp, #4]
 80118d6:	6813      	ldr	r3, [r2, #0]
 80118d8:	b933      	cbnz	r3, 80118e8 <_free_r+0x30>
 80118da:	6063      	str	r3, [r4, #4]
 80118dc:	6014      	str	r4, [r2, #0]
 80118de:	b003      	add	sp, #12
 80118e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80118e4:	f7ff bfe2 	b.w	80118ac <__malloc_unlock>
 80118e8:	42a3      	cmp	r3, r4
 80118ea:	d908      	bls.n	80118fe <_free_r+0x46>
 80118ec:	6825      	ldr	r5, [r4, #0]
 80118ee:	1961      	adds	r1, r4, r5
 80118f0:	428b      	cmp	r3, r1
 80118f2:	bf01      	itttt	eq
 80118f4:	6819      	ldreq	r1, [r3, #0]
 80118f6:	685b      	ldreq	r3, [r3, #4]
 80118f8:	1949      	addeq	r1, r1, r5
 80118fa:	6021      	streq	r1, [r4, #0]
 80118fc:	e7ed      	b.n	80118da <_free_r+0x22>
 80118fe:	461a      	mov	r2, r3
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	b10b      	cbz	r3, 8011908 <_free_r+0x50>
 8011904:	42a3      	cmp	r3, r4
 8011906:	d9fa      	bls.n	80118fe <_free_r+0x46>
 8011908:	6811      	ldr	r1, [r2, #0]
 801190a:	1855      	adds	r5, r2, r1
 801190c:	42a5      	cmp	r5, r4
 801190e:	d10b      	bne.n	8011928 <_free_r+0x70>
 8011910:	6824      	ldr	r4, [r4, #0]
 8011912:	4421      	add	r1, r4
 8011914:	1854      	adds	r4, r2, r1
 8011916:	42a3      	cmp	r3, r4
 8011918:	6011      	str	r1, [r2, #0]
 801191a:	d1e0      	bne.n	80118de <_free_r+0x26>
 801191c:	681c      	ldr	r4, [r3, #0]
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	6053      	str	r3, [r2, #4]
 8011922:	4421      	add	r1, r4
 8011924:	6011      	str	r1, [r2, #0]
 8011926:	e7da      	b.n	80118de <_free_r+0x26>
 8011928:	d902      	bls.n	8011930 <_free_r+0x78>
 801192a:	230c      	movs	r3, #12
 801192c:	6003      	str	r3, [r0, #0]
 801192e:	e7d6      	b.n	80118de <_free_r+0x26>
 8011930:	6825      	ldr	r5, [r4, #0]
 8011932:	1961      	adds	r1, r4, r5
 8011934:	428b      	cmp	r3, r1
 8011936:	bf04      	itt	eq
 8011938:	6819      	ldreq	r1, [r3, #0]
 801193a:	685b      	ldreq	r3, [r3, #4]
 801193c:	6063      	str	r3, [r4, #4]
 801193e:	bf04      	itt	eq
 8011940:	1949      	addeq	r1, r1, r5
 8011942:	6021      	streq	r1, [r4, #0]
 8011944:	6054      	str	r4, [r2, #4]
 8011946:	e7ca      	b.n	80118de <_free_r+0x26>
 8011948:	b003      	add	sp, #12
 801194a:	bd30      	pop	{r4, r5, pc}
 801194c:	240091d4 	.word	0x240091d4

08011950 <_init>:
 8011950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011952:	bf00      	nop
 8011954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011956:	bc08      	pop	{r3}
 8011958:	469e      	mov	lr, r3
 801195a:	4770      	bx	lr

0801195c <_fini>:
 801195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801195e:	bf00      	nop
 8011960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011962:	bc08      	pop	{r3}
 8011964:	469e      	mov	lr, r3
 8011966:	4770      	bx	lr
